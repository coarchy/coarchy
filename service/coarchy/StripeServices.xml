<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <service verb="create" noun="PaymentIntent">
        <out-parameters>
            <parameter name="clientSecret"/>
            <parameter name="paymentId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.order.OrderHeaderAndPart" list="existingOrderList" limit="2">
                <econdition field-name="statusId" value="OrderOpen"/>
                <econdition field-name="customerPartyId" from="ec.user.userAccount.partyId"/>
                <select-field field-name="orderId,orderPartSeqId,grandTotal,currencyUomId,productStoreId"/>
                <order-by field-name="-entryDate"/><!-- get most recent open order --></entity-find>
            <if condition="existingOrderList.size() == 0"><return error="true" public="true" type="danger"
                    message="No order found for user."/></if>
            <if condition="existingOrderList.size() &gt; 1">
                <message type="warning">Multiple open orders or parts found for user. This should not happen.</message></if>

            <set field="orderHeaderAndPart" from="existingOrderList.getFirst()"/>
            <set field="orderId" from="orderHeaderAndPart.orderId"/>

            <entity-find entity-name="mantle.product.store.ProductStorePaymentGateway" list="productStorePaymentGatewayList" limit="1">
                <econdition field-name="productStoreId" from="orderHeaderAndPart.productStoreId"/>
                <econdition field-name="paymentInstrumentEnumId" value="PiStripe"/>
                <econdition field-name="paymentGatewayConfigId" operator="is-not-null"/>
                <select-field field-name="paymentGatewayConfigId"/><order-by field-name="-lastUpdatedStamp"/></entity-find>
            <if condition="productStorePaymentGatewayList.size() == 0"><return error="true" public="true" type="danger"
                    message="No payment gateway found for order."/></if>

            <set field="paymentGatewayConfigId" from="productStorePaymentGatewayList.getFirst().paymentGatewayConfigId"/>

            <entity-find entity-name="mantle.account.payment.Payment" list="existingPaymentList">
                <econdition field-name="orderId"/>
                <econdition field-name="orderPartSeqId" from="orderHeaderAndPart.orderPartSeqId"/>
                <econdition field-name="paymentGatewayConfigId"/>
                <select-field field-name="paymentId,amountUomId,unappliedTotal,statusId"/>
                <order-by field-name="-paymentDate"/></entity-find>
<!--            <log level="warn" message="create#PaymentIntent existingPaymentList.toString(): ${existingPaymentList.toString()}"/>-->
            <iterate list="existingPaymentList" entry="existingPayment">
                <if condition="['PmntProposed','PmntPromised'].contains(existingPayment.statusId)">
                    <then>
                        <service-call name="mantle.account.PaymentServices.cancel#PaymentAndInvoices" in-map="[paymentId:existingPayment.paymentId]"/>
                    </then>
                    <else-if condition="['PmntAuthorized','PmntDelivered'].contains(existingPayment.statusId)">
                        <service-call name="mantle.account.PaymentServices.void#Payment" in-map="[paymentId:existingPayment.paymentId]"/>
                    </else-if>
                </if>
            </iterate>

            <service-call name="mantle.order.OrderServices.add#OrderPartPayment" in-map="[orderId:orderHeaderAndPart.orderId,
                orderPartSeqId:orderHeaderAndPart.orderPartSeqId,settlementTermId:'Immediate', paymentInstrumentEnumId:'PiStripe',
                paymentGatewayConfigId:paymentGatewayConfigId,
                entryDate:ec.user.nowTimestamp]" out-map="context"/>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment" auto-field-map="[paymentId:paymentId]"/>

            <!-- convert unappliedTotal to cents -->
            <set field="unappliedTotal" from="(payment.unappliedTotal * 100).toInteger()" type="Integer"/>
            <set field="currencyUomId" from="payment.amountUomId"/>

            <!-- System steps -->
            <entity-find-one entity-name="mantle.account.method.PaymentGatewayConfig" value-field="paymentGateway" auto-field-map="[paymentGatewayConfigId:paymentGatewayConfigId]"/>
            <set field="stripeRemote" from="paymentGateway.remote"/>
            <script><![CDATA[party = ec.entity.find("mantle.party.Party").condition("partyId", ec.user.userAccount.partyId).one()]]></script>

            <script>import org.moqui.util.RestClient</script>

            <if condition="!party.externalId">
                <script><![CDATA[
                org.moqui.util.RestClient customerRestClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                        .basicAuth(stripeRemote.privateKey,"")
                        .addBodyParameter("email", (String) ec.user.userAccount.emailAddress)
                def customerUriBuilder = customerRestClient.uri().protocol("https").host("api.stripe.com").port(443)
                        .path("/v1/customers")
                customerUriBuilder.build()

                org.moqui.util.RestClient.RestResponse customerRestResponse = customerRestClient.call()
                customerResponseMap = (Map) customerRestResponse.jsonObject()
//                ec.logger.warn("customerResponseMap: ${customerResponseMap}")
                if (customerRestResponse.statusCode < 200 || customerRestResponse.statusCode >= 300) {
                    ec.logger.warn("Got status code ${customerRestResponse.statusCode} from Stripe on a create customers request")
                    ec.message.addPublic("Could not create Customer", "warning")
                    return
                }
                ]]></script>

                <set field="party.externalId" from="customerResponseMap.id"/>
                <entity-update value-field="party"/>
            </if>

            <!-- for not entering in the payment information for each payment -->
<!--            <script><![CDATA[
                org.moqui.util.RestClient paymentMethodListRestClient = ec.service.rest().method(org.moqui.util.RestClient.GET)
                        .basicAuth(stripeRemote.privateKey,"")
                        .addBodyParameter("type", (String) "card")
                def paymentMethodListUriBuilder = paymentMethodListRestClient.uri().protocol("https").host("api.stripe.com").port(443)
                        .path("/v1/customers/").path(party.externalId).path("/payment_methods")
                paymentMethodListUriBuilder.build()

                org.moqui.util.RestClient.RestResponse paymentMethodListRestResponse = paymentMethodListRestClient.call()
                paymentMethodListResponseMap = (Map) paymentMethodListRestResponse.jsonObject()
                 ec.logger.warn("paymentMethodListResponseMap: ${paymentMethodListResponseMap}")
                if (paymentMethodListRestResponse.statusCode < 200 || paymentMethodListRestResponse.statusCode >= 300) {
                    ec.message.addPublic("Could not find Payment Methods", "warning")
                    return
                }
                ]]></script>
            <set field="paymentMethodId" from="paymentMethodListResponseMap.data.first()?.id"/>

            <if condition="paymentMethodId != null &amp;&amp; party.externalId != null">
                <script><![CDATA[
                    org.moqui.util.RestClient attachPaymentMethodRestClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                            .basicAuth(stripeRemote.privateKey,"")
                            .addBodyParameter("customer", (String) party.externalId)
                    def attachPaymentMethodUriBuilder = attachPaymentMethodRestClient.uri().protocol("https").host("api.stripe.com").port(443)
                            .path("/v1/payment_methods/").path(paymentMethodId).path("/attach")
                    attachPaymentMethodUriBuilder.build()

                    org.moqui.util.RestClient.RestResponse attachPaymentMethodRestResponse = attachPaymentMethodRestClient.call()
//                    attachPaymentMethodResponseMap = (Map) attachPaymentMethodRestResponse.jsonObject()
                    ec.logger.warn("attachPaymentMethodResponseMap: ${attachPaymentMethodResponseMap}")
                    if (attachPaymentMethodRestResponse.statusCode < 200 || attachPaymentMethodRestResponse.statusCode >= 300) {
                        ec.message.addPublic("Could not find Payment Methods", "warning")
                        return
                    }
                    ]]></script>
            </if>-->

            <!-- TODO: Handle if payments already exists so that it will take the previous payment payment_intent id, and client_secret and update stripe with the new payment amount -->

<!--            <set field="return_url" from="(!'production'.equals(System.getProperty('instance_purpose')) ?-->
<!--                'http://localhost:8080' : 'https://coarchy.com') + '/settings/Order'"/>-->
            <script><![CDATA[
                org.moqui.util.RestClient paymentIntentRestClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                        .basicAuth(stripeRemote.privateKey,"")
                        .addBodyParameter("customer", (String) party.externalId)
                        .addBodyParameter("amount", (String) unappliedTotal)
                        .addBodyParameter("currency", (String) currencyUomId)
//                        .addBodyParameter("setup_future_usage", "off_session")
//                        .addBodyParameter("confirm", (String) "true")
//                        .addBodyParameter("return_url", (String) return_url)
                if (paymentMethodId != null) {
//                    ec.logger.warn("Adding paymentMethodId: ${paymentMethodId}")
//                    paymentIntentRestClient.addBodyParameter("payment_method", (String) paymentMethodId)
                }
                def paymentIntentUriBuilder = paymentIntentRestClient.uri().protocol("https").host("api.stripe.com").port(443)
                    .path("/v1/payment_intents")
                paymentIntentUriBuilder.build()

                org.moqui.util.RestClient.RestResponse paymentIntentRestResponse = paymentIntentRestClient.call()
                paymentIntentResponseMap = (Map) paymentIntentRestResponse.jsonObject()
//                 ec.logger.warn("paymentIntentResponseMap: ${paymentIntentResponseMap}")
                if (paymentIntentRestResponse.statusCode < 200 || paymentIntentRestResponse.statusCode >= 300) {
                    ec.logger.warn("Got status code ${paymentIntentRestResponse.statusCode} from Stripe on a create payment_intents request for the parameter '${paymentIntentResponseMap.error.param}' and message '${paymentIntentResponseMap.error.message}'")
                    ec.message.addPublic("Could not create Payment", "warning")
                }
                ]]></script>

            <service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:payment.paymentId, paymentRefNum:paymentIntentResponseMap?.id]"/>

            <set field="clientSecret" from="paymentIntentResponseMap.client_secret"/>

            <!--            <log level="warn" message="create#PaymentIntent context.toString(): ${context.toString()}"/>-->
        </actions>
    </service>

    <service verb="consume" noun="StripeWebhookEvent" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="systemMessageId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage" auto-field-map="[systemMessageId:systemMessageId]" for-update="true"/>

            <entity-find entity-name="mantle.account.method.PaymentGatewayConfig" list="paymentGatewayConfigList">
                <econdition field-name="systemMessageRemoteId" from="systemMessage.systemMessageRemoteId"/>
                <econdition field-name="paymentGatewayTypeEnumId" value="PgtStripe"/>
                <order-by field-name="-lastUpdatedStamp"/>
            </entity-find>
            <set field="paymentGatewayConfig" from="paymentGatewayConfigList.getFirst()"/>
            <set field="paymentGatewayConfigId" from="paymentGatewayConfig.paymentGatewayConfigId"/>

            <set field="messageObject" from="ec.elastic.jsonToObject(systemMessage.messageText)"/>

<!--            <log level="warn" message="handle#Webhook messageObject.toString() ${messageObject.toString()}}"/>-->

            <if condition="messageObject.object == 'event' &amp;&amp; messageObject.data.object.object == 'payment_intent'">
                <entity-find entity-name="mantle.account.payment.Payment" list="paymentList">
                    <econdition field-name="paymentRefNum" from="messageObject.data.object.id"/>
                </entity-find>
<!--                <log level="warn" message="handle#Webhook paymentList.toString() ${paymentList.toString()}}"/>-->

                <if condition="paymentList.size() == 0">
                    <set field="systemMessage.statusId" value="SmsgRejected"/>
                    <entity-update value-field="systemMessage"/>
                    <return message="No payment found for paymentRefNum ${messageObject.data.object.id}." error="true" type="danger"/>
                </if>
                <if condition="paymentList.size() &gt; 1"><message type="warning">Multiple payments found for paymentRefNum ${messageObject.data.object.id}. This should not happen.</message></if>

<!--                <log level="warn" message="handle#Webhook messageObject.type ${messageObject.type}}"/>-->
                <set field="payment" from="paymentList.getFirst()"/>
                <if condition="!payment.paymentMethodId">
                    <entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethodList" for-update="true">
                        <econdition field-name="ownerPartyId" from="payment.fromPartyId"/>
                        <econdition field-name="gatewayCimId" from="messageObject.data.object.payment_method"/>
                        <econdition field-name="paymentGatewayConfigId"/>
                        <date-filter/></entity-find>
                    <if condition="paymentMethodList.size() == 0"><then>
                        <service-call name="create#mantle.account.method.PaymentMethod" out-map="context" in-map="[
                            ownerPartyId:payment.fromPartyId,fromDate:ec.user.nowTimestamp,
                            currencyUomId:messageObject.data.object.currency.toUpperCase(),
                            gatewayCimId:messageObject.data.object.payment_method,
                            paymentGatewayConfigId:paymentGatewayConfigId]"/>
                        <set field="payment.paymentMethodId" from="paymentMethodId"/>
                    </then><else>
                        <if condition="paymentMethodList.size() &gt; 1">
                            <message type="warning">Multiple payment methods found for ownerPartyId ${payment.fromPartyId}, paymentGatewayConfigId ${paymentGatewayConfigId}, and gatewayCimId ${messageObject.data.object.payment_method}.</message></if>
                        <service-call name="update#mantle.account.method.PaymentMethod" in-map="[
                            paymentMethodId:paymentMethodList.getFirst().paymentMethodId,
                            ownerPartyId:payment.fromPartyId,fromDate:ec.user.nowTimestamp,
                            currencyUomId:messageObject.data.object.currency.toUpperCase(),
                            gatewayCimId:messageObject.data.object.payment_method,
                            paymentGatewayConfigId:paymentGatewayConfigId]"/>
                        <set field="payment.paymentMethodId" from="paymentMethodList.getFirst().paymentMethodId"/>
                    </else></if>
<!--                    <log level="warn" message="handle#Webhook payment.paymentMethodId ${payment.paymentMethodId}"/>-->
                    <service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:payment.paymentId,
                        paymentMethodId:payment.paymentMethodId]"/>
                </if>
<!--                <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment" auto-field-map="[paymentId:payment.paymentId]"/>-->
<!--                <log level="warn" message="handle#Webhook payment.toString() ${payment.toString()}}"/>-->

                <if condition="messageObject.type == 'payment_intent.processing'">
                    <service-call name="create#mantle.account.method.PaymentGatewayResponse" out-map="context" in-map="[
                          paymentGatewayConfigId:paymentGatewayConfigId,
                          paymentOperationEnumId:'PgoStoreCim',
                          paymentId:payment.paymentId,
                          paymentMethodId:payment.paymentMethodId,
                          amount: (messageObject.data.object.amount as BigDecimal) / 100,
                          amountUomId:messageObject.data.object.currency.toUpperCase(),
                          finAccountId:payment.finAccountId,
                          transactionDate:new Timestamp(messageObject.data.object.created * 1000L),
                          referenceNum:messageObject.data.object.id,
                          altReference:messageObject.request.idempotency_key,
                          subReference:messageObject.id,
                          resultSuccess:'N',
                          resultDeclined:'N',
                          resultError:'N',
                          resultBadExpire:'N',
                          resultBadCardNumber:'N']"/>
                </if>
                <if condition="messageObject.type == 'payment_intent.succeeded'">
<!--                    <log level="warn" message="handle#Webhook messageObject.data.object.amount ${(messageObject.data.object.amount as BigDecimal)} : ${(messageObject.data.object.amount as BigDecimal).getClass()}}"/>-->

                    <service-call name="create#mantle.account.method.PaymentGatewayResponse" out-map="context" in-map="[
                          paymentGatewayConfigId:paymentGatewayConfigId,
                          paymentOperationEnumId:'PgoAuthAndCapture',
                          paymentId:payment.paymentId,
                          paymentMethodId:payment.paymentMethodId,
                          amount: (messageObject.data.object.amount as BigDecimal) / 100,
                          amountUomId:messageObject.data.object.currency.toUpperCase(),
                          finAccountId:payment.finAccountId,
                          transactionDate:new Timestamp(messageObject.data.object.created * 1000L),
                          referenceNum:messageObject.data.object.id,
                          altReference:messageObject.request.idempotency_key,
                          subReference:messageObject.id,
                          resultSuccess:'Y',
                          resultDeclined:'N',
                          resultError:'N',
                          resultBadExpire:'N',
                          resultBadCardNumber:'N']"/>

                    <service-call name="mantle.order.OrderServices.place#Order" in-map="[orderId:payment.orderId]"/>
                </if>
                <if condition="messageObject.type == 'payment_intent.payment_failed'">
                    <service-call name="create#mantle.account.method.PaymentGatewayResponse" out-map="context" in-map="[
                          paymentGatewayConfigId:paymentGatewayConfigId,
                          paymentOperationEnumId:'PgoRelease',
                          paymentId:payment.paymentId,
                          paymentMethodId:payment.paymentMethodId,
                          amount: (messageObject.data.object.amount as BigDecimal) / 100,
                          amountUomId:messageObject.data.object.currency.toUpperCase(),
                          finAccountId:payment.finAccountId,
                          transactionDate:new Timestamp(messageObject.data.object.created * 1000L),
                          referenceNum:messageObject.data.object.id,
                          altReference:messageObject.request.idempotency_key,
                          subReference:messageObject.id,
                          resultSuccess:'N',
                          resultDeclined:'Y',
                          resultError:'N',
                          resultBadExpire:'N',
                          resultBadCardNumber:'N']"/>

<!--                    <service-call name="mantle.account.PaymentServices.authorize#OrderPayments" out-map="context" in-map="[-->
<!--                        orderId:payment.orderId]"/>-->
                </if>
            </if>
        </actions>
    </service>

    <service verb="authorizeAndCapture" noun="Payment">
        <implements service="mantle.account.PaymentServices.authorize#Payment"/>
        <actions>
            <entity-find entity-name="mantle.account.method.PaymentGatewayResponse" list="paymentGatewayResponseList">
                <econdition field-name="paymentId"/>
                <econdition field-name="paymentGatewayConfigId"/>
                <econdition field-name="paymentOperationEnumId" value="PgoAuthAndCapture"/>
                <order-by field-name="-transactionDate"/></entity-find>

            <if condition="paymentGatewayResponseList.size() == 0">
                <return error="true" type="danger" message="No payment gateway response found for payment."/>
            </if>
            <if condition="paymentGatewayResponseList.size() &gt; 1">
                <log level="warn" message="Multiple payment gateway responses found for payment."/>
            </if>

            <set field="paymentGatewayResponseId" from="paymentGatewayResponseList.getFirst().paymentGatewayResponseId"/>
        </actions>
    </service>
</services>
