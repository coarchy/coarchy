<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="get" noun="PartyOrganizationInfo">
        <in-parameters><parameter name="partyId" default="ec.user.userAccount?.partyId"/></in-parameters>
        <out-parameters>
            <parameter name="activeOrgId"/>
            <parameter name="userOrgIds" type="List"><parameter name="userOrgId"/></parameter>
            <parameter name="filterOrgIds" type="List"><parameter name="userOrgId"/></parameter>
        </out-parameters>
        <actions>
            <if condition="!partyId">
                <set field="userOrgIds" from="[]"/><set field="filterOrgIds" from="[]"/>
                <return/>
            </if>

            <!-- get user organizations data (agent/employee/member rel from member to org) -->
            <entity-find entity-name="mantle.party.PartyToAndRelationship" list="userOrgRelList">
                <date-filter/>
                <econditions combine="or">
                    <econditions><econdition field-name="relationshipTypeEnumId" operator="in" value="PrtAgent,PrtEmployee,PrtMember"/>
                        <econdition field-name="toRoleTypeId" value="OrgInternal"/>
                        <econdition field-name="fromPartyId" from="partyId"/></econditions>
                    <econdition field-name="visibilityEnumId" value="PvPublic"/>
                </econditions>
            </entity-find>
            <set field="userOrgIds" from="[]"/>
            <iterate list="userOrgRelList" entry="userOrgRel">
                <if condition="!userOrgIds.contains(userOrgRel.toPartyId)">
                    <script>userOrgIds.add(userOrgRel.toPartyId)</script>
                    <!-- look for direct child orgs and allow them too (rollup rel from child to parent) -->
                    <!-- NOTE: consider making this recursive (inline method or other service) to walk down multiple levels -->
                    <entity-find entity-name="mantle.party.PartyRelationship" list="childRelList">
                        <date-filter/>
                        <econdition field-name="relationshipTypeEnumId" value="PrtOrgRollup"/>
                        <econdition field-name="toPartyId" from="userOrgRel.toPartyId"/>
                        <econdition field-name="fromPartyId" operator="is-not-null"/>
                    </entity-find>
                    <iterate list="childRelList" entry="childRel">
                        <if condition="!userOrgIds.contains(childRel.fromPartyId)">
                            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="childOrg">
                                <field-map field-name="partyId" from="childRel.fromPartyId"/></entity-find-one>
                            <script>userOrgIds.add(childRel.fromPartyId)</script>
                        </if>
                    </iterate>
                </if>
            </iterate>

            <!-- active org -->
            <set field="activeOrgId" from="ec.user.getPreference('ACTIVE_ORGANIZATION')"/>
            <if condition="activeOrgId != null &amp;&amp; activeOrgId.length() == 0"><set field="activeOrgId" from="null"/></if>
            <!-- if active org is not valid for the user ignore it -->
            <if condition="activeOrgId &amp;&amp; !userOrgIds.contains(activeOrgId)">
                <set field="activeOrgId" from="null"/>
                <script>ec.user.setPreference('ACTIVE_ORGANIZATION', null)</script>
            </if>

            <!-- get org ids to filter by (for queries, etc) -->
            <set field="filterOrgIds" from="activeOrgId ? [activeOrgId] : userOrgIds"/>
        </actions>
    </service>

    <service verb="get" noun="PartyVendorOrganizationInfo">
        <in-parameters>
            <parameter name="partyId" default="ec.user.userAccount?.partyId" />
        </in-parameters>
        <out-parameters>
            <parameter name="activeOrgId" />
            <parameter name="userOrgIds" type="List">
                <parameter name="userOrgId" />
            </parameter>
            <parameter name="filterOrgIds" type="List">
                <parameter name="filterOrgId" />
            </parameter>
        </out-parameters>
        <actions>
            <if condition="!partyId">
                <set field="userOrgIds" from="[]" />
                <set field="filterOrgIds" from="[]" />
                <return />
            </if>
            <!-- get user organizations data (agent/employee/member rel from member to org) -->
            <entity-find entity-name="mantle.party.PartyToAndRelationship"
                list="userOrgRelList">
                <date-filter />
                <econdition field-name="relationshipTypeEnumId" operator="in"
                    value="PrtVendorRepresentative" />
                <econdition field-name="toRoleTypeId" value="VendorRepresentative" />
                <econdition field-name="fromPartyId" from="partyId" />
            </entity-find>
            <set field="userOrgIds" from="[]" />
            <iterate list="userOrgRelList" entry="userOrgRel">
                <if condition="!userOrgIds.contains(userOrgRel.toPartyId)">
                    <script>userOrgIds.add(userOrgRel.toPartyId)</script>
                    <!-- look for direct child orgs and allow them too (rollup rel from child to
                    parent) -->
                    <!-- NOTE: consider making this recursive (inline method or other service) to
                    walk down multiple levels -->
                    <entity-find entity-name="mantle.party.PartyRelationship" list="childRelList">
                        <date-filter />
                        <econdition field-name="relationshipTypeEnumId" value="PrtOrgRollup" />
                        <econdition field-name="toPartyId" from="userOrgRel.toPartyId" />
                        <econdition field-name="fromPartyId" operator="is-not-null" />
                    </entity-find>
                    <iterate list="childRelList" entry="childRel">
                        <if condition="!userOrgIds.contains(childRel.fromPartyId)">
                            <entity-find-one entity-name="mantle.party.PartyDetail"
                                value-field="childOrg">
                                <field-map field-name="partyId" from="childRel.fromPartyId" />
                            </entity-find-one>
                            <script>userOrgIds.add(childRel.fromPartyId)</script>
                        </if>
                    </iterate>
                </if>
            </iterate>

            <!-- active org -->
            <set field="activeOrgId" from="ec.user.getPreference('ACTIVE_ORGANIZATION')" />
            <if condition="activeOrgId != null &amp;&amp; activeOrgId.length() == 0">
                <set field="activeOrgId" from="null" />
            </if>
            <!-- if active org is not valid for the user ignore it -->
            <if condition="activeOrgId &amp;&amp; !userOrgIds.contains(activeOrgId)">
                <set field="activeOrgId" from="null" />
                <script>ec.user.setPreference('ACTIVE_ORGANIZATION', null)</script>
            </if>

            <!-- get org ids to filter by (for queries, etc) -->
            <set field="filterOrgIds" from="activeOrgId ? [activeOrgId] : userOrgIds" />
        </actions>
    </service>

    <service verb="setup" noun="UserVendorOrganizationInfo" authenticate="anonymous-view">
        <description>
            Get internal organizations the current user is related to and the user's active organization if set
            (in the ACTIVE_ORGANIZATION UserPreference) Designed to be called per screen render in screen.pre-actions,
            and may be useful in other contexts.

            This service gets data that is meant to be used in filterMap fields of moqui.security.EntityFilterSet
            records so returns results limited to the organizations a user is directly related to.
        </description>
        <out-parameters>
            <!-- Vendor organization -->
            <parameter name="userOrgList" type="List">
                <parameter name="userOrg" type="Map">
                    <auto-parameters entity-name="mantle.party.PartyDetail" />
                </parameter>
            </parameter>
            <parameter name="userOrgIds" type="List">
                <parameter name="userOrgId" />
            </parameter>

            <parameter name="activeOrgId" />
            <parameter name="activeOrg" type="Map">
                <auto-parameters entity-name="mantle.party.PartyDetail" />
            </parameter>

            <parameter name="filterOrgIds" type="List">
                <parameter name="userOrgId" />
            </parameter>
        </out-parameters>
        <actions>
            <set field="partyId" from="ec.user.userAccount?.partyId" />
            <if condition="!partyId">
                <log level="warn"
                    message="Cannot setup#userOrganizationInfo, no user with partyId logged in" />
                <return />
            </if>

            <!-- get activeOrgId, userOrgIds, filterOrgIds -->
            <service-call name="mantle.party.PartyServices.get#PartyVendorOrganizationInfo"
                out-map="context" in-map="[partyId:partyId]" />

            <!-- get userOrgList with userOrgIds -->
            <entity-find entity-name="mantle.party.PartyDetail" list="userOrgList">
                <econdition field-name="partyId" operator="in" from="userOrgIds" />
                <order-by field-name="pseudoId" />
            </entity-find>

            <!-- get the active org detail for display, etc -->
            <if condition="activeOrgId">
                <entity-find-one entity-name="mantle.party.PartyDetail"
                    value-field="activeOrg" cache="true">
                    <field-map field-name="partyId" from="activeOrgId" />
                </entity-find-one>
            </if>

            <!-- <log level="warn" message="activeOrgId ${activeOrgId} (${activeOrgId?.class?.name})
            filterOrgIds ${filterOrgIds}"/> -->

            <!-- set userOrgIds, filterOrgIds, and activeOrgId in user context -->
            <script>                
                ec.user.context.userOrgIds = userOrgIds
                ec.user.context.filterOrgIds = filterOrgIds
                ec.user.context.activeOrgId = activeOrgId
            </script>
        </actions>
    </service>
</services>