<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="notify" noun="CreditExpire" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="currentTimestamp" default="ec.user.nowTimestamp" type="Timestamp"
                required="true" />
            <parameter name="thresholdLow" type="Integer" default="4" />
            <parameter name="thresholdHigh" type="Integer" default="7" />
            <parameter name="lookForwardDays" type="Integer" default="7" />
        </in-parameters>
        <out-parameters>
            <parameter name="financialAccountList" type="List" />
            <parameter name="emailsSentList" type="List" />
            <parameter name="activatedPartyIdList" type="List" />
            <parameter name="availableBalanceByOwner" type="Map" />
            <parameter name="creditsOrgMonthNeededByOwner" type="Map" />
            <parameter name="projectedExpiryDateByOwner" type="Map" />
            <parameter name="daysLeftByOwner" type="Map" />
            <parameter name="lastCreditPurchaseByOwner" type="Map" />
        </out-parameters>
        <actions>
            <set field="emailsSentList" from="[]" />
            <set field="baseLinkUrl"
                from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : 'https://coarchy.com'" />

            <if condition="lookForwardDays == 7">
                <set field="emailTemplateId" value="CREDITS_EXPIRING_7DAYS" />
                <set field="bodyParameters"
                    from="[linkUrl:baseLinkUrl+'/settings/BuyPremium',baseLinkUrl:baseLinkUrl, currentYear:ec.user.nowTimestamp.format('yyyy'),
                    title:'Your credits are expiring soon', periodDescription: '7 days']" />

                <else-if condition="lookForwardDays == 1">
                    <set field="emailTemplateId" value="CREDITS_EXPIRING_1DAY" />
                    <set field="bodyParameters"
                        from="[linkUrl:baseLinkUrl+'/settings/BuyPremium',baseLinkUrl:baseLinkUrl, currentYear:ec.user.nowTimestamp.format('yyyy'),
                        title:'Your credits are expiring soon', periodDescription: '1 day']" />
                </else-if>
                <else>
                    <return error="true"
                        message="No email template configured from custom period of ${lookForwardDays} days" />
                </else>
            </if>

            <entity-find entity-name="mantle.account.financial.FinancialAccount"
                list="financialAccountList" distinct="true">
                <econdition field-name="finAccountTypeId" value="OrganizationMonthCredit" />
                <econdition field-name="statusId" value="FaActive" />
                <date-filter />
                <select-field field-name="ownerPartyId,finAccountId,availableBalance" />
            </entity-find>

            <!-- if there are multiple financial accounts for an organization, then remove all but
            the one with the most credits -->
            <set field="financialAccountList"
                from="financialAccountList.groupBy{it.ownerPartyId}.collect{it.value.max{it.availableBalance}}" />
            <set field="activatedPartyIdList" from="financialAccountList.ownerPartyId" />

            <!-- get available balance by owner party id -->
            <set field="availableBalanceByOwner" from="[:]" />
            <set field="lastCreditPurchaseByOwner" from="[:]" />
            <set field="creditsOrgMonthNeededByOwner" from="[:]" />
            <set field="projectedExpiryDateByOwner" from="[:]" />
            <set field="daysLeftByOwner" from="[:]" />
            <iterate list="financialAccountList" entry="financialAccount">
                <set field="availableBalanceByOwner[financialAccount.ownerPartyId]"
                    from="financialAccount.availableBalance" />
                <entity-find entity-name="mantle.account.financial.FinancialAccountTrans"
                    list="finAccountTxList">
                    <econdition field-name="finAccountId" from="financialAccount.finAccountId" />
                    <econdition field-name="amount" operator="greater" from="0" />
                    <econdition field-name="finAccountTransTypeEnumId" value="FattAdjustment" />
                    <order-by field-name="-transactionDate" />
                </entity-find>
                <set field="lastCreditPurchaseByOwner[financialAccount.ownerPartyId]"
                    from="finAccountTxList?.getFirst()?.transactionDate" />
            </iterate>

            <iterate list="activatedPartyIdList" entry="activatedPartyId">
                <!-- find active party activations -->
                <entity-find entity-name="mantle.party.Party" list="partyOrgList">
                    <econdition field-name="ownerPartyId" from="activatedPartyId" />
                    <econdition field-name="partyTypeEnumId" value="PtyOrganization" />
                    <econdition field-name="disabled" value="N" or-null="true" />
                </entity-find>

                <set field="avgCreditsNeededPerDayMsList" from="[]" />
                <iterate list="partyOrgList" entry="partyOrg">
                    <entity-find entity-name="mantle.party.PartyActivation"
                        list="partyActivationList">
                        <date-filter />
                        <econdition field-name="partyId" from="partyOrg.partyId" />
                        <order-by field-name="-fromDate" />
                    </entity-find>

                    <if condition="!partyActivationList">
                        <continue />
                    </if>
                    <!-- calculate activation usage for current organization -->
                    <service-call name="coarchy.CoarchyServices.calculate#PartyActivationUsage"
                        in-map="[organizationPartyId:partyOrg.partyId, periodFromDate:currentTimestamp,periodThruDate:currentTimestamp.plus(lookForwardDays),minActivationMinutesPerDay:5]"
                        out-map="activationOut" out-map-add-to-existing="false" />

                    <set field="creditsNeededMs" type="BigDecimal"
                        from="(activationOut.dayAmountList?:[0]).sum()" />
                    <set field="avgCreditsNeededPerDayMs" type="BigDecimal"
                        from="(creditsNeededMs/lookForwardDays)" />

                    <script>avgCreditsNeededPerDayMsList.add(avgCreditsNeededPerDayMs)</script>
                </iterate>

                <if condition="!avgCreditsNeededPerDayMsList">
                    <continue />
                </if>

                <set field="avgCreditsNeededPerDayMs" from="avgCreditsNeededPerDayMsList.sum()" />
                <set field="creditsNeededOrgMonth"
                    from="(avgCreditsNeededPerDayMs*lookForwardDays).div(30.0 * 24.0 * 60.0 * 60.0 * 1000.0)" />
                <set field="availableBalanceMs"
                    from="availableBalanceByOwner[activatedPartyId] * 30.0 * 24.0 * 60.0 * 60.0 * 1000.0" />
                <set field="daysLeft"
                    from="availableBalanceMs/(avgCreditsNeededPerDayMs==0?1.0:avgCreditsNeededPerDayMs)" />
                <set field="daysLeftFloor" type="Integer" from="Math.floor(daysLeft)" />
                <set field="projectedExpiryDate" from="currentTimestamp.plus(daysLeftFloor)" />

                <script>creditsOrgMonthNeededByOwner[activatedPartyId] = creditsNeededOrgMonth</script>
                <script>projectedExpiryDateByOwner[activatedPartyId] = projectedExpiryDate</script>
                <script>daysLeftByOwner[activatedPartyId] = daysLeft</script>

                <!-- <log message="==============================================="/>
                <log message="For ${activatedPartyId}, days left: ${daysLeft}"/>
                <log message="avgCreditsNeededPerDayMs ${avgCreditsNeededPerDayMs}" />
                <log message="availableBalanceOrg Month ${availableBalanceByOwner[activatedPartyId]}" />
                <log message="availableBalanceMs ${availableBalanceMs}" />
                <log message="creditsNeededOrgMonth  ${creditsNeededOrgMonth }" />
                <log message="projectedExpiryDate  ${projectedExpiryDate }" />
                <log message="==============================================="/> -->

                <if condition="daysLeftFloor>1">
                    <set field="bodyParameters.periodDescription" value="${daysLeftFloor} days" />
                    <else-if condition="daysLeftFloor==1">
                        <set field="bodyParameters.periodDescription" value="1 day" />
                    </else-if>
                    <else-if condition="daysLeftFloor &lt; 1">
                        <set field="bodyParameters.periodDescription" value="less than a day" />
                    </else-if>
                </if>

                <if
                    condition="(daysLeftFloor &gt; thresholdHigh) || (daysLeftFloor &lt; thresholdLow)">
                    <log level="warn"
                        message=" For ${activatedPartyId}, Not continuing since thresholds not met (min: ${thresholdLow}, max: ${thresholdHigh}, val:${daysLeftFloor})" />
                    <continue />
                    <else>
                        <log level="warn"
                            message=" Sending credits expiry email to party ${activatedPartyId}, Email template: ${emailTemplateId}, conditions met (min: ${thresholdLow}, max: ${thresholdHigh}, val:${daysLeftFloor})" />
                        <service-call
                            name="coarchy.NotificationServices.send#CreditExpireNotificationEmail"
                            in-map="[emailTemplateId:emailTemplateId, partyId:activatedPartyId, bodyParameters:bodyParameters, lastCreditPurchaseDate:lastCreditPurchaseByOwner[activatedPartyId]]"
                            out-map="context" />
                        <if condition="sentEmail">
                            <script>emailsSentList.add(emailMessageId)</script>
                        </if>
                    </else>
                </if>
            </iterate>

        </actions>
    </service>

    <service verb="notify" noun="PostCreditExpire" authenticate="anonymous-all">
        <description>Meant to be called by SECA rule after check#PartyActivationDaily</description>
        <in-parameters>
            <parameter name="organizationChangeList" type="List" />
        </in-parameters>
        <out-parameters>
            <parameter name="emailsSentList" type="List" />
        </out-parameters>
        <actions>
            <set field="emailsSentList" from="[]" />
            <set field="baseLinkUrl"
                from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : 'https://coarchy.com'" />

            <set field="deactivatedOrgList"
                from="organizationChangeList.findAll{it.deactivated=='Y'}" />
            <if condition="deactivatedOrgList?.size()">
                <set field="deactivatedOrgIds" from="deactivatedOrgList*.organizationId" />
                <entity-find entity-name="mantle.party.Party" list="partyList">
                    <econdition field-name="partyId" operator="in" from="deactivatedOrgIds" />
                </entity-find>
                <set field="ownerIdSet" from="new TreeSet(partyList*.ownerPartyId)" />


                <!-- Send credits expired email -->
                <iterate list="ownerIdSet" entry="ownerId">
                    <entity-find entity-name="mantle.account.financial.FinancialAccount"
                        list="financialAccountList" distinct="true">
                        <econdition field-name="ownerPartyId" from="ownerId" />
                        <econdition field-name="finAccountTypeId" value="OrganizationMonthCredit" />
                        <econdition field-name="statusId" value="FaActive" />
                        <date-filter />
                        <select-field field-name="ownerPartyId,finAccountId,availableBalance" />
                    </entity-find>
                    <!-- if there are multiple financial accounts for an organization, then remove
                    all but the one with the most credits -->
                    <set field="financialAccountList"
                        from="financialAccountList.groupBy{it.ownerPartyId}.collect{it.value.max{it.availableBalance}}" />
                    <set field="financialAccount" from="financialAccountList?.first()" />

                    <if condition="financialAccount">
                        <entity-find entity-name="mantle.account.financial.FinancialAccountTrans"
                            list="finAccountTxList">
                            <econdition field-name="finAccountId"
                                from="financialAccount.finAccountId" />
                            <econdition field-name="amount" operator="greater" from="0" />
                            <econdition field-name="finAccountTransTypeEnumId"
                                value="FattAdjustment" />
                            <order-by field-name="-transactionDate" />
                        </entity-find>

                        <set field="lastCreditPurchaseDate"
                            from="finAccountTxList?.getFirst()?.transactionDate" />
                    </if>

                    <set field="bodyParameters"
                        from="[linkUrl:baseLinkUrl+'/settings/BuyPremium',baseLinkUrl:baseLinkUrl, currentYear:ec.user.nowTimestamp.format('yyyy'),
                    title:'Your credits have expired']" />
                    <service-call
                        name="coarchy.NotificationServices.send#CreditExpireNotificationEmail"
                        in-map="[emailTemplateId:'CREDITS_EXPIRED', partyId:ownerId, bodyParameters:bodyParameters, lastCreditPurchaseDate:lastCreditPurchaseDate]"
                        out-map="context" />

                    <if condition="sentEmail">
                        <script>emailsSentList.add(emailMessageId)</script>
                    </if>
                </iterate>
            </if>
        </actions>
    </service>

    <service verb="send" noun="CreditExpireNotificationEmail">
        <in-parameters>
            <!-- These emails are not in a contact list for the time being -->
            <!-- <parameter name="contactListId" required="true"/> -->
            <parameter name="emailTemplateId" required="true" />
            <parameter name="partyId" required="true" />
            <parameter name="bodyParameters" required="true" type="Map" />

            <parameter name="preferredContactMechId" />
            <parameter name="toAddresses" />

            <parameter name="emailTypeEnumId" required="true" default-value="CONT_EMAIL_TEMPLATE" />

            <parameter name="lastCreditPurchaseDate" type="Timestamp" />
        </in-parameters>
        <out-parameters>
            <parameter name="sentEmail" />
            <parameter name="emailTemplateId" />
            <parameter name="emailMessageId" />
        </out-parameters>
        <actions>
            <!-- check if email as been already sent -->
            <!-- find user by partyId -->
            <entity-find entity-name="moqui.security.UserAccount" list="userAccountList" limit="2">
                <econdition field-name="partyId" />
                <econdition field-name="disabled" operator="not-equals" value="Y" />
            </entity-find>
            <if condition="userAccountList.size() &gt; 1">
                <log level="warn" message="Multiple user accounts found for party ${partyId}" />
            </if>
            <set field="userAccount" from="userAccountList?.getFirst()" />

            <!-- set email address -->
            <if condition="!toAddresses">
                <set field="toAddresses" from="userAccount.emailAddress" />
            </if>

            <entity-find entity-name="moqui.basic.email.EmailMessage" list="emailMessageList">
                <econdition field-name="emailTemplateId" />
                <econdition field-name="toUserId" from="userAccount.userId" />
                <order-by field-name="-sentDate" />
            </entity-find>
            <if condition="emailMessageList">
                <set field="emailLastSentDate" from="emailMessageList?.getFirst()?.sentDate" />
                <if
                    condition="lastCreditPurchaseDate &amp;&amp; (lastCreditPurchaseDate.time &gt; emailLastSentDate.time)">
                    <then>
                        <log level="warn"
                            message="Re-sending email template ${emailTemplateId} since credit purchase was performed after last sent date" />
                    </then>
                    <else>
                        <return
                            message="Email template ${emailTemplateId} already sent to user ${userAccount.userId} on ${emailLastSentDate}" />
                    </else>
                </if>
            </if>

            <!-- set preferredContactMechId by partyId -->
            <if condition="!preferredContactMechId">
                <entity-find entity-name="mantle.party.contact.PartyContactMech"
                    list="partyContactMechList" limit="1">
                    <econdition field-name="partyId" />
                    <econdition field-name="contactMechPurposeId" value="EmailPrimary" />
                    <date-filter />
                    <order-by field-name="-fromDate" />
                </entity-find>
                <set field="preferredContactMechId"
                    from="partyContactMechList?.getFirst()?.contactMechId" />
            </if>

            <!-- send email -->
            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate"
                in-map="[emailTemplateId:emailTemplateId,toAddresses:toAddresses,bodyParameters:bodyParameters, toUserId:userAccount.userId]"
                out-map="context" />

            <if condition="emailMessageId">
                <set field="sentEmail" from="true" />
            </if>

            <service-call name="mantle.party.CommunicationServices.create#Message"
                in-map="[communicationEventTypeId:'Email',contactMechTypeEnumId:'CmtEmailAddress',statusId:'CeSent',
                    toContactMechId:preferredContactMechId,toPartyId:partyId,fromPartyId:'coarchy',emailMessageId:emailMessageId]"
                out-map="communicationEventOut" />

        </actions>
    </service>

    <service verb="notify" noun="ChurnedUsers" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="currentTimestamp" type="Timestamp" default="ec.user.nowTimestamp"></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="emailsSentList" type="List" />
            <parameter name="inactiveOwnerIdList" type="List" />
            <parameter name="lastActiveByOwnerId" type="Map" />
        </out-parameters>
        <actions>
            <set field="emailsSentList" from="[]" />
            <set field="baseLinkUrl"
                from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : 'https://coarchy.com'" />


            <entity-find entity-name="mantle.party.PartyActivation"
                list="inactivePartyActivationlist">
                <econdition field-name="fromDate" operator="less" from="currentTimestamp" />
                <econdition field-name="thruDate" operator="less-equals" from="currentTimestamp" />
            </entity-find>

            <entity-find entity-name="mantle.party.Party" list="partyList">
                <econdition field-name="partyId" operator="in"
                    from="inactivePartyActivationlist*.partyId" />
            </entity-find>
            <set field="ownerIdSet" from="new TreeSet(partyList*.ownerPartyId)" />

            <set field="inactiveOwnerIdList" from="[]" />
            <set field="lastActiveByOwnerId" from="[:]" />
            <iterate list="ownerIdSet" entry="ownerId">
                <entity-find entity-name="mantle.party.Party" list="ownerOrgList">
                    <econdition field-name="ownerPartyId" from="ownerId" />
                    <econdition field-name="partyTypeEnumId" value="PtyOrganization" />
                    <econdition field-name="disabled" value="N" or-null="true" />
                </entity-find>

                <!-- ensure they have no other premium orgs -->
                <entity-find-count entity-name="mantle.party.PartyActivation"
                    count-field="partyActivationList">
                    <date-filter />
                    <econdition field-name="partyId" operator="in" from="ownerOrgList*.partyId" />
                </entity-find-count>

                <if condition="!partyActivationList">
                    <entity-find entity-name="mantle.party.PartyActivation"
                        list="partyActivationList" limit="1">
                        <econdition field-name="partyId" operator="in" from="ownerOrgList*.partyId" />
                        <order-by field-name="-thruDate" />
                    </entity-find>

                    <set field="lastActiveDate" from="partyActivationList[0].thruDate" />
                    <script>lastActiveByOwnerId[ownerId] = lastActiveDate</script>

                    <set field="nowDate"
                        from="ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                        (long) currentTimestamp.time), ZoneId.systemDefault())" />
                    <set field="lastActiveDate"
                        from="ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                        (long) lastActiveDate.time), ZoneId.systemDefault())" />
                    <set field="daysSinceLastActive"
                        from="java.time.temporal.ChronoUnit.DAYS.between(
                            lastActiveDate, nowDate)"
                        type="BigDecimal" />

                    <if condition="daysSinceLastActive &gt; 20">
                        <script>inactiveOwnerIdList.add(ownerId)</script>
                        <else>
                            <log level="warn" message="Not sending churn email to ${ownerId} since hasn't been 20 days since last active (val=${daysSinceLastActive})"/>
                        </else>
                    </if>
                    
                </if>
            </iterate>

            <set field="bodyParameters"
                from="[linkUrl:baseLinkUrl+'/settings/BuyPremium',baseLinkUrl:baseLinkUrl, currentYear:ec.user.nowTimestamp.format('yyyy'),
                    title:'We\'ve missed you...']" />

            <iterate list="inactiveOwnerIdList" entry="inactiveOwnerId">
                <service-call
                    name="coarchy.NotificationServices.send#MonthlyNotificationEmail"
                    in-map="[emailTemplateId:'CHURN_RESUBSCRIBE', partyId:inactiveOwnerId, bodyParameters:bodyParameters, currentTimestamp:currentTimestamp]"
                    out-map="context" />
                <if condition="sentEmail">
                    <script>emailsSentList.add(emailMessageId)</script>
                </if>

            </iterate>
        </actions>
    </service>

    <service verb="send" noun="MonthlyNotificationEmail">
        <in-parameters>
            <!-- These emails are not in a contact list for the time being -->
            <!-- <parameter name="contactListId" required="true"/> -->
            <parameter name="currentTimestamp" type="Timestamp" default="ec.user.nowTimestamp"></parameter>
            <parameter name="emailTemplateId" required="true" />
            <parameter name="partyId" required="true" />
            <parameter name="bodyParameters" required="true" type="Map" />

            <parameter name="preferredContactMechId" />
            <parameter name="toAddresses" />

            <parameter name="emailTypeEnumId" required="true" default-value="CONT_EMAIL_TEMPLATE" />

            <parameter name="lastCreditPurchaseDate" type="Timestamp" />
        </in-parameters>
        <out-parameters>
            <parameter name="sentEmail" />
            <parameter name="emailTemplateId" />
            <parameter name="emailMessageId" />
        </out-parameters>
        <actions>

            <!-- check if email as been already sent -->
            <!-- find user by partyId -->
            <entity-find entity-name="moqui.security.UserAccount" list="userAccountList" limit="2">
                <econdition field-name="partyId" />
                <econdition field-name="disabled" operator="not-equals" value="Y" />
            </entity-find>
            <if condition="userAccountList.size() &gt; 1">
                <log level="warn" message="Multiple user accounts found for party ${partyId}" />
            </if>
            <set field="userAccount" from="userAccountList?.getFirst()" />

            <!-- set email address -->
            <if condition="!toAddresses">
                <set field="toAddresses" from="userAccount.emailAddress" />
            </if>

            <entity-find entity-name="moqui.basic.email.EmailMessage" list="emailMessageList">
                <econdition field-name="emailTemplateId" />
                <econdition field-name="toUserId" from="userAccount.userId" />
                <order-by field-name="-sentDate" />
            </entity-find>

            <if condition="emailMessageList">
                <set field="endOfLastMonthDate"
                    from="ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time-1L), ZoneId.systemDefault()).minusMonths(1).with(java.time.temporal.TemporalAdjusters.lastDayOfMonth()).with(LocalTime.MAX)" />
                <set field="nowDate"
                    from="ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault())" />
                <set field="lastSentDate"
                    from="ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) emailMessageList[0].sentDate.time), ZoneId.systemDefault())" />

                <set field="daysSinceLastSent"
                    from="java.time.temporal.ChronoUnit.DAYS.between(
                        lastSentDate, nowDate)"
                    type="BigDecimal" />

                <!-- check if last sent was before end of last month -->
                <if condition="lastSentDate &lt; endOfLastMonthDate">
                    <if condition="daysSinceLastSent &lt; 20">
                        <log level="warn"
                            message="Email was sent last month, but hasn't been 20 days since. Not sending" />
                        <return />
                    </if>
                    <else>
                        <log level="warn"
                            message="Email already sent this month. Not sending again." />
                        <return />
                    </else>
                </if>
            </if>

            <!-- set preferredContactMechId by partyId -->
            <if condition="!preferredContactMechId">
                <entity-find entity-name="mantle.party.contact.PartyContactMech"
                    list="partyContactMechList" limit="1">
                    <econdition field-name="partyId" />
                    <econdition field-name="contactMechPurposeId" value="EmailPrimary" />
                    <date-filter />
                    <order-by field-name="-fromDate" />
                </entity-find>
                <set field="preferredContactMechId"
                    from="partyContactMechList?.getFirst()?.contactMechId" />
            </if>

            <!-- send email -->
            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate"
                in-map="[emailTemplateId:emailTemplateId,toAddresses:toAddresses,bodyParameters:bodyParameters, toUserId:userAccount.userId]"
                out-map="context" />

            <if condition="emailMessageId">
                <set field="sentEmail" from="true" />
            </if>

            <service-call name="mantle.party.CommunicationServices.create#Message"
                in-map="[communicationEventTypeId:'Email',contactMechTypeEnumId:'CmtEmailAddress',statusId:'CeSent',
                    toContactMechId:preferredContactMechId,toPartyId:partyId,fromPartyId:'coarchy',emailMessageId:emailMessageId]"
                out-map="communicationEventOut" />

        </actions>
    </service>

</services>