<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="create" noun="ProductEvaluation">
        <in-parameters>
            <parameter name="productId" required="true" />
            <parameter name="organizationId" required="true" />
            <parameter name="emailAddress" required="true" />
            <parameter name="processStoryIds" type="List" required="true" />
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.Product" value-field="product" />

            <if condition="!product">
                <return error="true" message="Product ${productId} not found." />
            </if>

            <service-call name="create#coarchy.product.ProductEvaluation"
                in-map="[productId:productId, organizationId:organizationId, statusId: 'PeRequirementsSelection', createdDate:ec.user.nowTimestamp]"
                out-map="context" />

            <iterate list="processStoryIds" entry="processStoryId">
                <service-call name="create#coarchy.product.ProductEvaluationStory"
                    in-map="[productEvaluationId:productEvaluationId, processStoryId:processStoryId, organizationId:organizationId]" />
            </iterate>

            <!-- By default, add all value statements in this organization to ProductEvaluation -->
            <entity-find entity-name="coarchy.ValueStatement" list="valueStatementList">
                <econdition field-name="replacedByValueStatementId" operator="is-null" />
                <econdition field-name="disabled" value="N" or-null="true" />
                <econdition field-name="organizationId" />
                <order-by field-name="sequenceNum,value" />
            </entity-find>

            <iterate list="valueStatementList" entry="valueStatement">
                <service-call name="create#coarchy.product.ProductEvaluationStatement"
                    in-map="[productEvaluationId:productEvaluationId, statementId:valueStatement.valueStatementId, organizationId:organizationId]" />
            </iterate>

            <!-- add process stories -->
            <set field="allProcessStoryIds" from="processStoryIds.clone()" />
            <iterate list="processStoryIds" entry="processStoryId">
                <service-call name="coarchy.ProductEvaluationServices.get#ProcessStoryDescendants"
                    out-map="descOut" out-map-add-to-existing="false"
                    in-map="[processStoryId:processStoryId]" />
                <script>allProcessStoryIds.addAll(descOut.descendantIdList)</script>
            </iterate>

            <entity-find entity-name="coarchy.ProcessStoryActivityDetail"
                list="processStoryActivityList">
                <date-filter />
                <econdition field-name="replacedByActivityId" operator="is-null" />
                <econdition field-name="processStoryId" operator="in" from="allProcessStoryIds" />
                <econditions combine="or">
                    <econdition field-name="condition" operator="not-equals" value="" />
                    <econdition field-name="action" operator="not-equals" value="" />
                </econditions>
                <select-field field-name="processStoryId,activityId,condition,action" />
            </entity-find>

            <iterate list="processStoryActivityList" entry="processStoryActivity">
                <service-call name="create#coarchy.product.ProductEvaluationActivity"
                    in-map="[productEvaluationId:productEvaluationId, processStoryId:processStoryActivity.processStoryId, activityId:processStoryActivity.activityId, organizationId:organizationId]" />
            </iterate>

            <!-- add vendor -->
            <service-call name="coarchy.ProductEvaluationServices.add#ProductEvaluationParty"
                in-map="[productEvaluationId:productEvaluationId, emailAddress:emailAddress, organizationId:organizationId]" />
        </actions>
    </service>

    <service verb="add" noun="ProductEvaluationProcessStory">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
            <parameter name="organizationId" required="true" />
            <parameter name="processStoryIds" type="List" required="true" />
        </in-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" />

            <if condition="productEvaluation.statusId != 'PeRequirementsSelection'">
                <return error="true" message="Cannot edit activities in this status." />
            </if>

            <set field="newProcessStoryIds" from="new TreeSet()" />
            <iterate list="processStoryIds" entry="processStoryId">
                <entity-find-count entity-name="coarchy.product.ProductEvaluationStory"
                    count-field="productEvaluationStoryCount">
                    <econdition field-name="productEvaluationId" />
                    <econdition field-name="processStoryId" />
                    <econdition field-name="organizationId" />
                </entity-find-count>

                <if condition="!productEvaluationStoryCount">
                    <service-call name="create#coarchy.product.ProductEvaluationStory"
                        in-map="[productEvaluationId:productEvaluationId, processStoryId:processStoryId, organizationId:organizationId]" />

                    <service-call
                        name="coarchy.ProductEvaluationServices.get#ProcessStoryDescendants"
                        out-map="descOut" out-map-add-to-existing="false"
                        in-map="[processStoryId:processStoryId]" />

                    <script>newProcessStoryIds.add(processStoryId)</script>
                    <script>newProcessStoryIds.addAll(descOut.descendantIdList)</script>
                </if>
            </iterate>

            <!-- add activities -->
            <entity-find entity-name="coarchy.ProcessStoryActivityDetail"
                list="processStoryActivityList">
                <date-filter />
                <econdition field-name="replacedByActivityId" operator="is-null" />
                <econdition field-name="processStoryId" operator="in" from="newProcessStoryIds" />
                <econditions combine="or">
                    <econdition field-name="condition" operator="not-equals" value="" />
                    <econdition field-name="action" operator="not-equals" value="" />
                </econditions>
                <select-field field-name="processStoryId,activityId,condition,action" />
            </entity-find>

            <iterate list="processStoryActivityList" entry="processStoryActivity">
                <entity-find-count entity-name="coarchy.product.ProductEvaluationActivity"
                    count-field="existingCount">
                    <econdition field-name="productEvaluationId" />
                    <econdition field-name="organizationId" />
                    <econdition field-name="processStoryId"
                        from="processStoryActivity.processStoryId" />
                    <econdition field-name="activityId" from="processStoryActivity.activityId" />
                </entity-find-count>
                <if condition="existingCount">          
                    <continue />
                </if>
                <service-call name="create#coarchy.product.ProductEvaluationActivity"
                    in-map="[productEvaluationId:productEvaluationId, processStoryId:processStoryActivity.processStoryId, activityId:processStoryActivity.activityId, organizationId:organizationId]" />
            </iterate>
        </actions>
    </service>

    <service verb="remove" noun="ProductEvaluationProcessStory">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
            <parameter name="organizationId" required="true" />
            <parameter name="processStoryId" required="true" />
        </in-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" />

            <if condition="productEvaluation.statusId != 'PeRequirementsSelection'">
                <return error="true" message="Cannot edit activities in this status." />
            </if>

            <entity-find entity-name="coarchy.product.ProductEvaluationStory"
                list="productEvaluationStoryList">
                <econdition field-name="organizationId" />
                <econdition field-name="productEvaluationId" />
                <econdition field-name="processStoryId" />
            </entity-find>

            <iterate list="productEvaluationStoryList" entry="productEvaluationStory">
                <service-call name="delete#coarchy.product.ProductEvaluationStory"
                    in-map="[productEvaluationId:productEvaluationStory.productEvaluationId, processStoryId:productEvaluationStory.processStoryId]" />
            </iterate>

            <service-call name="coarchy.ProductEvaluationServices.get#ProcessStoryDescendants"
                out-map="descOut" out-map-add-to-existing="false"
                in-map="[processStoryId:processStoryId]" />

            <entity-delete-by-condition entity-name="coarchy.product.ProductEvaluationActivity">
                <econdition field-name="productEvaluationId" />
                <econdition field-name="organizationId" />
                <econdition field-name="processStoryId" operator="in"
                    from="[processStoryId]+descOut.descendantIdList" />
            </entity-delete-by-condition>
        </actions>
    </service>

    <!-- Getters -->
    <service verb="find" noun="ProcessStoryActivityList">
        <description>
            Find list of activities of process story
            For each activity that has a detailProcessStory, call this function with that processStoryId, return the list of activities
            Add the necessary fields for the activity and the detail process story name, and detail process story activity list
        </description>
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
            <parameter name="processStoryId" required="true" />
            <parameter name="showSubstories" required="true" />
            <parameter name="organizationId" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="processStoryActivityList" />
        </out-parameters>
        <actions>
            <!-- find included activity ids, so that replaced records are included -->
            <entity-find entity-name="coarchy.product.ProductEvaluationActivity"
                list="productEvaluationActivityList">
                <econdition field-name="productEvaluationId" />
                <econdition field-name="excludeFlag" value="N" or-null="true" />
            </entity-find>
            <set field="includedActivityIds" from="productEvaluationActivityList*.activityId" />

            <entity-find entity-name="coarchy.ProcessStoryActivityDetail"
                list="setupProcessStoryActivityList">
                <econdition field-name="processStoryId" />
                <econditions combine="or">
                    <date-filter />
                    <econdition field-name="activityId" from="includedActivityIds" operator="in" />
                </econditions>
                <select-field
                    field-name="activityId,condition,action,detailProcessStoryId,processStoryId" />
                <order-by field-name="sequenceNum" />
            </entity-find>

            <set field="processStoryActivityList" from="[]" />
            <iterate list="setupProcessStoryActivityList" entry="processStoryActivity">
                <entity-find entity-name="coarchy.ActivityActorDetail" list="activityActorList">
                    <econdition field-name="activityId" from="processStoryActivity.activityId" />
                    <order-by field-name="name" />
                </entity-find>
                <set field="detailProcessStoryName" from="null" />
                <set field="detailProcessStoryId" from="processStoryActivity.detailProcessStoryId" />
                <set field="detailProcessStoryActivityList" from="[]" />
                <if
                    condition="processStoryActivity.detailProcessStoryId &amp;&amp; showSubstories!='N'">
                    <service-call
                        name="coarchy.ProductEvaluationServices.find#ProcessStoryActivityList"
                        out-map="detail"
                        in-map="[productEvaluationId:productEvaluationId,processStoryId:processStoryActivity.detailProcessStoryId,showSubstories:showSubstories,
                            organizationId:organizationId]" />
                    <entity-find-one entity-name="coarchy.ProcessStory"
                        value-field="detailProcessStory"
                        auto-field-map="[processStoryId:processStoryActivity.detailProcessStoryId]" />
                    <set field="detailProcessStoryName" from="detailProcessStory.name" />
                    <entity-find entity-name="coarchy.ProcessStoryActivityDetail"
                        list="setupDetailProcessStoryActivityList">
                        <econdition field-name="processStoryId"
                            from="processStoryActivity.detailProcessStoryId" />
                        <econditions combine="or">
                            <date-filter />
                            <econdition field-name="activityId" from="includedActivityIds"
                                operator="in" />
                        </econditions>
                        <select-field field-name="activityId,condition,action" />
                        <order-by field-name="sequenceNum" />
                    </entity-find>
                    <iterate list="setupDetailProcessStoryActivityList"
                        entry="detailProcessStoryActivity">
                        <entity-find entity-name="coarchy.ActivityActorDetail"
                            list="detailActivityActorList">
                            <econdition field-name="activityId"
                                from="detailProcessStoryActivity.activityId" />
                            <order-by field-name="name" />
                        </entity-find>
                        <script>detailProcessStoryActivityList.add([sequenceNum:detailProcessStoryActivity.sequenceNum,condition:detailProcessStoryActivity.condition,actorNames:detailActivityActorList*.name,action:detailProcessStoryActivity.action])</script>
                    </iterate>
                </if>

                <script>processStoryActivityList.add([processStoryId:processStoryActivity.processStoryId,activityId:processStoryActivity.activityId,
                    sequenceNum:processStoryActivity.sequenceNum,condition:processStoryActivity.condition,
                    actorNames:activityActorList*.name,action:processStoryActivity.action,detailProcessStoryId:detailProcessStoryId,
                    detailProcessStoryName:detailProcessStoryName,detailProcessStoryActivityList:detail?.processStoryActivityList?.clone()])</script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="ProductEvaluationActivites">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="processStoryIds" />
            <parameter name="activityIds" />
            <parameter name="activityList" />
        </out-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" />

            <entity-find entity-name="coarchy.product.ProductEvaluationStory"
                list="productEvaluationStoryList">
                <econdition field-name="productEvaluationId" />
            </entity-find>

            <set field="processStoryIds" from="productEvaluationStoryList*.processStoryId" />

            <iterate list="productEvaluationStoryList" entry="productEvaluationStory">
                <service-call name="coarchy.ProductEvaluationServices.get#ProcessStoryDescendants"
                    out-map="descOut" out-map-add-to-existing="false"
                    in-map="[processStoryId:productEvaluationStory.processStoryId]" />
                <script>processStoryIds.addAll(descOut.descendantIdList)</script>
            </iterate>

            <entity-find entity-name="coarchy.product.ProductEvaluationActivity"
                list="includedActivityList">
                <econdition field-name="productEvaluationId" />
                <econdition field-name="excludeFlag" value="N" or-null="true" />
            </entity-find>

            <entity-find entity-name="coarchy.ProcessStoryActivityDetail" list="activityList">
                <econdition field-name="processStoryId" operator="in" from="processStoryIds" />
                <econdition field-name="activityId" operator="in"
                    from="includedActivityList*.activityId" />
                <econditions combine="or">
                    <econdition field-name="condition" operator="not-equals" value="" />
                    <econdition field-name="action" operator="not-equals" value="" />
                </econditions>
                <select-field field-name="processStoryId,activityId,condition,action" />
            </entity-find>

            <set field="activityIds" from="activityList*.activityId" />
        </actions>
    </service>

    <service verb="get" noun="ProductEvaluationStatements">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="valueStatementIds" />
            <parameter name="valueStatementList" />
            <parameter name="allValueStatementList" />
            <parameter name="allValueStatementIds" />
        </out-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" />

            <entity-find entity-name="coarchy.product.ProductEvaluationStatement"
                list="productEvaluationStatementList">
                <econdition field-name="productEvaluationId" />
            </entity-find>
            <set field="valueStatementIds" from="productEvaluationStatementList*.statementId" />

            <entity-find entity-name="coarchy.ValueStatement" list="allValueStatementList">
                <econditions combine="or">
                    <econdition field-name="valueStatementId" operator="in" from="valueStatementIds" />
                    <econditions>
                        <econdition field-name="disabled" value="N" or-null="true" />
                        <econdition field-name="replacedByValueStatementId" operator="is-null" />
                    </econditions>
                </econditions>
                <econdition field-name="organizationId" operator="in"
                    from="productEvaluation.organizationId" />
                <select-field field-name="valueStatementId,value" />
            </entity-find>
            <set field="allValueStatementIds" from="allValueStatementList*.valueStatementId" />

            <entity-find entity-name="coarchy.ValueStatement" list="valueStatementList">
                <econdition field-name="valueStatementId" operator="in" from="valueStatementIds" />
                <select-field field-name="valueStatementId,value" />
            </entity-find>
        </actions>
    </service>

    <!-- Activity include/exclude -->
    <service verb="exclude" noun="ProductEvaluationActivity">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
            <parameter name="processStoryId" required="true" />
            <parameter name="activityId" required="true" />
        </in-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" />

            <if condition="productEvaluation.statusId != 'PeRequirementsSelection'">
                <return error="true" message="Cannot edit activities in this status." />
            </if>

            <entity-find entity-name="coarchy.product.ProductEvaluationActivity"
                list="allActivityList">
                <econdition field-name="productEvaluationId" />
            </entity-find>

            <entity-find entity-name="coarchy.product.ProductEvaluationActivity"
                list="excludedActivityList">
                <econdition field-name="productEvaluationId" />
                <econdition field-name="processStoryId" />
                <econdition field-name="activityId" />
                <econdition field-name="excludeFlag" value="Y" />
            </entity-find>

            <if condition="!excludedActivityList">
                <service-call name="update#coarchy.product.ProductEvaluationActivity"
                    in-map="[productEvaluationId:productEvaluationId, processStoryId:processStoryId, activityId:activityId, excludeFlag:'Y']" />
                    

                <!-- Automatically exclude all activities of any child process stories -->
                <entity-find-one entity-name="coarchy.ProcessStoryActivity" value-field="psActivity">
                    <field-map field-name="activityId" />
                </entity-find-one>

                <if condition="psActivity.detailProcessStoryId">
                    <service-call
                        name="coarchy.ProductEvaluationServices.get#ProcessStoryDescendants"
                        out-map="descOut" out-map-add-to-existing="false"
                        in-map="[processStoryId:psActivity.detailProcessStoryId]" />

                    <entity-find entity-name="coarchy.ProcessStoryActivityDetail"
                        list="activityList">
                        <econdition field-name="activityId" operator="in" from="allActivityList*.activityId" />
                        <econdition field-name="processStoryId" operator="in"
                            from="[psActivity.detailProcessStoryId] + descOut.descendantIdList" />
                        <econditions combine="or">
                            <econdition field-name="condition" operator="not-equals" value="" />
                            <econdition field-name="action" operator="not-equals" value="" />
                        </econditions>
                        <select-field field-name="processStoryId,activityId,condition,action" />
                    </entity-find>

                    <iterate list="activityList" entry="activity">
                        <service-call
                            name="coarchy.ProductEvaluationServices.exclude#ProductEvaluationActivity"
                            in-map="[productEvaluationId:productEvaluationId, processStoryId:activity.processStoryId, activityId:activity.activityId]" />
                    </iterate>
                </if>
            </if>
        </actions>
    </service>

    <service verb="include" noun="ProductEvaluationActivity">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
            <parameter name="processStoryId" required="true" />
            <parameter name="activityId" required="true" />
        </in-parameters>
        <out-parameters>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" />

            <if condition="productEvaluation.statusId != 'PeRequirementsSelection'">
                <return error="true" message="Cannot edit activities in this status." />
            </if>

            <entity-find entity-name="coarchy.product.ProductEvaluationActivity"
                list="allActivityList">
                <econdition field-name="productEvaluationId" />
            </entity-find>

            <entity-find entity-name="coarchy.product.ProductEvaluationActivity"
                list="excludedActivityList">
                <econdition field-name="productEvaluationId" />
                <econdition field-name="processStoryId" />
                <econdition field-name="activityId" />
                <econdition field-name="excludeFlag" value="Y" />
            </entity-find>

            <if condition="!excludedActivityList">
                <service-call name="store#coarchy.product.ProductEvaluationActivity"
                    in-map="[productEvaluationId:productEvaluationId, processStoryId:processStoryId, activityId:activityId, excludeFlag:'N', organizationId:productEvaluation.organizationId]" />

                    <entity-find entity-name="coarchy.product.ProductEvaluationActivity"
                list="excludedActivityList">
                <econdition field-name="productEvaluationId" />
                <econdition field-name="processStoryId" />
                <econdition field-name="activityId" />
                <econdition field-name="excludeFlag" value="Y" />
            </entity-find>
            </if>

            <iterate list="excludedActivityList" entry="excludedActivity">
                <service-call name="update#coarchy.product.ProductEvaluationActivity"
                    in-map="[productEvaluationId:productEvaluationId, processStoryId:processStoryId, activityId:activityId, excludeFlag:'N']" />

                <!-- Automatically include all activities of any anscestor process stories -->
                <entity-find-one entity-name="coarchy.ProcessStoryActivity" value-field="psActivity">
                    <field-map field-name="activityId" />
                </entity-find-one>

                <if condition="psActivity.processStoryId">
                    <service-call
                        name="coarchy.ProductEvaluationServices.get#ProcessStoryAnscestors"
                        out-map="anscOut" out-map-add-to-existing="false"
                        in-map="[processStoryId:psActivity.processStoryId]" />

                    <entity-find entity-name="coarchy.ProcessStoryActivityDetail"
                        list="activityList">
                        <econdition field-name="activityId" operator="in" from="allActivityList*.activityId" />
                        <econdition field-name="processStoryId" operator="in"
                            from="anscOut.anscestorIdList" />
                        <econditions combine="or">
                            <econdition field-name="condition" operator="not-equals" value="" />
                            <econdition field-name="action" operator="not-equals" value="" />
                        </econditions>
                        <select-field field-name="processStoryId,activityId,condition,action" />
                    </entity-find>

                    <iterate list="activityList" entry="activity">
                        <service-call
                            name="coarchy.ProductEvaluationServices.include#ProductEvaluationActivity"
                            in-map="[productEvaluationId:productEvaluationId, processStoryId:activity.processStoryId, activityId:activity.activityId]" />
                    </iterate>
                </if>
            </iterate>
        </actions>
    </service>

    <!-- Value statement include/exclude -->
    <service verb="exclude" noun="ProductEvaluationStatement">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
            <parameter name="statementId" required="true" />
        </in-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" />

            <if condition="productEvaluation.statusId != 'PeRequirementsSelection'">
                <return error="true" message="Cannot edit statements in this status." />
            </if>

            <entity-find entity-name="coarchy.product.ProductEvaluationStatement"
                list="existingStatementList">
                <econdition field-name="productEvaluationId" />
                <econdition field-name="statementId" />
            </entity-find>

            <iterate list="existingStatementList" entry="existingStatement">
                <service-call name="delete#coarchy.product.ProductEvaluationStatement"
                    in-map="[productEvaluationId:productEvaluationId, statementId:existingStatement.statementId]" />
            </iterate>
        </actions>
    </service>

    <service verb="include" noun="ProductEvaluationStatement">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
            <parameter name="statementId" required="true" />
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" />

            <if condition="productEvaluation.statusId != 'PeRequirementsSelection'">
                <return error="true" message="Cannot edit statements in this status." />
            </if>

            <entity-find entity-name="coarchy.product.ProductEvaluationStatement"
                list="existingStatementList">
                <econdition field-name="productEvaluationId" />
                <econdition field-name="statementId" />
            </entity-find>

            <if condition="!existingStatementList">
                <service-call name="create#coarchy.product.ProductEvaluationStatement"
                    in-map="[productEvaluationId:productEvaluationId, statementId:statementId,organizationId:organizationId]" />
            </if>
        </actions>
    </service>

    <!-- ================= -->
    <!-- Response Services -->
    <!-- ================= -->

    <service verb="add" noun="ProductEvaluationResponse">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
            <parameter name="organizationId" required="true" />
            <parameter name="activityId" />
            <parameter name="statementId" />
            <parameter name="implementationStatusEnumId" required="true" />
            <parameter name="rating" type="Integer" />
            <parameter name="comments" />
        </in-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" />

            <if condition="productEvaluation.statusId != 'PeAwaitingVendorResponse'">
                <return error="true" message="Cannot add response in this status." />
            </if>

            <!-- find if party is internal org -->
            <entity-find-count entity-name="mantle.party.PartyRelationship"
                count-field="partyRelationshipCount">
                <date-filter />
                <econdition field-name="relationshipTypeEnumId" value="PrtMember" />
                <econdition field-name="toRoleTypeId" value="OrgInternal" />
                <econdition field-name="fromPartyId" from="ec.user.userAccount.partyId" />
                <econdition field-name="toPartyId" from="productEvaluation.organizationId" />
            </entity-find-count>
            <set field="isUserOrgMember" from="partyRelationshipCount > 0" />

            <set field="lastEditedByUserId" from="ec.user.userId" />

            <!-- find existing response, if exists, update, otherwise create -->
            <entity-find entity-name="coarchy.product.ProductEvaluationResponse"
                list="productEvalResponseList">
                <econdition field-name="productEvaluationId" />
                <econdition field-name="evaluationByEnumId" value="EbInternal"
                    ignore="!isUserOrgMember" />
                <econdition field-name="evaluationByEnumId" value="EbVendor"
                    ignore="isUserOrgMember" />
                <econdition field-name="activityId" ignore="!activityId" />
                <econdition field-name="statementId" ignore="!statementId" />
            </entity-find>

            <if condition="!productEvalResponseList">
                <service-call name="create#coarchy.product.ProductEvaluationResponse"
                    in-map="[productEvaluationId:productEvaluationId, activityId:activityId, statementId:statementId, implementationStatusEnumId:implementationStatusEnumId, rating:rating, comments:comments, lastEditedByUserId: lastEditedByUserId, evaluationByEnumId: isUserOrgMember?'EbInternal':'EbVendor',organizationId:organizationId]" />
                <else>
                    <set field="productEvalResponse" from="productEvalResponseList[0]" />
                    <service-call name="update#coarchy.product.ProductEvaluationResponse"
                        in-map="[productEvaluationResponseId:productEvalResponse.productEvaluationResponseId, implementationStatusEnumId:implementationStatusEnumId, rating:rating, comments:comments, lastEditedByUserId: lastEditedByUserId]" />
                </else>
            </if>
        </actions>
    </service>

    <service verb="get" noun="ProductEvaluationResponseStats">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="internalResponseByActivity" type="Map" />
            <parameter name="vendorResponseByActivity" type="Map" />
            <parameter name="internalResponseByStatement" type="Map" />
            <parameter name="vendorResponseByStatement" type="Map" />
            <parameter name="totalVendorCount" type="Integer" />
        </out-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" />

            <set field="vendorResponseByActivity" from="[:]" />
            <set field="internalResponseByActivity" from="[:]" />
            <set field="vendorResponseByStatement" from="[:]" />
            <set field="internalResponseByStatement" from="[:]" />

            <!-- see if all activites on the product evaluation have responses from all vendors, if
            they do, change status to complete -->
            <service-call name="coarchy.ProductEvaluationServices.get#ProductEvaluationActivites"
                in-map="[productEvaluationId:productEvaluationId]" out-map="productEvalActivities" />
            <service-call name="coarchy.ProductEvaluationServices.get#ProductEvaluationStatements"
                in-map="[productEvaluationId:productEvaluationId]" out-map="productEvalStatements" />

            <!-- get vendors on the product evaluation -->
            <entity-find entity-name="coarchy.product.ProductEvaluationParty"
                list="productEvalPartyList">
                <date-filter />
                <econdition field-name="productEvaluationId" />
                <econdition field-name="roleTypeId" value="VendorRepresentative" />
                <econdition field-name="statusId" operator="in" value="PepInvited,PepAccepted" />
            </entity-find>
            <set field="vendorPartyIds" from="productEvalPartyList*.partyId" />

            <iterate list="productEvalActivities.activityIds" entry="activityId">
                <entity-find-count entity-name="coarchy.product.ProductEvaluationResponse"
                    count-field="productEvalResponseCount">
                    <econdition field-name="productEvaluationId" />
                    <econdition field-name="activityId" />
                    <econdition field-name="evaluationByEnumId" value="EbVendor" />
                </entity-find-count>
                <script>addToBigDecimalInMap(activityId, productEvalResponseCount, vendorResponseByActivity)</script>

                <entity-find-count entity-name="coarchy.product.ProductEvaluationResponse"
                    count-field="productEvalResponseCount">
                    <econdition field-name="productEvaluationId" />
                    <econdition field-name="activityId" />
                    <econdition field-name="evaluationByEnumId" value="EbInternal" />
                </entity-find-count>
                <script>addToBigDecimalInMap(activityId, productEvalResponseCount, internalResponseByActivity)</script>
            </iterate>

            <iterate list="productEvalStatements.valueStatementIds" entry="valueStatementId">
                <entity-find-count entity-name="coarchy.product.ProductEvaluationResponse"
                    count-field="productEvalResponseCount">
                    <econdition field-name="productEvaluationId" />
                    <econdition field-name="statementId" from="valueStatementId" />
                    <econdition field-name="evaluationByEnumId" value="EbVendor" />
                </entity-find-count>
                <script>addToBigDecimalInMap(valueStatementId, productEvalResponseCount, vendorResponseByStatement)</script>

                <entity-find-count entity-name="coarchy.product.ProductEvaluationResponse"
                    count-field="productEvalResponseCount">
                    <econdition field-name="productEvaluationId" />
                    <econdition field-name="statementId" from="valueStatementId" />
                    <econdition field-name="evaluationByEnumId" value="EbInternal" />
                </entity-find-count>
                <script>addToBigDecimalInMap(valueStatementId, productEvalResponseCount, internalResponseByStatement)</script>
            </iterate>
        </actions>
    </service>

    <!-- =============== -->
    <!-- Status Services -->
    <!-- =============== -->

    <service verb="finalize" noun="ProductEvaluationActivitySelection">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
        </in-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" for-update="true" />

            <!-- Make sure we're in the correct status -->
            <if condition="productEvaluation.statusId != 'PeRequirementsSelection'">
                <return error="true" message="Cannot finalize activities in this status." />
            </if>

            <!-- Make sure we have at least one activity to Evaluate -->
            <service-call name="coarchy.ProductEvaluationServices.get#ProductEvaluationActivites"
                in-map="[productEvaluationId:productEvaluationId]" out-map="productEvalActivities" />

            <if condition="productEvalActivities.activityIds?.size() == 0">
                <return error="true" message="Please add at least one activity to evaluate." />
            </if>

            <set field="productEvaluation.statusId" value="PeInviteVendors" />
            <set field="productEvaluation.requirementsSetDate" from="ec.user.nowTimestamp" />
            <entity-update value-field="productEvaluation" />
        </actions>
    </service>

    <service verb="reopen" noun="ProductEvaluationActivitySelection">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
        </in-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" for-update="true" />

            <!-- Make sure we're in the correct status -->
            <if condition="productEvaluation.statusId != 'PeInviteVendors'">
                <return error="true" message="Cannot modify requirements in this status." />
            </if>

            <set field="productEvaluation.statusId" value="PeRequirementsSelection" />
            <entity-update value-field="productEvaluation" />
        </actions>
    </service>

    <service verb="finalize" noun="ProductEvaluationVendorInvitations">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
        </in-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" for-update="true" />

            <!-- Make sure we're in the correct status -->
            <if condition="productEvaluation.statusId != 'PeInviteVendors'">
                <return error="true" message="Cannot complete vendor invitations in this status." />
            </if>

            <!-- Make sure we have at least one invited vendor -->
            <entity-find entity-name="coarchy.product.ProductEvaluationParty"
                list="productEvalPartyList">
                <date-filter />
                <econdition field-name="productEvaluationId" />
                <econdition field-name="roleTypeId" value="VendorRepresentative" />
                <econdition field-name="statusId" operator="not-in" value="PepRejected,PepWithdrew" />
            </entity-find>

            <if condition="productEvalPartyList.size() == 0">
                <return error="true" message="Please invite at least one vendor." />
            </if>

            <!-- send invitations out -->
            <service-call name="coarchy.ProductEvaluationServices.send#ProductEvaluationInvitations"
                in-map="[productEvaluationId:productEvaluationId]" />

            <!-- update status -->
            <set field="productEvaluation.statusId" value="PeAwaitingVendorResponse" />
            <entity-update value-field="productEvaluation" />
        </actions>
    </service>

    <service verb="cancel" noun="ProductEvaluation">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
        </in-parameters>
        <out-parameters>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" for-update="true" />

            <!-- Make sure we're in the correct status -->
            <if
                condition="!['PeRequirementsSelection', 'PeAwaitingVendorResponse', 'PeInviteVendors'].contains(productEvaluation.statusId)">
                <return error="true" message="Cannot cancel Product Evaluation in this status." />
            </if>

            <!-- update status -->
            <set field="productEvaluation.statusId" value="PeCancelled" />
            <entity-update value-field="productEvaluation" />
        </actions>
    </service>

    <service verb="complete" noun="ProductEvaluation">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
        </in-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" for-update="true"/>

            <!-- Make sure we're in the correct status -->
            <if condition="!['PeAwaitingVendorResponse'].contains(productEvaluation.statusId)">
                <return />
            </if>

            <!-- update status -->
            <set field="productEvaluation.statusId" value="PeCompleted" />
            <entity-update value-field="productEvaluation" />
            <!-- <if condition="vendorRespondedToAll &amp;&amp; internalRespondedToAll">
                <else>
                    <if condition="!vendorRespondedToAll">
                        <message type="warning">
                            The invited vendor has not evaluated all statements and stories.
                        </message>
                    </if>
                    <if condition="!internalRespondedToAll">
                        <message type="warning">
                            Not all statements and process stories have internal evaluations.
                        </message>
                    </if>
                </else> 
            </if>-->

        </actions>
    </service>
    
    <service verb="get" noun="ProductEvaluationCompleteWarnings">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="hasWarnings" type="Boolean"/>
            <parameter name="vendorRespondedToAllStories" type="Boolean"/>
            <parameter name="vendorRespondedToAllStatements" type="Boolean"/>
            <parameter name="internalRespondedToAllStories" type="Boolean"/>
            <parameter name="internalRespondedToAllStatements" type="Boolean"/>
        </out-parameters>
        <actions>
            <set field="hasWarnings" from="false"/>

            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" />

            <!-- Make sure we're in the correct status -->
            <if condition="!['PeAwaitingVendorResponse'].contains(productEvaluation.statusId)">
                <return />
            </if>

            <!-- see if all activites on the product evaluation have responses from all vendors, if
            they do, change status to complete -->
            <service-call name="coarchy.ProductEvaluationServices.get#ProductEvaluationActivites"
                in-map="[productEvaluationId:productEvaluationId]" out-map="productEvalActivities" />
            <service-call name="coarchy.ProductEvaluationServices.get#ProductEvaluationStatements"
                in-map="[productEvaluationId:productEvaluationId]" out-map="productEvalStatements" />
        
            <!-- check if all vendors responded -->
            <set field="vendorRespondedToAllStories" from="true" />
            <set field="vendorRespondedToAllStatements" from="true" />
       
            <iterate list="productEvalActivities.activityIds" entry="activityId">
                <entity-find-count entity-name="coarchy.product.ProductEvaluationResponse"
                    count-field="productEvalResponseCount">
                    <econdition field-name="productEvaluationId" />
                    <econdition field-name="activityId" />
                    <econdition field-name="evaluationByEnumId" value="EbVendor" />
                </entity-find-count>

                <if condition="!productEvalResponseCount">
                    <set field="vendorRespondedToAllStories" from="false" />
                    <break />
                </if>
            </iterate>

            <iterate list="productEvalStatements.valueStatementIds" entry="valueStatementId">
                <entity-find-count entity-name="coarchy.product.ProductEvaluationResponse"
                    count-field="productEvalResponseCount">
                    <econdition field-name="productEvaluationId" />
                    <econdition field-name="statementId" from="valueStatementId" />
                    <econdition field-name="evaluationByEnumId" value="EbVendor" />
                </entity-find-count>

                <if condition="!productEvalResponseCount">
                    <set field="vendorRespondedToAllStatements" from="false" />
                    <break />
                </if>
            </iterate>

            <!-- check if all internal responded -->
            <set field="internalRespondedToAllStories" from="true" />
            <set field="internalRespondedToAllStatements" from="true" />

            <iterate list="productEvalActivities.activityIds" entry="activityId">
                <entity-find-count entity-name="coarchy.product.ProductEvaluationResponse"
                    count-field="productEvalResponseCount">
                    <econdition field-name="productEvaluationId" />
                    <econdition field-name="activityId" />
                    <econdition field-name="evaluationByEnumId" value="EbInternal" />
                </entity-find-count>

                <if condition="!productEvalResponseCount">
                    <set field="internalRespondedToAllStories" from="false" />
                    <break />
                </if>
            </iterate>

            <iterate list="productEvalStatements.valueStatementIds" entry="valueStatementId">
                <entity-find-count entity-name="coarchy.product.ProductEvaluationResponse"
                    count-field="productEvalResponseCount">
                    <econdition field-name="productEvaluationId" />
                    <econdition field-name="statementId" from="valueStatementId" />
                    <econdition field-name="evaluationByEnumId" value="EbInternal" />
                </entity-find-count>

                <if condition="!productEvalResponseCount">
                    <set field="internalRespondedToAllStatements" from="false" />
                    <break />
                </if>
            </iterate>

            <set field="hasWarnings" from="!vendorRespondedToAllStories || !vendorRespondedToAllStatements || !internalRespondedToAllStories || !internalRespondedToAllStatements"/>
        </actions>
    </service>

    <!-- ========================= -->
    <!-- Party/Invitation Services -->
    <!-- ========================= -->

    <service verb="send" noun="ProductEvaluationInvitations">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
        </in-parameters>     
        <actions>
            <!-- find ProductEvaluation -->
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation"
                auto-field-map="[productEvaluationId:productEvaluationId]" />

            <set field="organizationId" from="productEvaluation.organizationId" />

            <!-- find product -->
            <entity-find-one entity-name="mantle.product.Product" value-field="product"
                auto-field-map="[productId:productEvaluation?.productId]" />
            <if condition="product?.productClassEnumId != 'PclsCoarchy'">
                <return error="true" message="Invalid product." />
            </if>

            <!-- find organization -->
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="organization"
                auto-field-map="[partyId:organizationId]" />
            <if condition="!organization || !organization.ownerPartyId">
                <return />
            </if>

            <!-- find parties -->
            <entity-find entity-name="coarchy.product.ProductEvaluationParty"
                    list="pePartyList">
                <date-filter />
                <econdition field-name="productEvaluationId" />
                <econdition field-name="roleTypeId" value="VendorRepresentative" />
                <econdition field-name="statusId" operator="in" value="PepPlanned" />
            </entity-find>

            <set field="baseLinkUrl" from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : 'https://coarchy.com'" />

            <iterate list="pePartyList" entry="peParty">
                <!-- get email -->
                <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress" in-map="[partyId:peParty.partyId]" out-map="emailOut" />
                <!-- find account (should already be created) -->
                <entity-find entity-name="moqui.security.UserAccount" list="existingUaList">
                    <econdition field-name="partyId" from="peParty.partyId" />
                </entity-find>
                <if condition="!existingUaList">
                    <log message="No user account found for partyId ${peParty.partyId}" level="warn" />
                    <continue />
                </if>
                <set field="existingUa" from="existingUaList[0]" />
                <set field="userAccountActivated" from="existingUa?.currentPassword != null" />

                <if condition="!userAccountActivated">
                    <then>
                        <!-- if user hasn't setup his account (ie, new user), send a VENDOR_INVITE_RESET_PASSWORD email -->
                        <entity-find-one entity-name="moqui.security.UserAccount"
                            value-field="userAccount" auto-field-map="[userId:existingUa.userId]"
                            for-update="true" />
                        <!-- reset the password to a random value -->
                        <set field="resetPassword" from="getRandomString(12)" />
                        <set field="passwordNode"
                            from="ec.ecfi.confXmlRoot.first('user-facade').first('password')" />
                        <set field="userAccount.resetPassword"
                            from="ec.ecfi.getSimpleHash(resetPassword, userAccount.passwordSalt, userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64))" />
                        <set field="userAccount.requirePasswordChange"
                            from="(passwordNode.attribute('email-require-change') == 'true') ? 'Y' : 'N'" />
                        <entity-update value-field="userAccount" />

                        <service-call name="coarchy.CoarchyServices.send#ContactListEmail"
                            in-map="[
                            contactListId:'CoarchyInvitation',emailTemplateId:'VENDOR_INVITE_RESET_PASSWORD',
                            partyId:peParty.partyId,preferredContactMechId:emailOut.contactMechId,toAddresses:existingUa.emailAddress,
                            bodyParameters:[organization:organization, product:product, linkUrl:baseLinkUrl+'/ChangePassword?username='+existingUa.emailAddress+'&amp;oldPassword='+resetPassword+'&amp;action=signup',
                            title: (organization.organizationName+' is Requesting for Information about ' + product.productName), baseLinkUrl:baseLinkUrl]]"
                            out-map="context" />

                            <!-- set productparty status to PepAccepted -->
                            <!-- This should be changed to PepInvited, once we implement invite/accept/reject flow -->
                            <service-call name="update#coarchy.product.ProductEvaluationParty" in-map="[productEvaluationId:peParty.productEvaluationId, roleTypeId:peParty.roleTypeId, fromDate:peParty.fromDate, partyId:peParty.partyId, statusId: 'PepAccepted']" />
                    </then>
                    <else-if
                        condition="userAccountActivated">
                        <!-- if is setup, send a VENDOR_INVITE email -->
                        <service-call name="coarchy.CoarchyServices.send#ContactListEmail"
                            in-map="[
                            contactListId:'CoarchyInvitation',emailTemplateId:'VENDOR_INVITE',
                            partyId:peParty.partyId,preferredContactMechId:null,toAddresses:existingUa.emailAddress,
                            bodyParameters:[organization:organization, product:product, linkUrl:baseLinkUrl+'/Login?username='+existingUa?.username?:existingUa.emailAddress,
                            title: (organization.organizationName+' is Requesting for Information about ' + product.productName), baseLinkUrl:baseLinkUrl]]"
                            out-map="context" />

                            <!-- set productparty status to PepAccepted -->
                            <!-- This should be changed to PepInvited, once we implement invite/accept/reject flow -->
                            <service-call name="update#coarchy.product.ProductEvaluationParty" in-map="[productEvaluationId:peParty.productEvaluationId, roleTypeId:peParty.roleTypeId, fromDate:peParty.fromDate, partyId:peParty.partyId, statusId: 'PepAccepted']" />                        
                    </else-if>
                   </if>            
            </iterate>
        </actions>
    </service>

    <service verb="add" noun="ProductEvaluationParty">
        <in-parameters>
            <parameter name="productEvaluationId" required="true" />
            <parameter name="organizationId" required="true" />
            <parameter name="emailAddress" required="true" />
            <parameter name="firstName" />
            <parameter name="lastName" />
        </in-parameters>
        <actions>
            <!-- find product evaluation -->
            <entity-find-one entity-name="coarchy.product.ProductEvaluation"
                value-field="productEvaluation" />
            
            <if condition="!productEvaluation">
                <return error="true" message="Product Evaluation #${productEvaluationId} not found." />
            </if>

            <set field="organizationId" from="productEvaluation.organizationId" />

            <!-- make sure person calling this service is a member of the org -->
            <entity-find-count entity-name="mantle.party.PartyRelationship" count-field="partyRelationshipCount">
                <date-filter/>
                <econditions combine="or">
                    <econditions>
                        <econdition field-name="relationshipTypeEnumId" value="PrtMember"/>
                        <econdition field-name="toRoleTypeId" value="OrgInternal"/>        
                    </econditions>
                    <econditions>
                        <econdition field-name="relationshipTypeEnumId" value="PrtVendorRepresentative"/>
                        <econdition field-name="toRoleTypeId" value="VendorRepresentative"/>        
                    </econditions>
                </econditions>
                <econdition field-name="fromPartyId" from="ec.user.userAccount.partyId"/>
                <econdition field-name="toPartyId" from="organizationId"/>
            </entity-find-count>

            <if condition="!partyRelationshipCount">
                <return type="danger" error="true"
                message="${ec.resource.expand('CoarchyGeneralNotAllowed', null)}" />
            </if>
            
            <!-- only allow invitations if status is PeInviteVendors, or PeAwaitingVendorResponse -->
            <if
                condition="!['PeRequirementsSelection', 'PeInviteVendors', 'PeAwaitingVendorResponse'].contains(productEvaluation.statusId)">
                <return error="true" message="Cannot add vendors in this status." />
            </if>

            <!-- check if account exists - if not, create one -->
            <entity-find entity-name="moqui.security.UserAccount" list="existingUaList">
                <econdition field-name="emailAddress" ignore-case="true" />
            </entity-find>

            <if condition="!existingUaList">
                <then>
                    <service-call name="coarchy.CoarchyServices.create#Account"
                        out-map="newUser"
                        in-map="[emailAddress:emailAddress,firstName:firstName?:'Not',lastName:lastName?:'Set',username:emailAddress]" />
                    <service-call name="create#mantle.party.PartyRole"
                        in-map="[partyId:newUser.partyId,roleTypeId:'VendorRepresentative']" />
                    <service-call name="create#moqui.security.UserGroupMember"
                        in-map="[userGroupId:'COARCHY_USERS',
                            userId:newUser.userId, fromDate:ec.user.nowTimestamp]" />
                    <service-call name="create#moqui.security.UserGroupMember"
                        in-map="[userGroupId:'COARCHY_VENDORS',
                            userId:newUser.userId, fromDate:ec.user.nowTimestamp]" />
                    <service-call name="org.moqui.impl.UserServices.set#Preference"
                        in-map="[preferenceKey:'ACTIVE_ORGANIZATION',preferenceValue:organizationId]" />

                    <!-- Sales Journey Prospect for invited user -->
                    <!-- <service-call name="mantle.party.PartyServices.set#PartyClassification"
                    in-map="[partyId:newUser.partyId,partyClassificationId:'Prospect']"/> -->
                </then>
                <else>
                    <set field="newUser" from="existingUaList?.getFirst()" />
                </else>
            </if>
            <set field="newPartyId" from="newUser.partyId" />
            <set field="newUserId" from="newUser.userId" />

            <!-- find if invited user is already an existing member of organization -->
            <entity-find-count entity-name="mantle.party.PartyRelationship"
                count-field="partyRelationshipCount">
                <date-filter />
                <econdition field-name="relationshipTypeEnumId" value="PrtVendorRepresentative" />
                <econdition field-name="toRoleTypeId" value="VendorRepresentative" />
                <econdition field-name="fromPartyId" from="newPartyId" />
                <econdition field-name="toPartyId" from="organizationId" />
            </entity-find-count>
            <set field="isInvitedUserOrgMember" from="partyRelationshipCount > 0" />
                
            <!-- if not, create party relationship to org -->
            <if condition="!isInvitedUserOrgMember">
                <then>
                    <service-call name="create#mantle.party.PartyRelationship"
                        in-map="[relationshipTypeEnumId:'PrtVendorRepresentative',
                        fromPartyId:newUser.partyId,toRoleTypeId:'VendorRepresentative',toPartyId:organizationId,fromDate:ec.user.nowTimestamp]" />
                </then>
            </if>
            
            <entity-find entity-name="coarchy.product.ProductEvaluationParty" list="evalPartyList">
                <date-filter />
                <econdition field-name="productEvaluationId" />
                <econdition field-name="partyId" from="newPartyId" />
                <econdition field-name="roleTypeId" value="VendorRepresentative" />
                <!-- only allow re-adding vendor if invitation was cancelled by org member -->
                <econdition field-name="statusId" operator="in"
                    value="PepPlanned,PepInvited,PepAccepted,PepRejected" />
                <order-by field-name="-fromDate" />
            </entity-find>

            <if condition="!evalPartyList">
                <service-call name="create#coarchy.product.ProductEvaluationParty"
                    in-map="[productEvaluationId:productEvaluationId, roleTypeId:'VendorRepresentative', fromDate:ec.user.nowTimestamp, partyId:newPartyId, statusId: 'PepPlanned',organizationId:organizationId]" />

                <if condition="productEvaluation.statusId == 'PeAwaitingVendorResponse'">
                    <!-- send pending invitations -->
                    <service-call name="coarchy.ProductEvaluationServices.send#ProductEvaluationInvitations"
                        in-map="[productEvaluationId:productEvaluationId]" />
                </if>
                <else>
                    <entity-find-one entity-name="mantle.product.Product" value-field="product" auto-field-map="[productId:productEvaluation.productId]"></entity-find-one>
                    <return type="warning"
                    message="${ec.resource.expand('CoarchyProductVendorAlreadyInvited', null, [emailAddress:emailAddress, productName:product.productName])}" />
                </else>
            </if>
        </actions>
    </service>

    <!-- Utility Services -->
    <!-- ================ -->

    <service verb="get" noun="ProcessStoryDescendants">
        <in-parameters>
            <parameter name="processStoryId" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="descendantIdList" type="List" />
        </out-parameters>
        <actions>
            <set field="descendantIdList" from="[]" />
            <entity-find entity-name="coarchy.ProcessStoryActivity" list="processStoryActivityList">
                <econdition field-name="processStoryId" />
                <econdition field-name="detailProcessStoryId" operator="is-not-null" />
            </entity-find>

            <iterate list="processStoryActivityList" entry="processStoryActivity">
                <script>
                    descendantIdList.add(processStoryActivity.detailProcessStoryId)
                </script>

                <service-call name="coarchy.ProductEvaluationServices.get#ProcessStoryDescendants"
                    out-map="descOut" out-map-add-to-existing="false"
                    in-map="[processStoryId:processStoryActivity.detailProcessStoryId]" />

                <script>descendantIdList.addAll(descOut.descendantIdList)</script>
            </iterate>

        </actions>
    </service>

    <service verb="get" noun="ProcessStoryAnscestors">
        <in-parameters>
            <parameter name="processStoryId" required="true" />
        </in-parameters>
        <out-parameters>
            <parameter name="anscestorIdList" type="List" />
        </out-parameters>
        <actions>
            <set field="anscestorIdList" from="[]" />
            <entity-find entity-name="coarchy.ProcessStoryActivity" list="processStoryActivityList">
                <econdition field-name="detailProcessStoryId" from="processStoryId" />
            </entity-find>

            <iterate list="processStoryActivityList" entry="processStoryActivity">
                <script>
                    anscestorIdList.add(processStoryActivity.processStoryId)
                </script>

                <service-call name="coarchy.ProductEvaluationServices.get#ProcessStoryAnscestors"
                    out-map="anscOut" out-map-add-to-existing="false"
                    in-map="[processStoryId:processStoryActivity.processStoryId]" />

                <script>anscestorIdList.addAll(anscOut.anscestorIdList)</script>
            </iterate>

        </actions>
    </service>
</services>