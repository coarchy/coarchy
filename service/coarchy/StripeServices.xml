<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <service verb="create" noun="PaymentIntent">
        <out-parameters>
            <parameter name="clientSecret"/>
            <parameter name="paymentId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.order.OrderHeaderAndPart" list="existingOrderList" limit="2">
                <econdition field-name="statusId" value="OrderOpen"/>
                <econdition field-name="customerPartyId" from="ec.user.userAccount.partyId"/>
                <select-field field-name="orderId,orderPartSeqId,grandTotal,currencyUomId"/>
                <order-by field-name="-entryDate"/><!-- get most recent open order --></entity-find>
            <if condition="existingOrderList.size() &lt; 1"><return error="true" public="true" type="danger" message="No order found for user."/></if>
            <if condition="existingOrderList.size() &gt; 1"><message type="warning">Multiple open orders or parts found for user. This should not happen.</message></if>

            <set field="orderHeaderAndPart" from="existingOrderList.getFirst()"/>
            <set field="orderId" from="orderHeaderAndPart.orderId"/>
            <!-- TODO: Check if payment already exists? -->
            <entity-find entity-name="mantle.account.payment.Payment" list="existingPaymentList" limit="1">
                <econdition field-name="orderId" value="orderId"/>
                <econdition field-name="orderPartSeqId" value="orderHeaderAndPart.orderPartSeqId"/>
                <select-field field-name="paymentId"/>
                <order-by field-name="-paymentDate"/></entity-find>
            <if condition="existingPaymentList.size() &gt; 0"><then>
                <set field="payment" from="existingPaymentList.getFirst()"/>
                <set field="paymentId" from="payment.paymentId"/>
            </then><else>
                <service-call name="mantle.order.OrderServices.add#OrderPartPayment" in-map="[orderId:orderHeaderAndPart.orderId,
                    orderPartSeqId:orderHeaderAndPart.orderPartSeqId,settlementTermId:'Immediate']" out-map="context"/>
                <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment" auto-field-map="[paymentId:paymentId]"/>
            </else></if>

            <!-- convert unappliedTotal to cents -->
            <set field="unappliedTotal" from="(payment.unappliedTotal * 100).toInteger()" type="Integer"/>
            <set field="currencyUomId" from="payment.amountUomId"/>

            <!-- System steps -->
            <set field="instancePurpose" from="System.getProperty('instance_purpose')"/>
            <if condition="!instancePurpose || instancePurpose == 'production'"><then>
                <script><![CDATA[stripeRemote = ec.entity.fastFindOne("moqui.service.message.SystemMessageRemote", false, true, 'ProductionStripe')]]></script>
            </then><else>
                <script><![CDATA[stripeRemote = ec.entity.fastFindOne("moqui.service.message.SystemMessageRemote", false, true, 'DemoStripe')]]></script>
            </else></if>
            <script><![CDATA[party = ec.entity.find("mantle.party.Party").condition("partyId", ec.user.userAccount.partyId).one()]]></script>

            <script>import org.moqui.util.RestClient</script>

            <if condition="!party.externalId">
                <script><![CDATA[
                org.moqui.util.RestClient customerRestClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                        .basicAuth(stripeRemote.privateKey,"")
                        .addBodyParameter("email", (String) ec.user.userAccount.emailAddress)
                def customerUriBuilder = customerRestClient.uri().protocol("https").host("api.stripe.com").port(443)
                        .path("/v1/customers")
                customerUriBuilder.build()

                org.moqui.util.RestClient.RestResponse customerRestResponse = customerRestClient.call()
                customerResponseMap = (Map) customerRestResponse.jsonObject()
//                ec.logger.warn("customerResponseMap: ${customerResponseMap}")
                if (customerRestResponse.statusCode < 200 || customerRestResponse.statusCode >= 300) {
                    ec.logger.warn("Got status code ${customerRestResponse.statusCode} from Stripe on a create customers request")
                    ec.message.addPublic("Could not create Customer", "warning")
                    return
                }
                ]]></script>

                <set field="party.externalId" from="customerResponseMap.id"/>
                <entity-update value-field="party"/>
            </if>

            <!-- for not entering in the payment information for each payment -->
<!--            <script><![CDATA[
                org.moqui.util.RestClient paymentMethodListRestClient = ec.service.rest().method(org.moqui.util.RestClient.GET)
                        .basicAuth(stripeRemote.privateKey,"")
                        .addBodyParameter("type", (String) "card")
                def paymentMethodListUriBuilder = paymentMethodListRestClient.uri().protocol("https").host("api.stripe.com").port(443)
                        .path("/v1/customers/").path(party.externalId).path("/payment_methods")
                paymentMethodListUriBuilder.build()

                org.moqui.util.RestClient.RestResponse paymentMethodListRestResponse = paymentMethodListRestClient.call()
                paymentMethodListResponseMap = (Map) paymentMethodListRestResponse.jsonObject()
                 ec.logger.warn("paymentMethodListResponseMap: ${paymentMethodListResponseMap}")
                if (paymentMethodListRestResponse.statusCode < 200 || paymentMethodListRestResponse.statusCode >= 300) {
                    ec.message.addPublic("Could not find Payment Methods", "warning")
                    return
                }
                ]]></script>
            <set field="paymentMethodId" from="paymentMethodListResponseMap.data.first()?.id"/>

            <if condition="paymentMethodId != null &amp;&amp; party.externalId != null">
                <script><![CDATA[
                    org.moqui.util.RestClient attachPaymentMethodRestClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                            .basicAuth(stripeRemote.privateKey,"")
                            .addBodyParameter("customer", (String) party.externalId)
                    def attachPaymentMethodUriBuilder = attachPaymentMethodRestClient.uri().protocol("https").host("api.stripe.com").port(443)
                            .path("/v1/payment_methods/").path(paymentMethodId).path("/attach")
                    attachPaymentMethodUriBuilder.build()

                    org.moqui.util.RestClient.RestResponse attachPaymentMethodRestResponse = attachPaymentMethodRestClient.call()
//                    attachPaymentMethodResponseMap = (Map) attachPaymentMethodRestResponse.jsonObject()
                    ec.logger.warn("attachPaymentMethodResponseMap: ${attachPaymentMethodResponseMap}")
                    if (attachPaymentMethodRestResponse.statusCode < 200 || attachPaymentMethodRestResponse.statusCode >= 300) {
                        ec.message.addPublic("Could not find Payment Methods", "warning")
                        return
                    }
                    ]]></script>
            </if>-->

            <script><![CDATA[
                org.moqui.util.RestClient paymentIntentRestClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                        .basicAuth(stripeRemote.privateKey,"")
                        .addBodyParameter("customer", (String) party.externalId)
                        .addBodyParameter("amount", (String) unappliedTotal)
                        .addBodyParameter("currency", (String) currencyUomId)
//                        .addBodyParameter("setup_future_usage", (String) "off_session")
                if (paymentMethodId != null) {
//                    ec.logger.warn("Adding paymentMethodId: ${paymentMethodId}")
                    paymentIntentRestClient.addBodyParameter("payment_method", (String) paymentMethodId)
                }
                def paymentIntentUriBuilder = paymentIntentRestClient.uri().protocol("https").host("api.stripe.com").port(443)
                    .path("/v1/payment_intents")
                paymentIntentUriBuilder.build()

                org.moqui.util.RestClient.RestResponse paymentIntentRestResponse = paymentIntentRestClient.call()
                paymentIntentResponseMap = (Map) paymentIntentRestResponse.jsonObject()
                // ec.logger.warn("paymentIntentResponseMap: ${paymentIntentResponseMap}")
                if (paymentIntentRestResponse.statusCode < 200 || paymentIntentRestResponse.statusCode >= 300) {
                    ec.logger.warn("Got status code ${paymentIntentRestResponse.statusCode} from Stripe on a create payment_intents request")
                    ec.message.addPublic("Could not create Payment", "warning")
                }
                ]]></script>

            <service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:payment.paymentId, paymentRefNum:paymentIntentResponseMap?.id]"/>

            <set field="clientSecret" from="paymentIntentResponseMap.client_secret"/>

            <!-- TODO: Handle https://stripe.com/docs/payments/quickstart#use-webhook -->
<!--            <log level="warn" message="create#PaymentIntent context.toString(): ${context.toString()}"/>-->

        </actions>
    </service>

    <service verb="handle" noun="Webhook" authenticate="anonymous-all">
        <actions>
            <log level="warn" message="handle#Webhook ec.web.request.getHeader('Stripe-Signature'): ${ec.web.request.getHeader('Stripe-Signature')}"/>
            <set field="headerStripeSignature" from="ec.web.request.getHeader('Stripe-Signature')"/>
            <set field="stripeSignatureList" from="headerStripeSignature.split(',')"/>
            <set field="t" from="null"/>
            <set field="v1" from="null"/>
            <iterate list="stripeSignatureList" entry="stripeSignature">
                <set field="key" from="stripeSignature.split('=')[0]"/>
                <set field="value" from="stripeSignature.split('=')[0]"/>
                <if condition="key == 't'"><then>
                    <set field="t" from="value"/>
                </then><else-if condition="key == 'v1'">
                    <set field="v1" from="value"/>
                </else-if></if>
            </iterate>

            <set field="signed_payload" from="t+'.'+ec.web.getRequestBodyText()"/>


<!--            <log level="warn" message="handle#Webhook ec.web.getRequestParameters(): ${ec.web.getRequestParameters()}"/>-->

<!--            <log level="warn" message="handle#Webhook context.toString(): ${context.toString()}"/>-->

        </actions>
    </service>
</services>
