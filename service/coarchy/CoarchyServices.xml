<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    
    <service verb="create" noun="Organization">
        <in-parameters>
            <parameter name="organizationId" />
            <parameter name="organizationName" />
            <parameter name="copyUsers" type="String" default-value="none">
                <description>Copies/moves user and roles. Value should be one of 'none', 'copy', 'move'</description>
            </parameter>
            <parameter name="copyChecklists" type="String" default-value="none">
                <description>Copies/moves checklists. Value should be one of 'none', 'copy', 'move'</description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="newOrganizationId" />
        </out-parameters>
        <actions>
            <!-- find user organization list -->
            <entity-find entity-name="mantle.party.PartyToAndRelationship" list="organizationList" distinct="true">
                <date-filter/>
                <econditions combine="or">
                    <econdition field-name="fromPartyId" from="ec.user.userAccount.partyId"/>
                    <econdition field-name="visibilityEnumId" value="PvPublic"/>
                </econditions>
                <select-field field-name="toPartyId,ownerPartyId,organizationName,visibilityEnumId"/>
                <order-by field-name="-visibilityEnumId"/>
            </entity-find>

            <!-- make sure org name is valid/non-empty -->
            <set field="organizationName" from="organizationName?.trim()"/>
            <if condition="!organizationName">
                <return type="warning" error="true" message="${ec.resource.expand('CoarchyOrgNameInvalid', null)}"/>
            </if>

            <!-- if no clone/move from organizationId, create new org & return -->
            <if condition="!organizationId">
                <service-call name="create#mantle.party.Party" in-map="[ownerPartyId:ec.user.userAccount.partyId,partyTypeEnumId:'PtyOrganization',visibilityEnumId:'PvOrganization']" out-map="newOrganization"/>
                <service-call name="create#mantle.party.Organization" in-map="[partyId:newOrganization.partyId,organizationName:organizationName]"/>
                <service-call name="create#mantle.party.PartyRelationship" in-map="[relationshipTypeEnumId:'PrtMember',fromDate:ec.user.nowTimestamp, fromPartyId:ec.user.userAccount.partyId,toRoleTypeId:'OrgInternal',toPartyId:newOrganization.partyId]"/>
                <service-call name="org.moqui.impl.UserServices.set#Preference" in-map="[preferenceKey:'ACTIVE_ORGANIZATION',preferenceValue:newOrganization.partyId]"/>
                <set field="newOrganizationId" from="newOrganization.partyId" />
                <return type="success" message="${ec.resource.expand('CoarchyOrgCreateSuccess', null)}"/>
            </if>

            <!-- clone old org -->
            <entity-find-one entity-name="mantle.party.Party" value-field="oldOrganization" auto-field-map="[partyId:organizationId]"/>
            <entity-find-count entity-name="mantle.party.PartyActivation" count-field="partyActivationCount">
                <date-filter/>
                <econdition field-name="partyId" from="organizationId"/>
            </entity-find-count>
            
            <if condition="(oldOrganization.visibilityEnumId || (oldOrganization.ownerPartyId == ec.user.userAccount.partyId) ||
                    organizationList*.toPartyId?.contains(organizationId)) &amp;&amp; (partyActivationCount &gt; 0 || oldOrganization.visibilityEnumId=='PvPublic')">

                <service-call name="create#mantle.party.Party" in-map="[ownerPartyId:ec.user.userAccount.partyId,
                    disabled:oldOrganization.disabled,partyTypeEnumId:oldOrganization.partyTypeEnumId,
                    visibilityEnumId:'PvOrganization']" out-map="newOrganization"/>
                <service-call name="create#mantle.party.Organization" in-map="[partyId:newOrganization.partyId,organizationName:organizationName]"/>
                <service-call name="coarchy.CoarchyServices.activateOrDeactivate#Organization" in-map="[organizationPartyId:newOrganization.partyId]" out-map="context"/>
                <service-call name="org.moqui.impl.UserServices.set#Preference" in-map="[preferenceKey:'ACTIVE_ORGANIZATION',preferenceValue:newOrganization.partyId]"/>
                <service-call name="create#mantle.party.PartyRelationship" in-map="[relationshipTypeEnumId:'PrtMember',fromDate:ec.user.nowTimestamp, fromPartyId:ec.user.userAccount.partyId,toRoleTypeId:'OrgInternal',toPartyId:newOrganization.partyId]"/>
                <set field="newOrganizationId" from="newOrganization.partyId" />

                <!-- find partyRelationship list for old org -->
                <entity-find entity-name="mantle.party.PartyRelationship" list="partyRelationshipList">
                    <date-filter />
                    <econdition field-name="toPartyId" from="oldOrganization.partyId"/>
                    <econdition field-name="toRoleTypeId" value="OrgInternal"/>
                    <econdition field-name="relationshipTypeEnumId" value="PrtMember"/>
                    <!-- <econdition field-name="fromPartyId" from="ec.user.userAccount.partyId" ignore="oldOrganization.visibilityEnumId=='PvOrganization'"/> -->
                </entity-find>

                <set field="referencedPartyIdSet" from="new TreeSet()" />

                <!-- &amp;&amp; (partyRelationship.fromPartyId != ec.user.userAccount?.partyId) -->
                
                <!-- not sure why this is here? -->
                <!-- <entity-find-count entity-name="mantle.party.PartyRelationship" count-field="partyRelationshipCount">
                    <econdition field-name="toPartyId" from="oldOrganization.partyId"/>
                    <econdition field-name="toRoleTypeId" value="OrgInternal"/>
                    <econdition field-name="relationshipTypeEnumId" value="PrtMember"/>
                    <econdition field-name="fromPartyId" from="ec.user.userAccount.partyId"/>
                </entity-find-count>
                <if condition="partyRelationshipCount==0">
                    <service-call name="create#mantle.party.PartyRelationship" in-map="[relationshipTypeEnumId:'PrtMember',fromPartyId:ec.user.userAccount.partyId,toRoleTypeId:'OrgInternal',toPartyId:newOrganization.partyId]"/>
                </if> -->
                                
                <!-- copy PartyContent (Vision, Mission, Origin Story)-->
                <entity-find entity-name="mantle.party.PartyContent" list="partyContentList">
                    <econdition field-name="partyId" from="oldOrganization.partyId"/>
                    <econdition field-name="partyContentTypeEnumId" operator="in" value="PcntVision,PcntMission,PcntOriginStory"/>
                </entity-find>
                <iterate list="partyContentList" entry="partyContent">
                    <service-call name="create#mantle.party.PartyContent" in-map="[partyId:newOrganization.partyId,
                        partyContentTypeEnumId:partyContent.partyContentTypeEnumId,description:partyContent.description]"/>
                </iterate>

                <!-- copy ValueStatement -->
                <set field="valueStatementIdMap" from="[:]"/>
                <entity-find entity-name="coarchy.ValueStatement" list="valueStatementList">
                    <econdition field-name="organizationId" from="oldOrganization.partyId"/>
                </entity-find>
                <iterate list="valueStatementList" entry="valueStatement">
                    <service-call name="create#coarchy.ValueStatement" in-map="[value:valueStatement.value,typeEnumId:
                        valueStatement.typeEnumId,organizationId:newOrganization.partyId]" out-map="valueStatementContext"/>
                    <script>valueStatementIdMap.put(valueStatement.valueStatementId,valueStatementContext.valueStatementId)</script>
                </iterate>

                <!-- copy ProcessStory -->
                <set field="processStoryIdMap" from="[:]"/>
                <entity-find entity-name="coarchy.ProcessStory" list="processStoryList">
                    <econdition field-name="organizationId" from="oldOrganization.partyId"/>
                </entity-find>
                <iterate list="processStoryList" entry="processStory">
                    <service-call name="create#coarchy.ProcessStory" in-map="[name:processStory.name,organizationId:newOrganization.partyId,disabled:processStory.disabled]" out-map="processStoryContext"/>
                    <script>processStoryIdMap.put(processStory.processStoryId,processStoryContext.processStoryId)</script>
                </iterate>

                <!-- copy Actors -->
                <set field="actorIdMap" from="[:]"/>
                <entity-find entity-name="coarchy.Actor" list="actorList">
                    <econdition field-name="organizationId" from="oldOrganization.partyId"/>
                </entity-find>
                <iterate list="actorList" entry="actor">
                    <service-call name="create#coarchy.Actor" in-map="[name:actor.name,description:actor.description,organizationId:newOrganization.partyId]" out-map="actorContext"/>
                    <script>actorIdMap.put(actor.actorId,actorContext.actorId)</script>
                </iterate>

                <!-- copy/move ActorParty assignments -->                
                <if condition="copyUsers != 'none'">
                    <entity-find entity-name="coarchy.ActorParty" list="actorPartyList">
                        <econdition field-name="organizationId" from="oldOrganization.partyId"/>
                    </entity-find>
                    <iterate list="actorPartyList" entry="actorParty">
                        <if condition="(copyUsers == 'copy') || (copyUsers == 'move')">
                            <then>
                                <script>referencedPartyIdSet.add(actorParty.partyId)</script>
                                <!-- copy ActoryParty to new org -->
                                <service-call name="create#coarchy.ActorParty" 
                                    in-map="[actorId:actorIdMap[actorParty.actorId], partyId:actorParty.partyId, organizationId:newOrganization.partyId]" />
                                <if condition="(copyUsers == 'move')">
                                    <!-- if this is a move, delete the old value -->
                                    <entity-delete value-field="actorParty" />
                                </if>
                            </then>
                        </if>
                    </iterate>
                </if>

                <!-- copy Activities -->
                <set field="activityIdMap" from="[:]"/>
                <entity-find entity-name="coarchy.Activity" list="activityList">
                    <econdition field-name="organizationId" from="oldOrganization.partyId"/>
                </entity-find>
                <iterate list="activityList" entry="activity">
                    <service-call name="create#coarchy.Activity" in-map="[condition:activity.condition,action:activity.action,implementationId:activity.implementationId,organizationId:newOrganization.partyId]" out-map="activityContext"/>
                    <script>activityIdMap.put(activity.activityId,activityContext.activityId)</script>
                </iterate>

                <!-- copy ActivityActor -->   
                <entity-find entity-name="coarchy.ActivityActor" list="activityActorList">
                    <econdition field-name="organizationId" from="oldOrganization.partyId"/>
                </entity-find>
                <iterate list="activityActorList" entry="activityActor">
                    <service-call name="create#coarchy.ActivityActor" 
                        in-map="[activityId:activityIdMap[activityActor.activityId], actorId:actorIdMap[activityActor.actorId], organizationId:newOrganization.partyId]" />
                </iterate>
               
                <!-- copy ValueStatementActivity -->                
                <entity-find entity-name="coarchy.ValueStatementActivity" list="valueStatementActivityList">
                    <econdition field-name="organizationId" from="oldOrganization.partyId"/>
                </entity-find>
                <iterate list="valueStatementActivityList" entry="valueStatementActivity">
                    <service-call name="create#coarchy.ValueStatementActivity" 
                        in-map="[valueStatementId:valueStatementIdMap[valueStatementActivity.valueStatementId],activityId:activityIdMap[valueStatementActivity.activityId],organizationId:newOrganization.partyId]"/>
                </iterate>

                <!-- copy ProcessStoryActivity -->                
                <entity-find entity-name="coarchy.ProcessStoryActivity" list="processStoryActivityList">
                    <econdition field-name="organizationId" from="oldOrganization.partyId"/>
                </entity-find>
                <iterate list="processStoryActivityList" entry="processStoryActivity">
                    <service-call name="create#coarchy.ProcessStoryActivity" 
                        in-map="[processStoryId:processStoryIdMap[processStoryActivity.processStoryId],activityId:activityIdMap[processStoryActivity.activityId],sequenceNum:processStoryActivity.sequenceNum,detailProcessStoryId:processStoryIdMap[processStoryActivity.detailProcessStoryId],organizationId:newOrganization.partyId]"/>
                </iterate>

                <set field="checklistWorkEffortIdMap" from="[:]"/>
                <if condition="copyChecklists != 'none'">
                    <entity-find entity-name="mantle.work.effort.WorkEffort" list="checklistWorkEffortList">
                        <econdition field-name="workEffortTypeEnumId" value="WetChecklist"/>
                        <econdition field-name="ownerPartyId" from="oldOrganization.partyId"/>
                    </entity-find>
                    
                    <iterate list="checklistWorkEffortList" entry="checklistWorkEffort">
                        <if condition="copyChecklists == 'copy'">
                            <then>
                                <!-- create a new copy of each work effort -->
                                <service-call name="create#mantle.work.effort.WorkEffort" in-map="[workEffortName:checklistWorkEffort.workEffortName,
                                    actualStartDate:checklistWorkEffort.actualStartDate,workEffortTypeEnumId:checklistWorkEffort.workEffortTypeEnumId,
                                    actualCompletionDate:checklistWorkEffort.actualCompletionDate,ownerPartyId:newOrganization.partyId]" out-map="checklistWorkEffortContext"/>
                                <script>checklistWorkEffortIdMap.put(checklistWorkEffort.workEffortId,checklistWorkEffortContext.workEffortId)</script>
                            </then>
                            <else-if condition="copyChecklists == 'move'">
                                <!-- move checklist by changing ownerPartyId to new org -->
                                <service-call name="update#mantle.work.effort.WorkEffort" 
                                    in-map="[workEffortId:checklistWorkEffort.workEffortId, ownerPartyId:newOrganization.partyId]" 
                                    out-map="checklistWorkEffortContext"/>
                                <script>checklistWorkEffortIdMap.put(checklistWorkEffort.workEffortId,checklistWorkEffort.workEffortId)</script>
                            </else-if>                           
                        </if>
                    </iterate>
              
                    <!-- move checklist (workeffort) parties -->
                    <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="checklistWorkEffortPartyList">
                        <econdition field-name="workEffortId" operator="in" from="checklistWorkEffortIdMap*.key"/>
                    </entity-find>

                    <iterate list="checklistWorkEffortPartyList" entry="checklistWorkEffortParty">
                        <if condition="partyRelationshipList*.fromPartyId?.contains(checklistWorkEffortParty.partyId)">
                            <then>
                                <script>referencedPartyIdSet.add(checklistWorkEffortParty.partyId)</script>
                                <if condition="copyChecklists == 'copy'">
                                    <then>
                                        <!-- create new WorkEffortParty to new org -->
                                        <service-call name="create#mantle.work.effort.WorkEffortParty" in-map="[
                                            workEffortId:checklistWorkEffortIdMap[checklistWorkEffortParty.workEffortId],
                                            partyId:checklistWorkEffortParty.partyId,roleTypeId:checklistWorkEffortParty.roleTypeId,
                                            fromDate:ec.user.nowTimestamp,thruDate:checklistWorkEffortParty.thruDate]"/>
                                    </then>
                                    <else-if condition="copyChecklists == 'move'">
                                        <!-- do nothing, WorkEffort is now owned by new org, WorkEffortParty is still valid -->
                                    </else-if>
                                </if>
                            </then>
                            <else>
                                <!-- <log level="warn" message="WorkEffortParty ${checklistWorkEffortParty} not created because party is not a member of the organization"/>-->
                            </else>
                        </if>
                    </iterate>
                </if>
               
                <set field="itemWorkEffortIdMap" from="[:]"/>
                <if condition="copyChecklists != 'none'">
                    <entity-find entity-name="mantle.work.effort.WorkEffort" list="itemWorkEffortList">
                        <econdition field-name="workEffortTypeEnumId" value="WetChecklistItem"/>
                        <econdition field-name="ownerPartyId" from="oldOrganization.partyId"/>
                    </entity-find>
                                     
                    <iterate list="itemWorkEffortList" entry="itemWorkEffort">
                        <if condition="copyChecklists == 'copy'">
                            <then>
                                <!-- create a new copy of each work effort -->
                                <service-call name="create#mantle.work.effort.WorkEffort" in-map="[workEffortName:itemWorkEffort.workEffortName,
                                actualStartDate:itemWorkEffort.actualStartDate,workEffortTypeEnumId:itemWorkEffort.workEffortTypeEnumId,
                                actualCompletionDate:itemWorkEffort.actualCompletionDate,ownerPartyId:newOrganization.partyId,
                                rootWorkEffortId:checklistWorkEffortIdMap[itemWorkEffort.rootWorkEffortId],
                                activityId:activityIdMap[itemWorkEffort.activityId],resolutionEnumId:itemWorkEffort.resolutionEnumId]" out-map="itemWorkEffortContext"/>
                                <script>itemWorkEffortIdMap.put(itemWorkEffort.workEffortId,itemWorkEffortContext.workEffortId)</script>
                            </then>
                            <else-if condition="copyChecklists == 'move'">
                                <!-- move checklist item by changing ownerPartyId to new org -->
                                <service-call name="update#mantle.work.effort.WorkEffort" 
                                    in-map="[workEffortId:itemWorkEffort.workEffortId, ownerPartyId:newOrganization.partyId,activityId: activityIdMap[itemWorkEffort.activityId]]" 
                                    out-map="itemWorkEffortContext"/>
                                <script>itemWorkEffortIdMap.put(itemWorkEffort.workEffortId,itemWorkEffort.workEffortId)</script>
                            </else-if>                           
                        </if>
                    </iterate>
              
                    <!-- move checklist item (workeffort) parties -->
                    <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="itemWorkEffortPartyList">
                        <econdition field-name="workEffortId" operator="in" from="itemWorkEffortIdMap*.key"/>
                    </entity-find>
                   
                    <iterate list="itemWorkEffortPartyList" entry="itemWorkEffortParty">
                        <if condition="partyRelationshipList*.fromPartyId?.contains(itemWorkEffortParty.partyId)">
                            <then>
                                <script>referencedPartyIdSet.add(itemWorkEffortParty.partyId)</script>
                                <if condition="copyChecklists == 'copy'">
                                    <then>
                                        <!-- create new WorkEffortParty to new org -->
                                        <service-call name="create#mantle.work.effort.WorkEffortParty" in-map="[
                                            workEffortId:itemWorkEffortIdMap[itemWorkEffortParty.workEffortId],
                                            partyId:itemWorkEffortParty.partyId,roleTypeId:itemWorkEffortParty.roleTypeId,
                                            fromDate:ec.user.nowTimestamp,thruDate:itemWorkEffortParty.thruDate]"/>                                       
                                    </then>
                                    <else-if condition="copyChecklists == 'move'">
                                        <!-- do nothing, WorkEffort is now owned by new org, WorkEffortParty is still valid -->
                                    </else-if>
                                </if>
                            </then>
                            <else>
                                <!-- <log level="warn" message="Checklist item WorkEffortParty ${itemWorkEffortParty} not created because party is not a member of the organization"/>-->
                            </else>
                        </if>
                    </iterate>
                </if>

                <if condition="copyUsers != 'none'">         
                    <!-- <econdition field-name="fromPartyId" operator="in" from="referencedPartyIdSet"/> -->
                    <entity-find entity-name="mantle.party.PartyRelationship" list="referencedPartyRelationshipList">
                        <date-filter />
                        <econdition field-name="toPartyId" from="oldOrganization.partyId"/>
                        <econdition field-name="toRoleTypeId" value="OrgInternal"/>
                        <econdition field-name="relationshipTypeEnumId" value="PrtMember"/>
                        <econdition field-name="fromPartyId" operator="in" from="referencedPartyIdSet"/>
                    </entity-find>

                    <iterate list="referencedPartyRelationshipList" entry="partyRelationship">
                        <if condition="(copyUsers == 'copy') || (copyUsers == 'move') &amp;&amp; (partyRelationship.fromPartyId != ec.user.userAccount?.partyId)">
                            <then>
                                <!-- create new relationship to new org -->
                                <service-call name="create#mantle.party.PartyRelationship" in-map="[
                                    relationshipTypeEnumId:partyRelationship.relationshipTypeEnumId,fromPartyId:partyRelationship.fromPartyId,
                                    toRoleTypeId:partyRelationship.toRoleTypeId,toPartyId:newOrganization.partyId,fromDate:partyRelationship.fromDate,
                                    thruDate:partyRelationship.thruDate]"/>
                                <!-- end old relationship if this is a move operation -->
                                <if condition="(copyUsers == 'move')">
                                    <set field="partyRelationship.thruDate" from="ec.user.nowTimestamp" />
                                    <entity-update value-field="partyRelationship" />
                                </if>
                            </then>
                        </if>
                    </iterate>
                </if>
            </if>

            <message type="success">
                ${ec.resource.expand('CoarchyOrgCreateSuccess', null)}
            </message>
        </actions>
    </service>

    <service verb="invite" noun="NewUser">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="emailAddress" required="true"/>
            <parameter name="firstName" required="true"/>
            <parameter name="lastName" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="newUserId"/>
            <parameter name="newPartyId"/>
        </out-parameters>
        <actions>
            <service-call name="coarchy.CoarchyServices.invite#User" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="invite" noun="User">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="emailAddress" required="true"/>
            <parameter name="firstName"/>
            <parameter name="lastName"/>
        </in-parameters>
        <out-parameters>
            <parameter name="newUserId"/>
            <parameter name="newPartyId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="organization" auto-field-map="[partyId:partyId]"/>
            <if condition="!organization || !organization.ownerPartyId"><return/></if>
            <if condition="organization.ownerPartyId == ec.user.userAccount.partyId">
                <entity-find entity-name="moqui.security.UserAccount" list="existingUaList">
                    <econdition field-name="emailAddress" ignore-case="true"/></entity-find>

                <if condition="!existingUaList"><then>
                    <service-call name="coarchy.CoarchyServices.create#Account" out-map="newUser"
                        in-map="[emailAddress:emailAddress,firstName:firstName?:'Not',lastName:lastName?:'Set',username:emailAddress]"/>
                    <service-call name="create#mantle.party.PartyRole" in-map="[partyId:newUser.partyId,roleTypeId:'Customer']"/>
                    <service-call name="create#moqui.security.UserGroupMember" in-map="[userGroupId:'COARCHY_USERS',
                        userId:newUser.userId, fromDate:ec.user.nowTimestamp]"/>
                    <!-- Sales Journey Prospect for invited user -->
                    <service-call name="mantle.party.PartyServices.set#PartyClassification" in-map="[partyId:newUser.partyId,partyClassificationId:'Prospect']"/>
                </then><else>
                    <set field="newUser" from="existingUaList?.getFirst()"/>
                </else></if>
                <set field="newPartyId" from="newUser.partyId"/>
                <set field="newUserId" from="newUser.userId"/>

                <!-- find if invited user is already an existing member of organization -->
                <entity-find-count entity-name="mantle.party.PartyRelationship" count-field="partyRelationshipCount">
                    <date-filter/>
                    <econdition field-name="relationshipTypeEnumId" value="PrtMember"/>
                    <econdition field-name="toRoleTypeId" value="OrgInternal"/>
                    <econdition field-name="fromPartyId" from="newPartyId"/>
                    <econdition field-name="toPartyId" from="partyId"/>
                </entity-find-count>
                <set field="isInvitedUserOrgMember" from="partyRelationshipCount > 0"/>
                <if condition="!isInvitedUserOrgMember">
                    <then>
                        <service-call name="create#mantle.party.PartyRelationship" in-map="[relationshipTypeEnumId:'PrtMember',
                            fromPartyId:newUser.partyId,toRoleTypeId:'OrgInternal',toPartyId:partyId,fromDate:ec.user.nowTimestamp]"/>
                    </then>
                </if>

                <service-call name="org.moqui.impl.UserServices.set#Preference" in-map="[preferenceKey:'ACTIVE_ORGANIZATION',preferenceValue:partyId]"/>

                <set field="baseLinkUrl" from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : 'https://coarchy.com'"/>
                <if condition="!existingUaList">
                    <then>
                        <!-- if account does not exist (ie, new user), create one & send a USER_INVITE_RESET_PASSWORD email -->
                        <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" auto-field-map="[userId:newUser.userId]" for-update="true"/>
                        <!-- reset the password to a random value -->
                        <set field="resetPassword" from="getRandomString(12)"/>
                        <set field="passwordNode" from="ec.ecfi.confXmlRoot.first('user-facade').first('password')"/>
                        <set field="userAccount.resetPassword" from="ec.ecfi.getSimpleHash(resetPassword, userAccount.passwordSalt, userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64))"/>
                        <set field="userAccount.requirePasswordChange" from="(passwordNode.attribute('email-require-change') == 'true') ? 'Y' : 'N'"/>
                        <entity-update value-field="userAccount"/>

                        <service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[
                            contactListId:'CoarchyInvitation',emailTemplateId:'USER_INVITE_RESET_PASSWORD',
                            partyId:newPartyId,preferredContactMechId:newUser.emailContactMechId,toAddresses:emailAddress,
                            bodyParameters:[linkUrl:baseLinkUrl+'/ChangePassword?username='+emailAddress+'&amp;oldPassword='+resetPassword+'&amp;action=signup',
                            title:'You\'re invited to join the '+organization.organizationName+' Organization',baseLinkUrl:baseLinkUrl]]" out-map="context"/>
                    </then>
                    <else-if condition="existingUaList &amp;&amp; !isInvitedUserOrgMember">
                        <!-- if account DOES exist, existing/invited user, but NOT part of inviting organization, send a USER_INVITE email -->
                        <service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[
                            contactListId:'CoarchyInvitation',emailTemplateId:'USER_INVITE',
                            partyId:newPartyId,preferredContactMechId:null,toAddresses:emailAddress,
                            bodyParameters:[linkUrl:baseLinkUrl+'/Login?username='+existingUaList.getFirst()?.username?:emailAddress,
                            title:'You\'re invited to join the '+organization.organizationName+' Organization',baseLinkUrl:baseLinkUrl]]" out-map="context"/>
                    </else-if>
                    <else>
                        <!-- otherwise, do nothing (account exists, and is member of inviting org)-->
                        <return type="warning" message="${ec.resource.expand('CoarchyOrgInviteAlreadyInvited', null, [emailAddress:emailAddress, organizationName:organization.organizationName])}"/>
                    </else>
                </if>
                <else><return type="danger" error="true" message="${ec.resource.expand('CoarchyGeneralNotAllowed', null)}"/></else>
            </if>
        </actions>
    </service>
    <service verb="send" noun="ContactListEmail">
        <in-parameters>
            <parameter name="contactListId" required="true"/>
            <parameter name="emailTemplateId" required="true"/>
            <parameter name="partyId" required="true"/>
            <parameter name="bodyParameters" required="true" type="Map"/>
            
            <parameter name="preferredContactMechId"/>
            <parameter name="toAddresses"/>

            <parameter name="emailTypeEnumId" required="true" default-value="CONT_EMAIL_TEMPLATE"/>
        </in-parameters>
        <out-parameters>
            <parameter name="sentEmail"/>
            <parameter name="emailTemplateId"/>
        </out-parameters>
        <actions>
            <set field="sentEmail" from="false"/>
            <entity-find-one entity-name="mantle.marketing.contact.ContactList" value-field="invitationContact" auto-field-map="[contactListId:contactListId]"/>
            <if condition="!invitationContact">
                <log level="info" message="No ContactList found with contactListId of ${contactListId}"/>
                <message error="true" type="danger" public="true">Cannot send invitation email, please contact support for help</message>
            </if>
            <entity-find entity-name="mantle.marketing.contact.ContactListEmail" list="invitationContactListEmailList" limit="1">
                <econdition field-name="emailTemplateId"/>
                <econdition field-name="emailTypeEnumId"/>
                <date-filter/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <set field="invitationContactListEmail" from="invitationContactListEmailList?.getFirst()"/>
            <if condition="!invitationContactListEmail">
                <log level="info" message="No ContactListEmail found for emailTemplateId ${emailTemplateId} and emailTypeEnumId ${emailTypeEnumId}"/>
                <message error="true" type="danger" public="true">Cannot send invitation email, please contact support for help</message>
            </if>
            <entity-find entity-name="mantle.marketing.contact.ContactListParty" list="inviteContactListPartyList" limit="1" for-update="true">
                <econdition field-name="contactListId"/>
                <econdition field-name="partyId"/>
                <date-filter/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <set field="inviteContactListParty" from="inviteContactListPartyList?.getFirst()"/>
            <if condition="!preferredContactMechId">
                <entity-find entity-name="mantle.party.contact.PartyContactMech" list="partyContactMechList" limit="1">
                    <econdition field-name="partyId"/>
                    <econdition field-name="contactMechPurposeId" value="EmailPrimary"/>
                    <date-filter/>
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <set field="preferredContactMechId" from="partyContactMechList?.getFirst()?.contactMechId"/>
            </if>
            <if condition="!inviteContactListParty"><then>
                <service-call name="create#mantle.marketing.contact.ContactListParty" in-map="[
                            contactListId:contactListId,partyId:partyId,statusId:'CLPT_IN_USE',
                            preferredContactMechId:preferredContactMechId,optInVerifyCode:getRandomString(63)]" out-map="inviteContactListPartyOut"/>
                <entity-find-one entity-name="mantle.marketing.contact.ContactListParty" value-field="inviteContactListParty"
                        auto-field-map="[contactListId:contactListId,partyId:partyId,fromDate:inviteContactListPartyOut.fromDate]"/>
            </then><else-if condition="!inviteContactListParty.optInVerifyCode">
                <set field="inviteContactListParty.optInVerifyCode" from="getRandomString(63)"/>
                <entity-update value-field="inviteContactListParty"/>
            </else-if></if>

            <if condition="inviteContactListParty.statusId != 'CLPT_IN_USE'"><then>
                <log level="info" message="Not sending invitation email because not in 'In Use' status"/>
                <message type="warning" public="true">Not sending email. User is unsubscribed from Invitation emails</message>
            </then><else>
                <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" in-map="[
                    emailTemplateId:emailTemplateId,toAddresses:toAddresses,bodyParameters:bodyParameters+[
                    currentYear:ec.user.nowTimestamp.format('yyyy'),contactListName:invitationContact.contactListName,
                    unsubscribeLink:bodyParameters.baseLinkUrl+invitationContact.optOutScreen+'?optInVerifyCode='+inviteContactListParty.optInVerifyCode]]"
                    out-map="context"/>
                <if condition="emailMessageId">
                    <set field="sentEmail" from="true"/>
                </if>

                <service-call name="mantle.party.CommunicationServices.create#Message" in-map="[
                    communicationEventTypeId:'Email',contactMechTypeEnumId:'CmtEmailAddress',statusId:'CeSent',
                    toContactMechId:preferredContactMechId,toPartyId:partyId,fromPartyId:'coarchy',emailMessageId:emailMessageId,contactListId:contactListId]"
                    out-map="communicationEventOut"/>
                <service-call name="create#mantle.marketing.contact.ContactListCommStatus" in-map="[
                    contactListId:contactListId,communicationEventId:communicationEventOut.communicationEventId,
                    contactMechId:preferredContactMechId,partyId:partyId]"/>
            </else></if>
        </actions>
    </service>

    <service verb="change" noun="UserPassword">
        <in-parameters>
            <parameter name="username" required="true" default="ec.web?.sessionAttributes?.moquiPreAuthcUsername ?: username"/>
            <parameter name="oldPassword" required="true"/>
            <parameter name="newPassword" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="updateSuccessful"/>
            <parameter name="loginSuccess"/>
            <parameter name="passwordIssues"/>
        </out-parameters>
        <actions>
            <service-call name="org.moqui.impl.UserServices.update#Password" in-map="[username:username,
                oldPassword:oldPassword,newPassword:newPassword,newPasswordVerify:newPassword]" out-map="context"/>
        </actions>
    </service>

    <service verb="complete" noun="UserSignup">
        <in-parameters>
            <parameter name="username" required="true" default="ec.web?.sessionAttributes?.moquiPreAuthcUsername ?: username"/>
            <parameter name="firstName" required="true"/>
            <parameter name="lastName" required="true"/>
            <parameter name="oldPassword" required="true"/>
            <parameter name="newPassword" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="updateSuccessful"/>
            <parameter name="loginSuccess"/>
            <parameter name="passwordIssues"/>
        </out-parameters>
        <actions>
            <!-- make sure account exists and password has not been already been set by user -->
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                <field-map field-name="username" from="username" />
                <select-field field-name="userId,partyId,currentPassword,passwordSetDate" />
            </entity-find-one>
            <if condition="!userAccount"><return error="true" message="${ec.resource.expand('CoarchyAuthUserNotFound','')}"/></if>
            <if condition="userAccount.currentPassword &amp;&amp; userAccount.passwordSetDate">
                <return error="true" message="${ec.resource.expand('CoarchyAuthPasswordAlreadySet','')}"/>
            </if>

            <service-call name="org.moqui.impl.UserServices.update#Password" in-map="[username:username,
                oldPassword:oldPassword,newPassword:newPassword,newPasswordVerify:newPassword]" out-map="context"/>

            <!-- password change success, login the user -->
            <if condition="updateSuccessful">
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                    <field-map field-name="username"/>
                    <select-field field-name="userId,partyId"/></entity-find-one>
                <service-call name="update#moqui.security.UserAccount" in-map="[userId:userAccount.userId,userFullName:(firstName?firstName+' ':'')+lastName?:'']"/>
                <service-call name="mantle.party.PartyServices.update#Account" in-map="[userId:userAccount.userId,firstName:firstName,lastName:lastName]"/>
                <set field="loginSuccess" from="ec.user.internalLoginUser(username)"/>

                <!-- Sales Journey Hot Lead user -->
                <service-call name="mantle.party.PartyServices.set#PartyClassification" in-map="[partyId:userAccount.partyId,partyClassificationId:'HotLead']" out-map="context"/>

                <!-- Send welcome email -->
                <set field="baseLinkUrl" from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : 'https://coarchy.com'"/>
                <service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[
                        contactListId:'CoarchyOnboarding',emailTemplateId:'ONBOARDING_WELCOME',
                        partyId:userAccount.partyId,preferredContactMechId:null,toAddresses:username,
                        bodyParameters:[linkUrl:baseLinkUrl+'/settings/Organizations',
                        title:'Welcome to Coarchy, Build a better future!',baseLinkUrl:baseLinkUrl]]" out-map="context"/>
            </if>
        </actions>
    </service>

    <service verb="create" noun="Account">
        <description>
            Create a basic user account including:
            - Party/Person
            - UserAccount (with specified username or emailAddress for username)
            - ContactMech/PartyContactMech for emailAddress (with EmailPrimary purpose)

            At the end this optionally logs in the user (for this to work it must be run locally).
        </description>
        <in-parameters>
            <auto-parameters entity-name="mantle.party.Person" include="nonpk"/>
            <parameter name="firstName" required="true"/>
            <parameter name="lastName" required="true"/>

            <!-- Party fields -->
            <parameter name="pseudoId"/>
            <parameter name="ownerPartyId"/>
            <parameter name="externalId"/>
            <parameter name="dataSourceId"/>
            <parameter name="disabled" default-value="N"/>

            <parameter name="requirePasswordChange" default-value="N"/>
            <parameter name="emailAddress" required="true"><text-email/></parameter>

            <!-- UserAccount fields -->
            <parameter name="username" default="emailAddress"/>
            <parameter name="newPassword"><description>If empty won't set a password, user will have to change or reset.</description></parameter>
            <parameter name="newPasswordVerify"/>
            <parameter name="currencyUomId"/>
            <parameter name="locale"/>
            <parameter name="timeZone"/>

            <!-- removed because creates a security hole as any open access to this service that doesn't restrict this parameter could be used to get admin access to system: <parameter name="userGroupId"/> -->
            <parameter name="roleTypeId"/>
            <parameter name="loginAfterCreate" type="Boolean" default="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="userId"/>
            <parameter name="partyId" required="true"/>
            <parameter name="emailContactMechId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.contact.PartyContactMechInfo" list="existingPartyList" limit="2">
                <date-filter/>
                <econdition field-name="contactMechPurposeId" value="EmailPrimary"/>
                <econdition field-name="contactMechTypeEnumId" value="CmtEmailAddress"/>
                <econdition field-name="infoString" from="emailAddress"/></entity-find>
            <if condition="existingPartyList.size() &gt; 1">
                <log level="warn" message="Multiple parties found for email address ${emailAddress}"/>
            </if>
            <if condition="existingPartyList.size() == 1"><then>
                <set field="partyId" from="existingPartyList.getFirst()?.partyId"/>
                <entity-find-one entity-name="mantle.party.Person" value-field="person" auto-field-map="[partyId:partyId]" for-update="true"/>
                <if condition="person"><then>
                    <set field="person.firstName" from="firstName"/>
                    <set field="person.lastName" from="lastName"/>
                    <entity-update value-field="person"/>
                </then><else>
                    <service-call name="create#mantle.party.Person" in-map="[partyId:partyId,firstName:firstName,lastName:lastName]"/>
                </else></if>
                <if condition="roleTypeId">
                    <service-call name="create#mantle.party.PartyRole" in-map="[partyId:partyId, roleTypeId:roleTypeId]"/></if>

                <!-- copied from mantle.party.PartyServices.create#Account -->
                <if condition="username">
                    <!-- see if username already in use (instead of catching on unique index) -->
                    <entity-find entity-name="moqui.security.UserAccount" list="existingUaList">
                        <econdition field-name="username" ignore-case="true"/></entity-find>
                    <if condition="existingUaList"><return error="true" message="Username [${username}] is already in use. Please choose another."/></if>
                    <!-- see if emailAddress already in use (instead of catching on unique index) -->
                    <if condition="emailAddress">
                        <entity-find entity-name="moqui.security.UserAccount" list="existingUaList">
                            <econdition field-name="emailAddress" ignore-case="true"/></entity-find>
                        <if condition="existingUaList"><return error="true" message="Email ${emailAddress} is already in use. Login with username ${existingUaList[0].username}"/></if>
                    </if>

                    <set field="userFullName" value="${ec.resource.expand('PartyFullNameTemplate','')}"/>
                    <if condition="newPassword"><then>
                        <!-- NOTE: SECA rule on UserServices.create#UserAccount will create a Party for UserAccount if no partyId, so must call with the partyId after create Party -->
                        <service-call name="org.moqui.impl.UserServices.create#UserAccount" in-map="context" out-map="newUaOut"/>
                    </then><else>
                        <service-call name="create#moqui.security.UserAccount" in-map="context" out-map="newUaOut"/>
                    </else></if>
                    <set field="userId" from="newUaOut.userId"/>

                    <!-- login the user -->
                    <if condition="loginAfterCreate &amp;&amp; newPassword">
                        <script>ec.user.loginUser(username, newPassword)</script></if>
                </if>
            </then><else>
                <service-call name="mantle.party.PartyServices.create#Account" out-map="context"
                        in-map="[emailAddress:emailAddress,firstName:firstName,lastName:lastName,username:emailAddress,
                        newPassword:newPassword,newPasswordVerify:newPassword]"/>
            </else></if>
        </actions>
    </service>
    <service verb="signUp" noun="User">
        <in-parameters>
            <parameter name="emailAddress" required="true"/>
            <parameter name="username" required="true" default="emailAddress"/>
            <parameter name="firstName" required="true"/>
            <parameter name="lastName" required="true"/>
            <parameter name="newPassword" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
            <parameter name="partyClassificationId"/>
        </out-parameters>
        <actions>
            <service-call name="coarchy.CoarchyServices.create#Account" out-map="context"
                    in-map="[emailAddress:emailAddress,firstName:firstName,lastName:lastName,username:emailAddress,
                    newPassword:newPassword,newPasswordVerify:newPassword]"/>
            <service-call name="update#mantle.party.Party" in-map="[partyId:partyId,visibilityEnumId:'PvOrganization']"/>
            <service-call name="create#mantle.party.PartyRole" in-map="[partyId:partyId,roleTypeId:'Customer']"/>
            <service-call name="create#moqui.security.UserGroupMember" in-map="[userGroupId:'COARCHY_USERS', userId:userId, fromDate:ec.user.nowTimestamp]"/>

            <!-- Sales Journey Hot Lead user -->
            <service-call name="mantle.party.PartyServices.set#PartyClassification" in-map="[partyId:partyId,partyClassificationId:'HotLead']" out-map="context"/>

            <!-- Send welcome email -->
            <set field="baseLinkUrl" from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : 'https://coarchy.com'"/>
            <service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[
                contactListId:'CoarchyOnboarding',emailTemplateId:'ONBOARDING_WELCOME',
                partyId:partyId,preferredContactMechId:null,toAddresses:username,
                bodyParameters:[linkUrl:baseLinkUrl+'/settings/Organizations',
                title:'Welcome to Coarchy, Build a better future!!',baseLinkUrl:baseLinkUrl]]" out-map="context"/>
        </actions>
    </service>

    <service verb="create" noun="ProcessStory">
        <in-parameters>
            <parameter name="name" required="true"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="processStoryId"/>
        </out-parameters>
        <actions>
            <set field="name" from="name?.trim()"/>
            <entity-find entity-name="coarchy.ProcessStory" list="processStoryList" limit="20">
                <econdition field-name="name" ignore-case="true"/>
                <order-by field-name="^name"/>
            </entity-find>
            <if condition="processStoryList?.size() &gt; 0"><return type="danger" error="true" message="${ec.resource.expand('CoarchyProcessStoryNameExists', null, [name:processStoryList?.getFirst()?.name])}"/></if>

            <service-call name="create#coarchy.ProcessStory" in-map="[name:name,organizationId:organizationId]" out-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="ProcessStory">
        <in-parameters>
            <parameter name="processStoryId" required="true"/>
            <parameter name="name" required="true"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <actions>
            <set field="name" from="name?.trim()"/>
            <entity-find-one entity-name="coarchy.ProcessStory" value-field="processStory"/>
            <if condition="!processStory"><return type="danger" error="true" message="${ec.resource.expand('CoarchyProcessStoryNotFound', null)}"/></if>

            <service-call name="update#coarchy.ProcessStory" in-map="[processStoryId:processStoryId,name:name]"/>
        </actions>
    </service>
    <service verb="enable" noun="ProcessStory">
        <description>Disable a process story (set disabled=Y, disabledDateTime=now)</description>
        <in-parameters><parameter name="processStoryId" required="true"/></in-parameters>
        <actions>
            <service-call name="update#coarchy.ProcessStory" in-map="[processStoryId:processStoryId, disabled:'N']"/>
        </actions>
    </service>
    <service verb="disable" noun="ProcessStory">
        <description>Disable a process story (set disabled=Y, disabledDateTime=now)</description>
        <in-parameters><parameter name="processStoryId" required="true"/></in-parameters>
        <actions>
            <service-call name="update#coarchy.ProcessStory" in-map="[processStoryId:processStoryId, disabled:'Y']"/>
        </actions>
    </service>
    <service verb="find" noun="ProcessStoryActivityList">
        <description>
            Find list of activities of process story
            For each activity that has a detailProcessStory, call this function with that processStoryId, return the list of activities
            Add the necessary fields for the activity and the detail process story name, and detail process story activity list
        </description>
        <in-parameters>
            <parameter name="processStoryId" required="true"/>
            <parameter name="showSubstories" required="true"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="processStoryActivityList"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="coarchy.ProcessStoryActivityDetail" list="setupProcessStoryActivityList">
                <econdition field-name="processStoryId"/>
                <select-field field-name="activityId,condition,action,detailProcessStoryId,processStoryId"/>
                <order-by field-name="sequenceNum"/></entity-find>
            <set field="processStoryActivityList" from="[]"/>
            <iterate list="setupProcessStoryActivityList" entry="processStoryActivity">
                <entity-find entity-name="coarchy.ActivityActorDetail" list="activityActorList">
                    <econdition field-name="activityId" from="processStoryActivity.activityId"/>
                    <order-by field-name="name"/></entity-find>
                <set field="detailProcessStoryName" from="null"/>
                <set field="detailProcessStoryId" from="processStoryActivity.detailProcessStoryId"/>
                <set field="detailProcessStoryActivityList" from="[]"/>
                <if condition="processStoryActivity.detailProcessStoryId &amp;&amp; showSubstories!='N'">
                    <service-call name="coarchy.CoarchyServices.find#ProcessStoryActivityList" out-map="detail"
                            in-map="[processStoryId:processStoryActivity.detailProcessStoryId,showSubstories:showSubstories,
                            organizationId:organizationId]"/>
                    <entity-find-one entity-name="coarchy.ProcessStory" value-field="detailProcessStory" auto-field-map="[processStoryId:processStoryActivity.detailProcessStoryId]"/>
                    <set field="detailProcessStoryName" from="detailProcessStory.name"/>
                    <entity-find entity-name="coarchy.ProcessStoryActivityDetail" list="setupDetailProcessStoryActivityList">
                        <econdition field-name="processStoryId" from="processStoryActivity.detailProcessStoryId"/>
                        <select-field field-name="activityId,condition,action"/>
                        <order-by field-name="sequenceNum"/></entity-find>
                    <iterate list="setupDetailProcessStoryActivityList" entry="detailProcessStoryActivity">
                        <entity-find entity-name="coarchy.ActivityActorDetail" list="detailActivityActorList">
                            <econdition field-name="activityId" from="detailProcessStoryActivity.activityId"/>
                            <order-by field-name="name"/></entity-find>
                        <script>detailProcessStoryActivityList.add([sequenceNum:detailProcessStoryActivity.sequenceNum,condition:detailProcessStoryActivity.condition,actorNames:detailActivityActorList*.name,action:detailProcessStoryActivity.action])</script>
                    </iterate>
                </if>

                <script>processStoryActivityList.add([processStoryId:processStoryActivity.processStoryId,
                    sequenceNum:processStoryActivity.sequenceNum,condition:processStoryActivity.condition,
                    actorNames:activityActorList*.name,action:processStoryActivity.action,detailProcessStoryId:detailProcessStoryId,
                    detailProcessStoryName:detailProcessStoryName,detailProcessStoryActivityList:detail?.processStoryActivityList?.clone()])</script>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="Activity">
        <in-parameters>
            <parameter name="processStoryId" required="true"/>
            <parameter name="organizationId" required="true"/>
            <parameter name="condition"/>
            <parameter name="actorIdList" type="List"/>
            <parameter name="action"/>
            <parameter name="sequenceNum"/>
            <parameter name="implementationId"/>
            <parameter name="ignoreNoAction" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="activityId"/>
            <parameter name="processStoryActivityId"/>
            <parameter name="sequenceNum"/>
        </out-parameters>
        <actions>
            <if condition="!ignoreNoAction &amp;&amp; !action"><return type="warning" message="${ec.resource.expand('CoarchyProcessActivityActionRequired',null)}"/></if>
            <service-call name="create#coarchy.Activity" in-map="[condition:condition?.trim(), action:action?.trim(), organizationId:organizationId, implementationId:implementationId]" out-map="newActivity"/>
            <set field="activityId" from="newActivity.activityId"/>

            <set field="newSequenceNum" from="sequenceNum"/>
            <if condition="!sequenceNum">
                <entity-find entity-name="coarchy.ProcessStoryActivity" limit="1" list="processStoryActivityList">
                    <econdition field-name="processStoryId"/>
                    <order-by field-name="-sequenceNum"/></entity-find>
                <set field="highestProcessStoryActivity" from="processStoryActivityList?.getFirst()"/>
                <set field="newSequenceNum" from="highestProcessStoryActivity?.sequenceNum != null ? highestProcessStoryActivity?.sequenceNum + 1 : 0"/>
            </if>
            <service-call name="create#coarchy.ProcessStoryActivity" in-map="[processStoryId:processStoryId,activityId:newActivity.activityId, sequenceNum:newSequenceNum, organizationId:organizationId]" out-map="newStoryActivity"/>
            <set field="processStoryActivityId" from="newStoryActivity.processStoryActivityId"/>
            <set field="sequenceNum" from="newStoryActivity.sequenceNum"/>

            <if condition="actorIdList?.size() != 0 &amp;&amp; actorIdList instanceof String">
                <then>
                    <service-call name="store#coarchy.ActivityActor" in-map="[activityId:newActivity.activityId, actorId:actorIdList, organizationId:organizationId]"/>
                </then>
                <else>
                    <iterate list="actorIdList" entry="actorId">
                        <service-call name="store#coarchy.ActivityActor" in-map="[activityId:newActivity.activityId, actorId:actorId, organizationId:organizationId]"/>
                    </iterate>
                </else>
            </if>
        </actions>
    </service>
    <service verb="update" noun="Activity">
        <in-parameters>
            <parameter name="activityId" required="true"/>
            <parameter name="condition"/>
            <parameter name="actorIdList" type="List"/>
            <parameter name="action" required="true"/>
            <parameter name="implementationId"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <actions>
<!--            <log level="warn" message="update activity context.toString() ${context.toString()}"/>-->
            <service-call name="update#coarchy.Activity" in-map="[activityId:activityId,condition:condition.trim(),action:action.trim(),implementationId:implementationId]"/>
            <entity-find entity-name="coarchy.ActivityActorDetail" list="activityActorList">
                <econdition field-name="activityId"/>
                <order-by field-name="name"/></entity-find>
            <set field="actorIdServerList" from="activityActorList*.actorId"/>
            <if condition="actorIdServerList">
                <set field="actorIdDeleteList" from="actorIdServerList - actorIdList?:[]"/>
<!--                                    <log level="warn" message="actorIdDeleteList ${actorIdDeleteList}"/>-->
                <iterate list="actorIdDeleteList" entry="actorIdDelete">
                    <service-call name="delete#coarchy.ActivityActor" in-map="[activityId:activityId,actorId:actorIdDelete]"/>
                </iterate>
            </if>

            <set field="actorIdCreateList" from="actorIdList?:[] - actorIdDeleteList?:[]"/>
            <if condition="actorIdCreateList instanceof String">
                <then>
                    <service-call name="store#coarchy.ActivityActor" in-map="[activityId:activityId, actorId:actorIdCreateList, organizationId:organizationId]"/></then>
                <else>
                    <iterate list="actorIdCreateList" entry="actorIdCreate">
                        <service-call name="store#coarchy.ActivityActor" in-map="[activityId:activityId, actorId:actorIdCreate, organizationId:organizationId]"/>
                    </iterate>
                </else>
            </if>
        </actions>
    </service>

    <service verb="create" noun="ChecklistProcessStory">
        <in-parameters>
            <parameter name="processStoryId" required="true"/>
            <parameter name="name" required="true"/>
<!--            <parameter name="recurStartCron"/>-->
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="rootWorkEffortId"/>
            <parameter name="taskWorkEffortIdList"/>
        </out-parameters>
        <actions><service-call name="coarchy.CoarchyServices.create#Checklist" in-map="context" out-map="context"/></actions>
    </service>

    <service verb="create" noun="Checklist">
        <in-parameters>
            <parameter name="processStoryId" required="true"/>
            <parameter name="name"/>
<!--            <parameter name="recurStartCron"/>-->
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="rootWorkEffortId"/>
            <parameter name="taskWorkEffortIdList"/>
        </out-parameters>
        <actions>
            <set field="name" from="name?.trim()"/>
            <if condition="estimatedStartDate != null &amp;&amp; estimatedCompletionDate != null &amp;&amp;
                           estimatedCompletionDate &lt; estimatedStartDate">
                <return error="true" message="${ec.resource.expand('CoarchyProcessChecklistInvalidDate', null)}"/>
            </if>
            <entity-find entity-name="coarchy.ProcessStoryActivityDetail" list="processStoryActivityList">
                <econdition field-name="processStoryId"/>
                <select-field field-name="activityId,condition,action"/>
                <order-by field-name="sequenceNum"/></entity-find>
            <if condition="processStoryActivityList?.size() == 0">
                <return error="true" message="${ec.resource.expand('CoarchyProcessChecklistActivityRequired', null)}"/></if>

            <if condition="!name">
                <entity-find-one entity-name="coarchy.ProcessStory" value-field="processStory" auto-field-map="[processStoryId:processStoryId]"/>
                <set field="name" from="processStory.name"/>
            </if>
<!--            <service-call name="create#mantle.work.effort.WorkEffort" in-map="[workEffortName:name,recurStartCron:recurStartCron,ownerPartyId:organizationId,workEffortTypeEnumId:'WetProject',actualStartDate:ec.user.nowTimestamp]" out-map="projectWorkEffort"/>-->
            <service-call name="create#mantle.work.effort.WorkEffort" out-map="projectWorkEffort" in-map="[workEffortName:name,
                ownerPartyId:organizationId,workEffortTypeEnumId:'WetChecklist',actualStartDate:ec.user.nowTimestamp]"/>
            <set field="rootWorkEffortId" from="projectWorkEffort.workEffortId"/>
            <set field="projectFromDate" from="ec.user.nowTimestamp"/>
            <service-call name="create#mantle.work.effort.WorkEffortParty"
                    in-map="[workEffortId:projectWorkEffort.workEffortId, partyId:ec.user.userAccount.partyId,
                            roleTypeId:'Owner', fromDate:projectFromDate]"/>

            <set field="taskWorkEffortIdList" from="[]"/>
            <iterate list="processStoryActivityList" entry="processStoryActivity">
                <if condition="processStoryActivity.action">
                    <entity-find entity-name="coarchy.ActivityActorDetail" list="activityActorList">
                        <econdition field-name="activityId" from="processStoryActivity.activityId"/>
                        <order-by field-name="name"/></entity-find>

                    <set field="processStoryActivity" from="processStoryActivity.getMap() + [actorNames:activityActorList*.name]"/>
                    <set field="taskName" from="ec.resource.template('component://coarchy/template/Activity.html.ftl', '.ftl')"/>
                    <if condition="activityActorList.size() == 0">
                        <service-call name="delete#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:projectWorkEffort.workEffortId,
                            partyId:ec.user.userAccount.partyId,roleTypeId:'Owner', fromDate:projectFromDate]"/>
                        <iterate list="taskWorkEffortIdList" entry="taskWorkEffortId">
                            <service-call name="delete#mantle.work.effort.WorkEffort" in-map="[workEffortId:taskWorkEffortId]"/></iterate>
                        <service-call name="delete#mantle.work.effort.WorkEffort" in-map="[workEffortId:projectWorkEffort.workEffortId]"/>
                        <return error="true" message="${ec.resource.expand('CoarchyProcessChecklistSubActivityRequired', null, [taskName:taskName, name:name])}"/></if>

                    <entity-find entity-name="coarchy.ActorPartyDetail" list="actorPartyList">
                        <econdition field-name="actorId" from="activityActorList*.actorId"/></entity-find>
                    <if condition="actorPartyList.size() == 0">
                        <service-call name="delete#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:projectWorkEffort.workEffortId,
                            partyId:ec.user.userAccount.partyId,roleTypeId:'Owner', fromDate:projectFromDate]"/>
                        <iterate list="taskWorkEffortIdList" entry="taskWorkEffortId">
                            <service-call name="delete#mantle.work.effort.WorkEffort" in-map="[workEffortId:taskWorkEffortId]"/></iterate>
                        <service-call name="delete#mantle.work.effort.WorkEffort" in-map="[workEffortId:projectWorkEffort.workEffortId]"/>
                        <return error="true" message="${ec.resource.expand('CoarchyProcessChecklistActivityUsersRequired', null, [activityActorList:activityActorList])}"/></if>

                    <set field="seqName" value="Project_${projectWorkEffort.workEffortId}"/>
                    <set field="workEffortId" value="${projectWorkEffort.workEffortId}-${ec.entity.sequencedIdPrimary(seqName, null, 10)}"/>
                    <service-call name="create#mantle.work.effort.WorkEffort" out-map="taskWorkEffort" in-map="[
                        rootWorkEffortId:projectWorkEffort.workEffortId,workEffortId:workEffortId,workEffortName:taskName,
                        ownerPartyId:organizationId,workEffortTypeEnumId:'WetChecklistItem',activityId:processStoryActivity.activityId]"/>

                    <script>taskWorkEffortIdList.add(taskWorkEffort.workEffortId)</script>
                </if>
            </iterate>
        </actions>
    </service>
    <service verb="update" noun="Checklist">
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <parameter name="workEffortName" required="true"/>
<!--            <parameter name="recurStartCron"/>-->
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <actions>
            <set field="workEffortName" from="workEffortName.trim()"/>
<!--            <service-call name="update#mantle.work.effort.WorkEffort" in-map="[workEffortId:workEffortId,workEffortName:workEffortName,recurStartCron:recurStartCron]"/>-->
            <service-call name="update#mantle.work.effort.WorkEffort" in-map="[workEffortId:workEffortId,workEffortName:workEffortName]"/>
        </actions>
    </service>
    <service verb="update" noun="Task">
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <parameter name="assignedPartyIdList" type="List" required="true"/>
            <parameter name="resolutionEnumId"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="task" auto-field-map="[workEffortId:workEffortId]"/>
            <if condition="!task"><return type="warning" message="Task not found"/></if>

            <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="workEffortPartyList">
                <date-filter/><econdition field-name="workEffortId"/>
                <econdition field-name="roleTypeId" value="Assignee"/>
                <order-by field-name="-fromDate"/>
            </entity-find>

            <set field="partyIdServerList" from="workEffortPartyList*.partyId"/>

            <if condition="partyIdServerList">
                <set field="partyIdDeleteList" from="partyIdServerList - assignedPartyIdList?:[]"/>

                <!--                                                    <log level="warn" message="partyIdDeleteList ${partyIdDeleteList}"/>-->
                <iterate list="partyIdDeleteList" entry="partyIdDelete">
<!--                    <log level="warn" message="workEffortPartyList.find{it.partyId==partyIdDelete}.fromDate ${workEffortPartyList.find{it.partyId==partyIdDelete}.fromDate}"/>-->
                    <service-call name="update#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:workEffortId,partyId:partyIdDelete,roleTypeId:'Assignee',fromDate:workEffortPartyList.find{it.partyId==partyIdDelete}.fromDate,thruDate:ec.user.nowTimestamp]"/>
                </iterate>
            </if>
            <set field="baseLinkUrl" from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : 'https://coarchy.com'"/>

            <set field="partyIdCreateList" from="assignedPartyIdList?:[] - partyIdDeleteList?:[]"/>
            <!--                        <log level="warn" message="update#Actor context.toString() ${context.toString()}"/>-->
            <if condition="partyIdCreateList instanceof String">
                <then>
                    <service-call name="store#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:workEffortId,partyId:partyIdCreateList,roleTypeId:'Assignee']"/>
                </then><else>
                <iterate list="partyIdCreateList" entry="partyIdCreate">
                    <service-call name="store#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:workEffortId,partyId:partyIdCreate,roleTypeId:'Assignee',fromDate:workEffortPartyList.find{it.partyId==partyIdCreate}?.fromDate?:ec.user.nowTimestamp]"/>

                    <entity-find entity-name="mantle.work.effort.WorkEffort" list="taskList" limit="1">
                        <econdition field-name="rootWorkEffortId" from="task.rootWorkEffortId"/>
                        <econdition field-name="workEffortId" operator="less" from="workEffortId"/>
                        <order-by field-name="-workEffortId"/>
                    </entity-find>
<!--                    <log level="warn" message="workEffortId ${workEffortId} taskList ${taskList}"/>-->
                    <!-- Maybe send an assigned email, but on second thought it sounds annoying -->
<!--                    <if condition="ec.user.userAccount.partyId!=partyIdCreate &amp;&amp; (taskList.size() == 0 || !partyIdServerList.containsAll(assignedPartyIdList))">-->
                    <if condition="ec.user.userAccount.partyId!=partyIdCreate &amp;&amp; (taskList.size() == 0 || taskList.getFirst().resolutionEnumId!=null)">
                        <entity-find entity-name="moqui.security.UserAccount" list="userAccountList" limit="1">
                            <econdition field-name="partyId" from="partyIdCreate"/>
                            <select-field field-name="emailAddress"/>
                            <order-by field-name="-lastUpdatedStamp"/></entity-find>

                        <if condition="userAccountList?.getFirst()?.emailAddress == null"><then>
                            <message type="danger">Can't send email to notify about assignment</message>
                        </then><else>
                            <service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[
                                contactListId:'CoarchyTaskReminder',emailTemplateId:'TASK_ASSIGNED_NOTIFICATION',
                                partyId:partyIdCreate,toAddresses:userAccountList.getFirst().emailAddress,
                                bodyParameters:[linkUrl:baseLinkUrl+'/coapp/Checklist?checklistId='+task.rootWorkEffortId,baseLinkUrl:baseLinkUrl,
                                title:'You\'ve been assigned a task'+(ec.user.userAccount.userFullName?' by '+ec.user.userAccount.userFullName:'')]]" out-map="context"/>
                        </else></if>
                    </if>
                </iterate>
            </else></if>

<!--            <log level="warn" message="partyIdServerList.containsAll(assignedPartyIdList) ${partyIdServerList.containsAll(assignedPartyIdList)}"/>-->
<!--            <log level="warn" message="assignedPartyIdList ${assignedPartyIdList} partyIdServerList ${partyIdServerList}"/>-->

            <if condition="partyIdServerList.containsAll(assignedPartyIdList) &amp;&amp; workEffortPartyList.find{it.partyId == ec.user.userAccount.partyId} != null &gt; 0 &amp;&amp; resolutionEnumId">
                <if condition="resolutionEnumId">
                    <set field="actualCompletionDate" from="ec.user.nowTimestamp"/>
                    <service-call name="update#mantle.work.effort.WorkEffort" in-map="[workEffortId:workEffortId,resolutionEnumId:resolutionEnumId,actualCompletionDate:actualCompletionDate]"/>
<!--                    <log message="Updating task ${workEffortId} to ${resolutionEnumId}"/>-->
                </if>

                <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="project" auto-field-map="[workEffortId:task.rootWorkEffortId]"/>
                <if condition="!project.actualCompletionDate">
                    <entity-find-count entity-name="mantle.work.effort.WorkEffort" count-field="taskCount">
                        <econdition field-name="rootWorkEffortId" from="task.rootWorkEffortId"/></entity-find-count>
                    <entity-find-count entity-name="mantle.work.effort.WorkEffort" count-field="taskWithResolutionCount">
                        <econdition field-name="rootWorkEffortId" from="task.rootWorkEffortId"/>
                        <econdition field-name="resolutionEnumId" operator="is-not-null"/></entity-find-count>
                    <if condition="taskWithResolutionCount == taskCount">
                        <service-call name="update#mantle.work.effort.WorkEffort" in-map="[workEffortId:task.rootWorkEffortId,actualCompletionDate:ec.user.nowTimestamp]"/>
<!--                        <log message="Completing project ${task.rootWorkEffortId}"/>-->
                        <else>
                            <entity-find entity-name="mantle.work.effort.WorkEffort" list="taskList" limit="1">
                                <econdition field-name="rootWorkEffortId" from="task.rootWorkEffortId"/>
                                <econdition field-name="workEffortId" operator="greater"/>
                                <order-by field-name="workEffortId"/></entity-find>

                            <if condition="taskList?.size() &gt; 0 &amp;&amp; taskList?.getFirst()?.resolutionEnumId == null">
                                <entity-find entity-name="mantle.work.effort.WorkEffortAndPartyDetail" list="userAccountList">
                                    <date-filter/><econdition field-name="workEffortId" from="taskList?.getFirst()?.workEffortId"/>
                                    <econdition field-name="roleTypeId" value="Assignee"/>
                                    <select-field field-name="emailAddress,partyId"/>
                                    <order-by field-name="-fromDate"/></entity-find>

                                <if condition="userAccountList.size() &gt; 0 &amp;&amp;
                                        userAccountList?.getFirst()?.partyId != ec.user.userAccount.partyId
                                        &amp;&amp; userAccountList?.getFirst()?.emailAddress != null">
                                    <service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[
                                        contactListId:'CoarchyTaskReminder',emailTemplateId:'TASK_NOTIFICATION',
                                        partyId:userAccountList?.getFirst()?.partyId,
                                        toAddresses:userAccountList.getFirst().emailAddress,
                                        bodyParameters:[linkUrl:baseLinkUrl+'/coapp/Checklist?checklistId='+taskList?.getFirst().rootWorkEffortId,
                                        baseLinkUrl:baseLinkUrl,
                                        title:'Task '+taskList?.getFirst().workEffortName+' is ready']]" out-map="context"/>
                                </if>

                                <entity-find entity-name="mantle.work.effort.WorkEffortAndPartyDetail" list="userAccountOwnerList" limit="1">
                                    <date-filter/><econdition field-name="workEffortId" from="task.rootWorkEffortId"/>
                                    <econdition field-name="roleTypeId" value="Owner"/>
                                    <select-field field-name="emailAddress,partyId"/>
                                    <order-by field-name="-fromDate"/></entity-find>

                                <if condition="(userAccountList.size() == 0)">
                                    <if condition="(userAccountOwnerList.size() &gt; 0) &amp;&amp;
                                        userAccountOwnerList?.getFirst()?.partyId != ec.user.userAccount.partyId
                                        &amp;&amp; userAccountOwnerList?.getFirst()?.emailAddress != null">
                                        <service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[
                                            contactListId:'CoarchyTaskReminder',emailTemplateId:'TASK_NEEDS_ASSIGNMENT_NOTIFICATION',
                                            partyId:userAccountOwnerList?.getFirst()?.partyId,
                                            toAddresses:userAccountOwnerList.getFirst().emailAddress,
                                            bodyParameters:[linkUrl:baseLinkUrl+'/coapp/Checklist?checklistId='+taskList?.getFirst().rootWorkEffortId,
                                            baseLinkUrl:baseLinkUrl,
                                            title:'Task '+taskList?.getFirst().workEffortName+' is ready to be assigned']]" out-map="context"/>
                                    </if>
                                </if>
                            </if>
                        </else>
                    </if>
                </if>
            </if>

        </actions>
    </service>
    <service verb="assign" noun="AllTasks">
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <parameter name="actorId" required="true"/>
            <parameter name="partyId" required="true"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="workEffortId"/>
            <parameter name="returnToScreen"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="coarchy.WorkEffortActivityDetail" list="taskList" distinct="true">
                <date-filter/><econdition field-name="rootWorkEffortId" from="workEffortId"/>
                <econdition field-name="workEffortTypeEnumId" value="WetChecklistItem"/>
                <econdition field-name="workEffortTypeEnumId" value="WetChecklistItem"/>
                <econdition field-name="actorId"/>
                <econdition field-name="roleTypeId" operator="is-null"/>
                <econdition field-name="resolutionEnumId" operator="is-null"/>
                <select-field field-name="workEffortId"/>
                <order-by field-name="workEffortId"/></entity-find>
            <if condition="!taskList"><return type="warning" message="No tasks found"/></if>

            <iterate list="taskList" entry="task">
                <service-call name="coarchy.CoarchyServices.update#Task" in-map="[workEffortId:task.workEffortId,assignedPartyIdList:[partyId],organizationId:organizationId]"/>
            </iterate>

            <entity-find-count entity-name="WorkEffort" count-field="workEffortCount" distinct="true">
                <econdition field-name="rootWorkEffortId" from="workEffortId"/>
                <econdition field-name="workEffortTypeEnumId" value="WetChecklistItem"/>
                <select-field field-name="workEffortId"/></entity-find-count>
            <entity-find-count entity-name="WorkEffortAndParty" count-field="workEffortPartyCount" distinct="true">
                <date-filter/><econdition field-name="rootWorkEffortId" from="workEffortId"/>
                <econdition field-name="roleTypeId" value="Assignee"/>
                <select-field field-name="workEffortId,roleTypeId"/></entity-find-count>
            <set field="returnToScreen" from="workEffortCount==workEffortPartyCount"/>
        </actions>
    </service>

    <service verb="create" noun="Actor">
        <in-parameters>
            <parameter name="name" required="true"/>
            <parameter name="description"/>
            <parameter name="partyIdList" type="List"/>
            <parameter name="organizationId" required="true"/>
            <parameter name="isOwner" required="true" type="Boolean"/>
        </in-parameters>
        <out-parameters>
            <parameter name="actorId"/>
            <parameter name="partyIdList" type="List"/>
        </out-parameters>
        <actions>
            <set field="name" from="name.trim()"/>
            <set field="description" from="description?.trim()"/>
            <entity-find entity-name="coarchy.Actor" list="actorList" limit="20">
                <!-- NOTE: ignore case but don't do like for contains, makes things like "Customer" after "Placing Customer" an error -->
                <econdition field-name="name" from="name" ignore-case="true"/>
            </entity-find>
            <if condition="actorList"><return type="danger" message="Actor '${actorList?.getFirst()?.name}' already exists"/></if>

            <service-call name="create#coarchy.Actor" in-map="[name:name,description:description,organizationId:organizationId]" out-map="context"/>
            <if condition="isOwner">
                <iterate list="partyIdList" entry="partyId">
                    <service-call name="create#coarchy.ActorParty" in-map="[actorId:actorId,partyId:partyId,organizationId:organizationId]"/>
                </iterate>
            </if>
        </actions>
    </service>
    <service verb="update" noun="Actor">
        <in-parameters>
            <parameter name="actorId" required="true"/>
            <parameter name="name" required="true"/>
            <parameter name="description"/>
            <parameter name="partyIdList" type="List"/>
            <parameter name="organizationId" required="true"/>
            <parameter name="isOwner" required="true" type="Boolean"/>
        </in-parameters>
        <out-parameters>
            <parameter name="actorId"/>
        </out-parameters>
        <actions>
            <set field="name" from="name.trim()"/>
            <set field="description" from="description?.trim()"/>
            <entity-find entity-name="coarchy.Actor" list="actorList" limit="20">
                <!-- NOTE: ignore case but don't do like for contains, makes things like "Customer" after "Placing Customer" an error -->
                <econdition field-name="actorId" operator="not-equals"/>
                <econdition field-name="name" from="name" ignore-case="true"/>
            </entity-find>
            <if condition="actorList"><return type="danger" message="Actor '${actorList?.getFirst()?.name}' already exists"/></if>

            <service-call name="update#coarchy.Actor" in-map="[actorId:actorId,name:name,description:description,organizationId:organizationId]"/>

            <if condition="isOwner">
                <entity-find entity-name="coarchy.ActorParty" list="actorPartyList">
                    <econdition field-name="actorId"/>
                    <order-by field-name="actorId"/>
                </entity-find>

                <set field="partyIdServerList" from="actorPartyList*.partyId"/>
                <if condition="partyIdServerList">
                    <set field="partyIdDeleteList" from="partyIdServerList - partyIdList?:[]"/>

                    <!--                                                    <log level="warn" message="partyIdDeleteList ${partyIdDeleteList}"/>-->
                    <iterate list="partyIdDeleteList" entry="partyIdDelete">
                        <service-call name="delete#coarchy.ActorParty" in-map="[actorId:actorId,partyId:partyIdDelete]"/>
                    </iterate>
                </if>

                <set field="partyIdCreateList" from="partyIdList?:[] - partyIdDeleteList?:[]"/>
                <!--                        <log level="warn" message="update#Actor context.toString() ${context.toString()}"/>-->
                <if condition="partyIdCreateList instanceof String">
                    <then>
                        <service-call name="store#coarchy.ActorParty" in-map="[actorId:actorId, partyId:partyIdCreateList, organizationId:organizationId]"/>
                    </then><else>
                    <iterate list="partyIdCreateList" entry="partyIdCreate">
                        <service-call name="store#coarchy.ActorParty" in-map="[actorId:actorId, partyId:partyIdCreate, organizationId:organizationId]"/>
                    </iterate>
                </else></if>
            </if>
        </actions>
    </service>

    <service verb="create" noun="ValueStatement">
        <in-parameters>
            <parameter name="value" required="true"/>
            <parameter name="typeEnumId" required="true"/>
            <parameter name="organizationId" required="true"/>
            <parameter name="tagIdList" type="List" default="[]"/>
        </in-parameters>
        <out-parameters>
            <parameter name="valueStatementId"/>
        </out-parameters>
        <actions>
            <set field="value" from="value.trim()"/>
            <entity-find entity-name="coarchy.ValueStatement" list="valueStatementList" limit="20">
                <!-- NOTE: ignore case but don't do like for contains, makes things like "Customer" after "Placing Customer" an error -->
                <econdition field-name="value" from="value" ignore-case="true"/>
            </entity-find>
            <if condition="valueStatementList"><return type="danger" message="Statement '${valueStatementList?.getFirst()?.value}' already exists"/></if>

            <entity-find entity-name="coarchy.ValueStatement" list="valueStatementList" limit="1">
                <!-- NOTE: ignore case but don't do like for contains, makes things like "Customer" after "Placing Customer" an error -->
                <order-by field-name="-sequenceNum,value"/>
            </entity-find>

            <service-call name="create#coarchy.ValueStatement" in-map="[value:value,typeEnumId:typeEnumId,
                sequenceNum:valueStatementList.getFirst()?.sequenceNum?valueStatementList.getFirst()?.sequenceNum+1:1,organizationId:organizationId]" out-map="context"/>

            <iterate list="tagIdList" entry="tagId">
                <service-call name="coarchy.CoarchyServices.create#ValueStatementTag" in-map="[tagId:tagId,organizationId:organizationId,valueStatementId:valueStatementId]"/>
            </iterate>
        </actions>
    </service>
    <service verb="create" noun="ActivityValue">
        <in-parameters>
            <parameter name="activityId" required="true"/>
            <parameter name="valueIdList" type="List"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="valueStatementId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="coarchy.ValueStatementActivity" list="valueStatementActivityList">
                <econdition field-name="activityId"/>
                <order-by field-name="name"/></entity-find>
            <set field="valueIdServerList" from="valueStatementActivityList*.valueStatementId"/>
            <if condition="valueIdServerList">
                <set field="valueIdDeleteList" from="valueIdServerList - valueIdList?:[]"/>

                <!--                                    <log level="warn" message="activityIdDeleteList ${activityIdDeleteList}"/>-->
                <iterate list="valueIdDeleteList" entry="valueIdDelete">
                    <set field="valueStatementActivity" from="valueStatementActivityList.find{it.valueStatementId == valueIdDelete}"/>
                    <if condition="valueStatementActivity"><then>
                        <service-call name="delete#coarchy.ValueStatementActivity" in-map="[valueStatementActivityId:valueStatementActivity.valueStatementActivityId]"/>
                    </then><else>
                        <log level="warn" message="Unable to delete value connection ${valueIdDelete}"/>
                        <message type="warning" error="true">${ec.resource.expand('CoarchyProcessActivityValueDeleteError', null)}</message>
                    </else></if>
                </iterate>
            </if>

            <set field="valueIdCreateList" from="valueIdList?:[] - valueIdDeleteList?:[]"/>
            <!--            <log level="warn" message="update#ValueStatement context.toString() ${context.toString()}"/>-->
            <if condition="valueIdCreateList instanceof String">
                <then>
                    <service-call name="store#coarchy.ValueStatementActivity" in-map="[valueStatementActivityId:valueStatementActivityList.find{it.valueStatementId == valueIdCreateList}?.valueStatementActivityId,valueStatementId:valueIdCreateList, activityId:activityId, organizationId:organizationId]"/>
                </then><else>
                <iterate list="valueIdCreateList" entry="valueIdCreate">
                    <service-call name="store#coarchy.ValueStatementActivity" in-map="[valueStatementActivityId:valueStatementActivityList.find{it.valueStatementId == valueIdCreate}?.valueStatementActivityId,valueStatementId:valueIdCreate, activityId:activityId, organizationId:organizationId]"/>
                </iterate>
            </else>
            </if>
        </actions>
    </service>

    <service verb="create" noun="ValueStatementActivity">
        <in-parameters>
            <parameter name="activityIdList" type="List" required="true"/>
            <parameter name="valueStatementId" required="true"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="coarchy.ValueStatementActivity" list="valueStatementActivityList">
                <econdition field-name="valueStatementId"/>
                <econdition field-name="activityId"/>
                <econdition field-name="organizationId"/>
                <order-by field-name="name"/>
            </entity-find>
            <if condition="valueStatementActivityList">
                <return />
            </if>
            <iterate list="activityIdList" entry="activityId">
                <service-call name="create#coarchy.ValueStatementActivity" in-map="[valueStatementId:valueStatementId, activityId:activityId, organizationId:organizationId]"/>            
            </iterate>
        </actions>
    </service>

    <service verb="update" noun="ValueStatement">
        <in-parameters>
            <parameter name="valueStatementId" required="true"/>
            <parameter name="value" required="true"/>
            <parameter name="activityIdList" type="List"/>
            <parameter name="tagIdList" type="List"/>
            <parameter name="typeEnumId"/>
            <parameter name="sequenceNum"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="valueStatementId"/>
        </out-parameters>
        <actions>
            <set field="value" from="value.trim()"/>
            <entity-find entity-name="coarchy.ValueStatement" list="valueStatementList" limit="20">
                <!-- NOTE: ignore case but don't do like for contains, makes things like "Customer" after "Placing Customer" an error -->
                <econdition field-name="valueStatementId" operator="not-equals"/>
                <econdition field-name="value" from="value" ignore-case="true"/>
            </entity-find>
            <if condition="valueStatementList"><return type="danger" message="Statement '${valueStatementList?.getFirst()?.value}' already exists"/></if>

            <service-call name="update#coarchy.ValueStatement" in-map="[valueStatementId:valueStatementId,value:value,typeEnumId:typeEnumId,sequenceNum:sequenceNum,organizationId:organizationId]" out-map="context"/>

            <entity-find entity-name="coarchy.ValueStatementActivity" list="valueStatementActivityList">
                <econdition field-name="valueStatementId"/>
                <order-by field-name="name"/></entity-find>
            <set field="activityIdServerList" from="valueStatementActivityList*.activityId"/>
            <if condition="activityIdServerList">
                <set field="activityIdDeleteList" from="activityIdServerList - activityIdList?:[]"/>

                <!--                                    <log level="warn" message="activityIdDeleteList ${activityIdDeleteList}"/>-->
                <iterate list="activityIdDeleteList" entry="activityIdDelete">
                    <entity-find-one entity-name="ValueStatementActivity" value-field="valueStatementActivity" auto-field-map="[activityId:activityIdDelete,valueStatementId:valueStatementId]"/>
                    <if condition="valueStatementActivity"><then>
                        <service-call name="delete#coarchy.ValueStatementActivity" in-map="[valueStatementActivityId:valueStatementActivity.valueStatementActivityId]"/>
                    </then><else>
                        <message type="warning">Unable to delete activity connection ${activityId}</message>
                    </else></if>
                </iterate>
            </if>

            <set field="activityIdCreateList" from="activityIdList?:[] - activityIdDeleteList?:[]"/>
<!--            <log level="warn" message="update#ValueStatement context.toString() ${context.toString()}"/>-->
            <if condition="activityIdCreateList instanceof String">
                <then>
                    <entity-find-one entity-name="ValueStatementActivity" value-field="valueStatementActivity" auto-field-map="[activityId:activityIdCreateList,valueStatementId:valueStatementId]"/>
                    <service-call name="store#coarchy.ValueStatementActivity" in-map="[valueStatementActivityId:valueStatementActivity?.valueStatementActivityId,valueStatementId:valueStatementId, activityId:activityIdCreateList, organizationId:organizationId]"/>
                </then><else>
                    <iterate list="activityIdCreateList" entry="activityIdCreate">
                        <entity-find-one entity-name="ValueStatementActivity" value-field="valueStatementActivity" auto-field-map="[activityId:activityIdCreate,valueStatementId:valueStatementId]"/>
                        <service-call name="store#coarchy.ValueStatementActivity" in-map="[valueStatementActivityId:valueStatementActivity?.valueStatementActivityId,valueStatementId:valueStatementId, activityId:activityIdCreate, organizationId:organizationId]"/>
                    </iterate>
                </else>
            </if>

            <!-- tags -->
            <entity-find entity-name="coarchy.ValueStatementTag" list="statementTagList">
                <date-filter />
                <econdition field-name="valueStatementId"/>
                <econdition field-name="organizationId" />
            </entity-find>
            <set field="tagIdServerList" from="statementTagList*.tagId?:[]"/>

            <!-- delete extra tags -->
            <set field="tagIdDeleteList" from="tagIdServerList - (tagIdList?:[])"/>
            <iterate list="tagIdDeleteList" entry="tagIdDelete">
                <service-call name="coarchy.CoarchyServices.delete#ValueStatementTag" in-map="[valueStatementId:valueStatementId, tagId:tagIdDelete, organizationId:organizationId]"/>                  
            </iterate>

            <!-- create new tags -->
            <set field="tagIdCreateList" from="(tagIdList?:[]) - (tagIdDeleteList?:[])"/>
            <iterate list="tagIdCreateList" entry="tagIdCreate">
                <service-call name="coarchy.CoarchyServices.create#ValueStatementTag" in-map="[valueStatementId:valueStatementId, tagId:tagIdCreate, organizationId:organizationId]"/>                  
            </iterate>           
        </actions>
    </service>
    <service verb="delete" noun="ValueStatement">
        <in-parameters>
            <parameter name="valueStatementId" required="true"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="valueStatementId"/>
        </out-parameters>
        <actions>
            <entity-find-count entity-name="coarchy.ValueStatementActivity" count-field="valueStatementActivityCount">
                <econdition field-name="valueStatementId"/></entity-find-count>
            <if condition="valueStatementActivityCount &gt; 0">
                <return type="warning" message="${ec.resource.expand('CoarchyProcessValueStatementDeleteError', null)}"/>
            </if>

            <!-- (delete/end) existing tags -->
            <entity-find entity-name="coarchy.ValueStatementTag" list="statementTagList" for-update="true">
                <date-filter />
                <econdition field-name="tagId" />
                <econdition field-name="valueStatementId" />
                <econdition field-name="organizationId" />
            </entity-find>

            <iterate list="statementTagList" entry="statementTag">
                <set field="statementTag.thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="statementTag" />
            </iterate>  

            <!-- delete value statement -->
            <entity-find-one entity-name="coarchy.ValueStatement" value-field="valueStatement" auto-field-map="[valueStatementId:valueStatementId,organizationId:organizationId]"/>

            <if condition="valueStatement">
                <service-call name="delete#coarchy.ValueStatement" in-map="[valueStatementId:valueStatementId]"/>
            </if>
        </actions>
    </service>

    <service verb="getOrCreate" noun="Tag">
        <in-parameters>
            <parameter name="description" required="true">
                <text-length min="1" />
                <matches regexp="(?&lt;=\s|^)(\w*[A-Za-z_]+\w*)" message="CoarchyTagInvalidFormat" />
                </parameter>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="tagId"/>
        </out-parameters>
        <actions>
            <set field="description" from="description.trim()"/>
            <entity-find entity-name="coarchy.Tag" list="tagList">
                <econdition field-name="description" ignore-case="true" />
                <econdition field-name="organizationId" />
            </entity-find>

            <if condition="tagList?.size()">
                <set field="tagId" from="tagList[0].tagId"/>
                <else>
                    <service-call name="create#coarchy.Tag" in-map="[description:description, organizationId:organizationId]" out-map="context"/>
                </else>
            </if>
        </actions>
    </service>

    <service verb="create" noun="ValueStatementTag">
        <in-parameters>
            <parameter name="description">
                <matches regexp="(?&lt;=\s|^)(\w*[A-Za-z_]+\w*)" message="CoarchyTagInvalidFormat" />
            </parameter>
            <parameter name="tagId"/>
            <parameter name="organizationId" required="true"/>
            <parameter name="valueStatementId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="tagId"/>
        </out-parameters>
        <actions>
            <set field="description" from="(description?:'').trim()"/>
            <if condition="!tagId &amp;&amp; !description">
                <!-- internal error, shouldn't make it to the user -->
                <return error="true" message="Please specify at least one existing tag, or a new one."/>
            </if>
            <if condition="tagId">
                <!-- make sure tag id is valid to current org -->
                <entity-find entity-name="coarchy.Tag" list="tagList">
                    <econdition field-name="tagId"  />
                    <econdition field-name="organizationId" />
                </entity-find>
                <if condition="!tagList">
                <return error="true" message="Invalid tag specified."/>                    
                </if>
                <else>
                    <service-call name="coarchy.CoarchyServices.getOrCreate#Tag" in-map="[description:description, organizationId:organizationId]" out-map="context"/>
                </else>
            </if>
            <!-- now we should have a tag id in context -->
            <!-- delete existing tags -->
            <service-call name="coarchy.CoarchyServices.delete#ValueStatementTag" in-map="[tagId:tagId, valueStatementId:valueStatementId, organizationId:organizationId]" out-map="context"/>
           <!-- create tags -->
            <service-call name="create#coarchy.ValueStatementTag" in-map="[tagId:tagId, valueStatementId:valueStatementId, organizationId:organizationId, fromDate:ec.user.nowTimestamp]" out-map="context"/>
        </actions>
    </service>

    <service verb="delete" noun="ValueStatementTag">
        <in-parameters>
            <parameter name="tagId" required="true" />
            <parameter name="valueStatementId" required="true" />
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="coarchy.ValueStatementTag" list="statementTagList" for-update="true">
                <date-filter />
                <econdition field-name="tagId" />
                <econdition field-name="valueStatementId" />
                <econdition field-name="organizationId" />
            </entity-find>

            <iterate list="statementTagList" entry="statementTag">
                <set field="statementTag.thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="statementTag" />
            </iterate>           
        </actions>
    </service>
    
    <service verb="update" noun="User">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="actorIdList" type="List"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="coarchy.ActorParty" list="actorPartyList">
                <econdition field-name="partyId"/>
                <econdition field-name="organizationId"/>
            </entity-find>
            <set field="actorIdServerList" from="actorPartyList*.actorId"/>
            <if condition="actorIdServerList">
                <set field="actorIdDeleteList" from="actorIdServerList - actorIdList?:[]"/>
<!--                                                                    <log level="warn" message="actorIdDeleteList ${actorIdDeleteList}"/>-->
                <iterate list="actorIdDeleteList" entry="actorIdDelete">
                    <service-call name="delete#coarchy.ActorParty" in-map="[actorId:actorIdDelete,partyId:partyId]"/>
                </iterate>
            </if>
            <set field="actorIdCreateList" from="actorIdList?:[] - actorIdDeleteList?:[]"/>
            <!--                        <log level="warn" message="update#Actor context.toString() ${context.toString()}"/>-->
            <if condition="actorIdCreateList instanceof String">
                <then>
                    <service-call name="store#coarchy.ActorParty" in-map="[actorId:actorIdCreateList, partyId:partyId, organizationId:organizationId]"/>
                </then><else>
                <iterate list="actorIdCreateList" entry="actorIdCreate">
                    <service-call name="store#coarchy.ActorParty" in-map="[actorId:actorIdCreate, partyId:partyId, organizationId:organizationId]"/>
                </iterate>
            </else></if>
        </actions>
    </service>

    <service verb="update" noun="Vision">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="originStoryDescription"/>
            <parameter name="missionDescription"/>
            <parameter name="visionDescription"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
            <parameter name="originStoryContentId"/>
            <parameter name="missionContentId"/>
            <parameter name="visionContentId"/>
        </out-parameters>
        <actions>
            <set field="originStoryDescription" from="originStoryDescription.trim()"/>
            <set field="missionDescription" from="missionDescription.trim()"/>
            <set field="visionDescription" from="visionDescription.trim()"/>

            <entity-find entity-name="mantle.party.PartyContent" list="originStoryList" limit="1">
                <econdition field-name="partyId"/>
                <econdition field-name="partyContentTypeEnumId" value="PcntOriginStory"/>
                <order-by field-name="-contentDate"/></entity-find>
            <if condition="originStoryList.size() == 0"><then>
                <service-call name="create#mantle.party.PartyContent" out-map="originStoryContent" in-map="[partyId:partyId,partyContentTypeEnumId:'PcntOriginStory',description:originStoryDescription]"/>
                <set field="originStoryContentId" from="originStoryContent.partyContentId"/>
            </then><else>
                <set field="originStoryContentId" from="originStoryList.getFirst().partyContentId"/>
                <service-call name="update#mantle.party.PartyContent" out-map="originStoryContent" in-map="[partyContentId:originStoryContentId,description:originStoryDescription]"/>
            </else></if>

            <entity-find entity-name="mantle.party.PartyContent" list="missionList" limit="1">
                <econdition field-name="partyId"/>
                <econdition field-name="partyContentTypeEnumId" value="PcntMission"/>
                <order-by field-name="-contentDate"/></entity-find>
            <if condition="missionList.size() == 0"><then>
                <service-call name="create#mantle.party.PartyContent" out-map="missionContent" in-map="[partyId:partyId,partyContentTypeEnumId:'PcntMission',description:missionDescription]"/>
                <set field="missionContentId" from="missionContent.partyContentId"/>
            </then><else>
                <set field="missionContentId" from="missionList.getFirst().partyContentId"/>
                <service-call name="update#mantle.party.PartyContent" out-map="missionContent" in-map="[partyContentId:missionContentId,description:missionDescription]"/>
            </else></if>

            <entity-find entity-name="mantle.party.PartyContent" list="visionList" limit="1">
                <econdition field-name="partyId"/>
                <econdition field-name="partyContentTypeEnumId" value="PcntVision"/>
                <order-by field-name="-contentDate"/></entity-find>
            <if condition="visionList.size() == 0"><then>
                <service-call name="create#mantle.party.PartyContent" out-map="visionContent" in-map="[partyId:partyId,partyContentTypeEnumId:'PcntVision',description:visionDescription]"/>
                <set field="visionContentId" from="visionContent.partyContentId"/>
            </then><else>
                <set field="visionContentId" from="visionList.getFirst().partyContentId"/>
                <service-call name="update#mantle.party.PartyContent" out-map="visionContent" in-map="[partyContentId:visionContentId,description:visionDescription]"/>
            </else></if>
        </actions>
    </service>

    <service verb="add" noun="OrderProductQuantity" authenticate="anonymous-all">
        <!-- TODO had transaction="cache" but causing issues with updating single Payment amount and sometimes part/header total when there are multiple promotions active (ie New Customer and BOGO) -->
        <description>A service for an add-to-cart sort of operation, including:
            1. create an Order if no orderId is passed in
            2. determine the price to charge for the Product (and update based on quantity as needed)
            3. find a OrderItem matching the productId, and if found update quantity
            4. if no existing OrderItem is found create a new OrderItem
        </description>
        <in-parameters>
            <parameter name="orderId"/>
            <parameter name="orderPartSeqId"/>
            <!-- OrderHeader settings -->
            <parameter name="productStoreId"/>
            <parameter name="currencyUomId"/>
            <parameter name="salesChannelEnumId"/>
            <!-- OrderPart settings -->
            <parameter name="customerPartyId"/>
            <parameter name="carrierPartyId"/><parameter name="shipmentMethodEnumId"/>

            <parameter name="productId" required="true"/>
            <parameter name="description"/>
            <parameter name="quantity" type="BigDecimal"><description>Defaults to 1 if addToQuantity=true (default)</description></parameter>
            <parameter name="addToQuantity" type="Boolean" default="true">
                <description>If true add to existing quantity, if false set quantity on current item</description></parameter>
            <parameter name="updateExisting" type="Boolean" default="true">
                <description>If true update existing item by productId, if false always create a new item</description></parameter>
            <parameter name="requireInventory" type="Boolean">
                <description>If true make sure inventory is available, if false don't check. If null defer to ProductStore.requireInventory setting.</description></parameter>
            <parameter name="itemTypeEnumId" default-value="ItemProduct"/>
            <parameter name="unitAmount" type="BigDecimal"/>
            <parameter name="standardCost" type="BigDecimal"/>
            <parameter name="requiredByDate" type="Timestamp"/>
            <parameter name="otherPartyProductId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
        </out-parameters>
        <actions>
            <if condition="quantity == null &amp;&amp; (addToQuantity || !updateExisting)"><set field="quantity" from="1.0"/></if>
            <!-- handle explicit zero quantity -->
            <if condition="(quantity == null || quantity &lt;= 0) &amp;&amp; updateExisting">
                <!-- do nothing if add -->
                <if condition="addToQuantity || !orderId"><return/></if>
                <!-- in set mode remove the item -->
                <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                    <econdition-object field="[orderId:orderId, orderPartSeqId:orderPartSeqId, productId:productId,
                        productConfigSavedId:null, forAssetId:null, selectedAmount:null]"/>
                </entity-find>
                <if condition="orderItemList">
                    <service-call name="mantle.order.OrderServices.delete#OrderItem"
                            in-map="[orderId:orderId, orderItemSeqId:orderItemList[0].orderItemSeqId]"/>
                </if>
                <return/>
            </if>

            <!-- lookup orderPartSeqId if not passed in -->
            <if condition="!orderPartSeqId &amp;&amp; orderId">
                <entity-find entity-name="mantle.order.OrderPart" list="orderPartList">
                    <econdition field-name="orderId"/>
                    <select-field field-name="orderPartSeqId"/>
                    <order-by field-name="orderPartSeqId"/>
                </entity-find>
                <set field="orderPartSeqId" from="orderPartList?.first?.orderPartSeqId"/>
            </if>

            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader" for-update="true"/>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart" for-update="true"/>

            <set field="productStoreId" from="productStoreId ?: orderHeader?.productStoreId"/>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"/>
            <set field="vendorPartyId" from="orderPart?.vendorPartyId ?: productStore?.organizationPartyId"/>
            <set field="currencyUomId" from="currencyUomId ?: productStore?.defaultCurrencyUomId"/>
            <set field="salesChannelEnumId" from="salesChannelEnumId ?: productStore?.defaultSalesChannelEnumId"/>

            <!-- if orderPart.customerPartyId always use it, otherwise default to customerPartyId parameter or current user's partyId -->
            <set field="customerPartyId" from="(orderPart?.customerPartyId ?: customerPartyId) ?: ec.user.userAccount?.partyId"/>

            <if condition="!orderId">
<!--                <if condition="customerPartyId">-->
<!--                    <entity-find entity-name="mantle.order.OrderHeaderAndPart" list="existingOrderList">-->
<!--                        <econdition field-name="statusId" value="OrderOpen"/>-->
<!--                        <econdition field-name="customerPartyId"/>-->
<!--                        <econdition field-name="vendorPartyId" ignore-if-empty="true"/>-->
<!--                        <econdition field-name="productStoreId" ignore-if-empty="true"/>-->
<!--                        <select-field field-name="orderId"/><select-field field-name="orderPartSeqId"/>-->
<!--                        <order-by field-name="-entryDate"/>&lt;!&ndash; get most recent open order &ndash;&gt;-->
<!--                    </entity-find>-->
<!--                    <if condition="existingOrderList">-->
<!--                        <set field="orderId" from="existingOrderList[0].orderId"/>-->
<!--                        <set field="orderPartSeqId" from="existingOrderList[0].orderPartSeqId"/>-->

<!--                        <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>-->
<!--                        <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>-->
<!--                    </if>-->
<!--                </if>-->
                <!-- no existing open (cart) order found? create one -->
                <if condition="!orderId">
                    <service-call name="mantle.order.OrderServices.create#Order" out-map="createOrderOut"
                            in-map="[currencyUomId:currencyUomId, productStoreId:productStoreId, salesChannelEnumId:salesChannelEnumId,
                                vendorPartyId:vendorPartyId, customerPartyId:customerPartyId, carrierPartyId:carrierPartyId,
                                shipmentMethodEnumId:shipmentMethodEnumId]"/>
                    <set field="orderId" from="createOrderOut.orderId"/>
                    <set field="orderPartSeqId" from="createOrderOut.orderPartSeqId"/>

                    <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
                    <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
                </if>
            </if>

            <!-- calculate the price based on quantity, etc, -->
            <if condition="unitAmount == null"><then>
                <!-- use PriceServices.get#OrderProductPrice instead of calling to get price directly, for pricePurposeEnumId override for recurring orders and other future behavior:
                <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceMap"
                              in-map="[productId:productId, quantity:quantity, priceUomId:currencyUomId,
                         productStoreId:productStoreId, customerPartyId:customerPartyId, vendorPartyId:vendorPartyId]"/>
                -->
                <service-call name="mantle.product.PriceServices.get#OrderProductPrice" out-map="priceMap"
                        in-map="[productId:productId, quantity:quantity, orderId:orderId, orderPartSeqId:orderPartSeqId]"/>

                <set field="unitAmount" from="priceMap.price"/>
                <set field="unitListPrice" from="priceMap.listPrice"/>
                <set field="productPriceId" from="priceMap.productPriceId"/>
                <set field="isModifiedPrice" value="N"/>
                <log message="OrderProductQuantity Calculated Order ${orderId}:${orderPartSeqId} Product ${productId} calculated unitAmount ${unitAmount} unitListPrice ${unitListPrice} productStoreId ${productStoreId} customerPartyId ${customerPartyId} vendorPartyId ${vendorPartyId}"/>
            </then><else>
                <log message="OrderProductQuantity Modified Order ${orderId}:${orderPartSeqId} Product ${productId} manual unitAmount ${unitAmount}"/>
                <set field="isModifiedPrice" value="Y"/>
            </else></if>

            <!-- look up otherPartyProductId if not specified - first from ProductParty then ProductPrice -->
            <if condition="!otherPartyProductId &amp;&amp; productId">
                <entity-find-one entity-name="mantle.party.PartyRole" value-field="vendorOrgRole">
                    <field-map field-name="partyId" from="orderPart.vendorPartyId"/>
                    <field-map field-name="roleTypeId" value="OrgInternal"/>
                </entity-find-one>
                <if condition="vendorOrgRole != null &amp;&amp; orderPart.customerPartyId"><then>
                    <entity-find entity-name="mantle.product.ProductParty" list="otherPartyItemIdList" cache="false">
                        <date-filter/><econdition field-name="productId"/>
                        <econdition field-name="partyId" from="orderPart.customerPartyId"/>
                        <econdition field-name="roleTypeId" value="Customer"/>
                        <econdition field-name="otherPartyItemId" operator="is-not-null"/>
                    </entity-find>
                    <if condition="otherPartyItemIdList"><then>
                        <set field="otherPartyProductId" from="otherPartyItemIdList[0].otherPartyItemId"/>
                    </then><else>
                        <!-- NOTE: consider removing this, ProductParty a better place, but would not be backward compatible -->
                        <entity-find entity-name="mantle.product.ProductPrice" list="otherPartyItemIdList" cache="false">
                            <date-filter/><econdition field-name="productId"/>
                            <econdition field-name="customerPartyId" from="orderPart.customerPartyId"/>
                            <econdition field-name="otherPartyItemId" operator="is-not-null"/>
                        </entity-find>
                        <if condition="otherPartyItemIdList">
                            <set field="otherPartyProductId" from="otherPartyItemIdList[0].otherPartyItemId"/></if>
                    </else></if>
                </then><else-if condition="vendorOrgRole == null &amp;&amp; orderPart.vendorPartyId">
                    <entity-find entity-name="mantle.product.ProductParty" list="otherPartyItemIdList" cache="false">
                        <date-filter/><econdition field-name="productId"/>
                        <econdition field-name="partyId" from="orderPart.vendorPartyId"/>
                        <econdition field-name="roleTypeId" value="Supplier"/>
                        <econdition field-name="otherPartyItemId" operator="is-not-null"/>
                    </entity-find>
                    <if condition="otherPartyItemIdList"><then>
                        <set field="otherPartyProductId" from="otherPartyItemIdList[0].otherPartyItemId"/>
                    </then><else>
                        <!-- NOTE: consider removing this, ProductParty a better place, but would not be backward compatible -->
                        <entity-find entity-name="mantle.product.ProductPrice" list="otherPartyItemIdList" cache="false">
                            <date-filter/><econdition field-name="productId"/>
                            <econdition field-name="vendorPartyId" from="orderPart.vendorPartyId"/>
                            <econdition field-name="otherPartyItemId" operator="is-not-null"/>
                        </entity-find>
                        <if condition="otherPartyItemIdList">
                            <set field="otherPartyProductId" from="otherPartyItemIdList[0].otherPartyItemId"/></if>
                    </else></if>
                </else-if></if>
            </if>

            <!-- find an OrderItem for the productId and increment quantity if found, otherwise create OrderItem with quantity -->
            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/>
                <econdition field-name="productId"/>
                <econdition field-name="itemTypeEnumId" value="ItemProduct"/>
                <econdition field-name="fromAssetId" operator="is-null"/>
                <econdition field-name="selectedAmount" operator="is-null"/>
                <!-- for future reference: <econdition field-name="productConfigSavedId" operator="is-null"/> -->
                <order-by field-name="orderItemSeqId"/>
            </entity-find>

            <if condition="orderItemList &amp;&amp; updateExisting"><then>
                <set field="orderItem" from="orderItemList.first"/>
                <set field="orderItemSeqId" from="orderItem.orderItemSeqId"/>
                <set field="orderPartSeqId" from="orderItem.orderPartSeqId" set-if-empty="false"/>
                <set field="unitAmount" from="unitAmount != null ? unitAmount : orderItem.unitAmount"/>
                <set field="standardCost" from="standardCost != null ? standardCost : orderItem.standardCost"/>
                <set field="quantity" from="addToQuantity ? quantity + orderItem.quantity : quantity"/>
                <!-- if requiredByDate on orderItem is less than that passed in, make sure to use it instead of the new later one -->
                <if condition="orderItem.requiredByDate &amp;&amp; requiredByDate &amp;&amp; orderItem.requiredByDate &lt; requiredByDate">
                    <set field="requiredByDate" from="orderItem.requiredByDate"/></if>
                <service-call name="mantle.order.OrderServices.update#OrderItem" in-map="context"/>
            </then><else>
                <service-call name="mantle.order.OrderServices.create#OrderItem" in-map="context" out-map="createOrderItemOut"/>
                <set field="orderItemSeqId" from="createOrderItemOut.orderItemSeqId"/>
            </else></if>
        </actions>
    </service>
    <service verb="buy" noun="OrganizationMonthCredits">
        <in-parameters>
            <parameter name="quantity" required="true" type="Integer"/>
            <parameter name="productId" default-value="c100000"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
        </out-parameters>
        <actions>
            <if condition="quantity &lt; 1"><return type="danger" message="${ec.resource.expand('CoarchyBuyCreditMin', null)}" error="true" public="true"/></if>
            <if condition="quantity &gt; 18"><return type="danger" message="${ec.resource.expand('CoarchyBuyCreditMax', null)}" error="true" public="true"/></if>
            <entity-find entity-name="mantle.product.store.ProductStoreProduct" list="productStoreProductList" limit="1">
                <econdition field-name="productId"/><order-by field-name="-lastUpdatedStamp"/></entity-find>
            <service-call name="coarchy.CoarchyServices.add#OrderProductQuantity" in-map="[quantity:quantity,productId:productId,
                productStoreId:productStoreProductList.getFirst()?.productStoreId,addToQuantity:false]" out-map="context"/>
        </actions>
    </service>
    <service verb="deposit" noun="OrderToFinancialAccount">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <auto-parameters entity-name="mantle.order.OrderHeader" include="nonpk"/>
        </in-parameters>
        <actions>
<!--            <log level="warn" message="deposit#OrderToFinancialAccount context.toString() ${context.toString()}"/>-->

            <entity-find entity-name="mantle.order.OrderItemAndPart" list="orderItemPartList">
                <econdition field-name="orderId"/>
                <econdition field-name="itemTypeEnumId" value="ItemProduct"/>
                <econdition field-name="productId" value="c100000"/>
                <order-by field-name="orderItemSeqId"/></entity-find>
            <if condition="orderItemPartList.size() == 0"><return type="warning" message="No Organization-Month Items found for order"/></if>

            <iterate list="orderItemPartList" entry="orderItemPart">
                <!-- find financial accounts for the user who bought the order items or create financial account if not already exists -->
                <service-call name="mantle.account.FinancialAccountServices.getOrCreate#FinancialAccount" in-map="[
                        finAccountTypeId:'OrganizationMonthCredit',organizationPartyId:'coarchy',
                        ownerPartyId:orderItemPart.customerPartyId,currencyUomId:'DSM']" out-map="context"/>

                <service-call name="mantle.account.FinancialAccountServices.deposit#FinancialAccount" in-map="[
                        finAccountId:finAccountId,amount:orderItemPart.quantity,orderId:orderId,
                        orderItemSeqId:orderItemPart.orderItemSeqId]"/>
            </iterate>

            <set field="partsAlreadyInvoiced" from="[]"/>
            <iterate list="orderItemPartList" entry="orderItemPart">
                <if condition="partsAlreadyInvoiced.contains(orderItemPart.orderPartSeqId)"><continue/></if>
                <service-call name="mantle.account.InvoiceServices.create#EntireOrderPartInvoice" in-map="[orderId:orderId,
                    orderPartSeqId:orderItemPart.orderPartSeqId,statusId:'InvoiceFinalized']" out-map="context"/>
                <set field="partsAlreadyInvoiced" from="partsAlreadyInvoiced + [orderItemPart.orderPartSeqId]"/>
            </iterate>

            <service-call name="mantle.order.OrderServices.complete#Order" in-map="[orderId:orderId]"/>

            <!-- Sales Journey Paying Customer user -->
            <service-call name="mantle.party.PartyServices.set#PartyClassification" in-map="[partyId:partyId,partyClassificationId:'PayingCustomer']" out-map="context"/>
        </actions>
    </service>
    <service verb="activateOrDeactivate" noun="Organization">
        <in-parameters>
            <parameter name="organizationPartyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="needsCredits" type="Boolean"/>
            <parameter name="creditsNeeded" type="Integer"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.Party" list="organizationPartyList">
                <econdition field-name="partyId" from="organizationPartyId"/>
                <econdition field-name="ownerPartyId" from="ec.user.userAccount.partyId"/>
            </entity-find>
            <if condition="organizationPartyList.size() == 0"><return type="danger" message="Cannot activate organization you do not own"/></if>

            <entity-find entity-name="mantle.party.PartyActivation" list="partyActivationList">
                <econdition field-name="partyId" from="organizationPartyId"/>
                <date-filter/></entity-find>

            <if condition="partyActivationList.size() == 0"><then>
                <service-call name="coarchy.CoarchyServices.check#PartyActivation" in-map="[userPartyId:ec.user.userAccount?.partyId, finAccountTypeId:'OrganizationMonthCredit']" out-map="context"/>
                <if condition="needsCredits"><then>
                    <return type="warning" public="true"
                            message="${ec.resource.expand('CoarchyOrgActivateInsuffCredits', null, [creditsNeeded: creditsNeeded])}"/>
                </then><else>
                    <service-call name="create#mantle.party.PartyActivation" in-map="[partyId:organizationPartyId,
                        fromDate:ec.user.nowTimestamp]"/>
                </else></if>
            </then><else>
                <service-call name="update#mantle.party.PartyActivation" in-map="[partyId:organizationPartyId,
                    fromDate:partyActivationList.getFirst().fromDate,thruDate:ec.user.nowTimestamp]"/>
            </else></if>
        </actions>
    </service>
    <service verb="calculate" noun="PartyActivationUsage">
        <description>This will find all the PartyActivation records that have any time between their from or thru date
            within the given period from and thru dates. For each day that there is activation time, if it is at least
            minActivationMinutesPerDay then count it as a day. Then return the activation days / the total days between
            period.</description>
        <in-parameters>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="periodFromDate" type="Timestamp" required="true">
                <description>(inclusive) Start of the period to calculate activation. Rounded to midnight in default system timezone.</description></parameter>
            <parameter name="periodThruDate" type="Timestamp" required="true">
                <description>(exclusive) End of the period to calculate time period. Rounded to midnight subtracted 1 millisecond in default system timezone.</description></parameter>
            <parameter name="activationThruDate" type="Timestamp" default="periodThruDate" required="true">
                <description>(exclusive) End of the period to calculate activation. Rounded to midnight subtracted 1 millisecond in default system timezone.</description></parameter>
            <parameter name="minActivationMinutesPerDay" type="Long" default-value="5" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="activationPeriodCount" type="BigDecimal" required="true"><description>The time the organization was active
                during the period where 1 is 100% of the days and .5 is 50% of the days that at least
                minActivationMinutesPerDay was active</description></parameter>
            <parameter name="dayAmountList" type="List" required="true"/>
            <parameter name="dayCount" type="BigDecimal" required="true"/>
            <parameter name="totalDays" type="BigDecimal" required="true"/>
        </out-parameters>
        <actions>
            <if condition="periodFromDate &gt;= periodThruDate">
                <log level="warn" message="Period From Date must be before Period Thru Date"/>
                <return type="danger" error="true"
                    message="${ec.resource.expand('CoarchyGeneralError', null)}"/>
            </if>
            <if condition="activationThruDate &gt; periodThruDate">
                <set field="activationThruDate" from="periodThruDate"/></if>

            <!-- Create a list of all the days between the period from and thru dates with the start of day at midnight
            timestamp and amount of milliseconds (defaulted to 0)-->
            <set field="periodFromDateZoned" from="ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                (long) periodFromDate.time), ZoneId.systemDefault()).with(LocalTime.MIN)"/>
            <set field="periodThruDateZoned" from="ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                (long) periodThruDate.time-1L), ZoneId.systemDefault()).with(LocalTime.MIN)"/>
            <set field="activationThruDateZoned" from="ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                (long) activationThruDate.time-1L), ZoneId.systemDefault()).with(LocalTime.MIN)"/>
            <set field="dayList" from="[[dateTime:periodFromDateZoned,amount:0L]]" type="List"/>
            <set field="daysIndex" from="0"/>
            <set field="daysBetweenPeriod" from="java.time.temporal.ChronoUnit.DAYS.between(
                periodFromDateZoned, periodThruDateZoned)" type="BigDecimal"/>
            <if condition="daysBetweenPeriod==0"><set field="daysBetweenPeriod" from="1.0"/></if>
            <while condition="daysIndex &lt; daysBetweenPeriod">
                <set field="dayList" from="dayList + [dateTime:dayList[daysIndex].dateTime.plusDays(1),amount:0L]"/>
                <set field="daysIndex" from="daysIndex + 1"/>
            </while>

            <!-- Find all activation records are found within the time period and put into a list-->
            <entity-find entity-name="mantle.party.PartyActivation" list="partyActivationList">
                <econdition field-name="partyId" from="organizationPartyId"/>
                <econdition field-name="fromDate" operator="greater-equals" from="new Timestamp(periodFromDateZoned.toInstant().toEpochMilli())"/>
                <econdition field-name="fromDate" operator="less" from="new Timestamp(periodThruDateZoned.toInstant().toEpochMilli())"/>
                <order-by field-name="fromDate"/></entity-find>
            <entity-find entity-name="mantle.party.PartyActivation" list="partyActivation1List" limit="1">
                <econdition field-name="partyId" from="organizationPartyId"/>
                <econdition field-name="fromDate" operator="less" from="new Timestamp(periodFromDateZoned.toInstant().toEpochMilli())"/>
                <econdition field-name="thruDate" operator="greater-equals" from="new Timestamp(periodFromDateZoned.toInstant().toEpochMilli())" or-null="true"/>
                <order-by field-name="-fromDate"/></entity-find>
            <set field="partyActivationList" from="partyActivation1List + partyActivationList"/>
            <if condition="partyActivationList.size() == 0">
                <set field="activationPeriodCount" from="0.0" type="BigDecimal"/>
                <return/>
            </if>

            <!-- For each activation record, find the days that it is active and add the amount of milliseconds to the
            day's amount. If the activation record is active for more than one day, then add the amount of milliseconds
            to each day.-->
            <set field="firstPartyActivation" from="partyActivationList.getFirst()"/>
            <set field="firstDay" from="dayList[0]"/>
            <if condition="firstPartyActivation.fromDate.toInstant() &lt; firstDay.dateTime.toInstant()"><then>
                <set field="daysIndex" from="0"/>
            </then><else>
                <set field="daysIndex" from="java.time.temporal.ChronoUnit.DAYS.between(firstDay.dateTime,
                    ZonedDateTime.ofInstant(Instant.ofEpochMilli((long) firstPartyActivation.fromDate.time),
                    ZoneId.systemDefault()))"/>
            </else></if>

<!--            <log level="warn" message="calculate#PartyActivationUsage daysIndex ${daysIndex}"/>-->
            <iterate list="partyActivationList" entry="partyActivation">

<!--                <log level="warn" message="calculate#PartyActivationUsage partyActivation ${partyActivation}"/>-->
                <set field="partyActivationThruDate" from="partyActivation.thruDate ?: new Timestamp(dayList[dayList.size()-1].dateTime.plusDays(1).toInstant().toEpochMilli())"/>
                <if condition="partyActivationThruDate.toInstant() &gt; activationThruDateZoned.toInstant()">
                    <set field="partyActivationThruDate" from="new Timestamp(activationThruDateZoned.toInstant().toEpochMilli())"/>
                </if>

                <while condition="daysIndex &lt;= daysBetweenPeriod">
                    <set field="dayActivationFromDate" from="partyActivation.fromDate.toInstant() &lt;
                        dayList[daysIndex].dateTime.toInstant() ? dayList[daysIndex].dateTime.toInstant() :
                        partyActivation.fromDate.toInstant()"/>
                    <set field="dayActivationThruDate" from="partyActivationThruDate.toInstant() &gt;
                        dayList[daysIndex].dateTime.plusDays(1).toInstant() ? dayList[daysIndex].dateTime.plusDays(1).toInstant() :
                        partyActivationThruDate.toInstant()"/>

                    <set field="dayActivationAmount" from="Duration.between(dayActivationFromDate,dayActivationThruDate).toMillis()"/>
                    <if condition="dayActivationAmount &lt; 0"><set field="dayActivationAmount" from="0L"/>
                        <log level="warn" message="Amount of milliseconds between activation from and thru dates is negative"/></if>
                    <set field="dayList[daysIndex].amount" from="dayList[daysIndex].amount+dayActivationAmount"/>

<!--                    <log level="warn" message="calculate#PartyActivationUsage dayList[daysIndex] ${dayList[daysIndex]} partyActivationThruDate.toInstant() ${partyActivationThruDate.toInstant()} dayList[daysIndex].dateTime.plusDays(1).toInstant() ${dayList[daysIndex].dateTime.plusDays(1).toInstant()}"/>-->
                    <if condition="partyActivationThruDate.toInstant() &gt; dayList[daysIndex].dateTime.plusDays(1).toInstant()"><then>
                        <set field="daysIndex" from="daysIndex + 1"/>
                    </then><else>
                        <break/>
                    </else></if>
                </while>
            </iterate>

            <!-- Count the number of days that the organization was active for at least minActivationMinutesPerDay minutes-->
            <set field="dayCount" from="dayList.sum{it.amount &gt;=
                minActivationMinutesPerDay * 60.0 * 1000.0 ? 1.0 : 0.0}" type="BigDecimal"/>
            <!-- Check if 0 and set to 1 to avoid division error -->
            <set field="totalDays" from="daysBetweenPeriod!=0?daysBetweenPeriod:1" type="BigDecimal"/>
            <set field="activationPeriodCount" from="dayCount / totalDays" type="BigDecimal"/>

            <set field="dayAmountList" from="dayList*.amount"/>

<!--            <log level="warn" message="calculate#PartyActivationUsage context.toString() ${context.toString()}"/>-->
        </actions>
    </service>
    <service verb="withdraw" noun="FinancialAccountCreditsMonthly" authenticate="anonymous-all">
        <description>This service should run monthly on the first day of the month.

            This service withdraws FinancialAccount Credits from each organization that has had any activation of
            premium features from the PartyActivation records.</description>
        <in-parameters>
            <parameter name="finAccountTypeId" required="true" default-value="OrganizationMonthCredit"/>
            <parameter name="serviceStartTime" type="Timestamp" default="ec.user.nowTimestamp" required="true"/>
        </in-parameters>
        <actions>
            <set field="periodThruDate" from="serviceStartTime"/>
            <set field="periodFromDate" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                (long) periodThruDate.time), ZoneId.systemDefault()).minusMonths(1).toInstant().toEpochMilli())"/>

            <entity-find entity-name="mantle.account.financial.FinancialAccount" list="financialAccountList" distinct="true">
                <econdition field-name="finAccountTypeId"/>
                <econdition field-name="statusId" value="FaActive"/>
                <date-filter/>
                <select-field field-name="ownerPartyId,finAccountId,availableBalance"/>
            </entity-find>
            <!-- if there are multiple financial accounts for an organization, then remove all but the one with the most credits -->
            <set field="financialAccountList" from="financialAccountList.groupBy{it.ownerPartyId}.collect{it.value.max{it.availableBalance}}"/>

            <iterate list="financialAccountList" entry="financialAccount">
                <set field="totalCreditsUsed" from="0.0" type="BigDecimal"/>
                <entity-find entity-name="mantle.party.Party" list="organizationList">
                    <econdition field-name="partyTypeEnumId" value="PtyOrganization"/>
                    <econdition field-name="disabled" value="N" or-null="true"/>
                    <econdition field-name="ownerPartyId" from="financialAccount.ownerPartyId"/>
                </entity-find>
                <if condition="organizationList.size() == 0">
                    <log level="warn" message="No organization found with financial account for ${financialAccount.ownerPartyId}"/>
                    <continue/></if>
                <iterate list="organizationList" entry="organization">
                    <service-call name="coarchy.CoarchyServices.calculate#PartyActivationUsage" in-map="[organizationPartyId:
                        organization.partyId, periodFromDate:periodFromDate, periodThruDate:periodThruDate]" out-map="context"/>

<!--                    <log level="warn" message="withdraw#FinancialAccountCredits organization ${organization} activationPeriodCount ${activationPeriodCount}"/>-->
                    <set field="totalCreditsUsed" from="totalCreditsUsed + activationPeriodCount" type="BigDecimal"/>
                    <log level="info" message="withdraw dayAmountList ${dayAmountList}"/>
                    <log level="info" message="withdraw ${activationPeriodCount} for ${dayCount} / ${totalDays} days from financialAccount ${financialAccount} for organization ${organization.partyId} owned by ${financialAccount.ownerPartyId}"/>
                </iterate>

                <if condition="totalCreditsUsed &gt; 0.0">
                    <service-call name="mantle.account.FinancialAccountServices.withdraw#FinancialAccount" in-map="[
                        finAccountId:financialAccount.finAccountId,amount:totalCreditsUsed,decimalDigits:4]"
                        out-map="context"/>
                </if>

            </iterate>
<!--                <log level="warn" message="withdraw#FinancialAccountCredits context.toString() ${context.toString()}"/>-->
        </actions>
    </service>
    <service verb="check" noun="PartyActivation" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="userPartyId" required="true"/>
            <parameter name="finAccountTypeId" required="true" default-value="OrganizationMonthCredit"/>
            <parameter name="currentTimestamp" default="ec.user.nowTimestamp" type="Timestamp" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="organizationChangeList" type="List"/>
            <parameter name="needsCredits" type="Boolean"/>
            <parameter name="creditsNeeded" type="Integer"/>
            <parameter name="totalCreditsUsed" type="BigDecimal"/>
            <parameter name="periodFromDate" type="Timestamp"/>
            <parameter name="periodThruDate" type="Timestamp"/>
            <parameter name="activationThruDate" type="Timestamp"/>
        </out-parameters>
        <actions>
            <set field="activationThruDate" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                (long) currentTimestamp.time), ZoneId.systemDefault()).plusDays(1).toInstant().toEpochMilli())"/>
            <set field="periodFromDate" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                (long) currentTimestamp.time), ZoneId.systemDefault()).withDayOfMonth(1).toInstant().toEpochMilli())"/>
            <set field="periodThruDate" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                (long) currentTimestamp.time), ZoneId.systemDefault()).plusMonths(1).withDayOfMonth(1).toInstant().toEpochMilli())"/>

            <!-- check party exists -->
            <entity-find-one entity-name="mantle.party.Party" value-field="userParty">
                <field-map field-name="partyId" from="userPartyId" />
            </entity-find-one>
            <if condition="!userPartyId">
                <log level="warn" message="Party ${userPartyId} was not found"/>
                <return type="warning" message="${ec.resource.expand('CoarchyGeneralError',null)}"/>
            </if>

            <entity-find entity-name="mantle.account.financial.FinancialAccount" list="financialAccountList" distinct="true">
                <econdition field-name="ownerPartyId" from="userPartyId"/>
                <econdition field-name="finAccountTypeId"/>
                <econdition field-name="statusId" value="FaActive"/>
                <date-filter valid-date="currentTimestamp"/>
                <select-field field-name="ownerPartyId,finAccountId,availableBalance"/>
            </entity-find>
<!--            <log level="warn" message="check#PartyActivation financialAccountList ${financialAccountList}"/>-->
            <if condition="financialAccountList.size() == 0">
                <set field="needsCredits" from="true"/>
                <set field="creditsNeeded" from="1" type="Integer"/>
                <return/>
            </if>

            <!-- if there are multiple financial accounts for an organization, then remove all but the one with the most credits -->
            <set field="financialAccount" from="financialAccountList.groupBy{it.ownerPartyId}.collect{it.value.max{it.availableBalance}}[0]"/>

            <set field="organizationChangeList" from="[]"/>
            <set field="totalCreditsUsed" from="0.0" type="BigDecimal"/>
            <entity-find entity-name="mantle.party.Party" list="organizationList">
                <econdition field-name="partyTypeEnumId" value="PtyOrganization"/>
                <econdition field-name="disabled" value="N" or-null="true"/>
                <econdition field-name="ownerPartyId" from="userPartyId"/>
            </entity-find>
            <if condition="organizationList.size() == 0">
                <set field="needsCredits" from="true"/>
                <set field="creditsNeeded" from="1" type="Integer"/>
                <return/>
            </if>
            <iterate list="organizationList" entry="organization">
                <service-call name="coarchy.CoarchyServices.calculate#PartyActivationUsage" in-map="[
                    organizationPartyId:organization.partyId, periodFromDate:periodFromDate, periodThruDate:periodThruDate,
                    activationThruDate:activationThruDate]" out-map="context"/>

                <set field="organizationChangeList" from="organizationChangeList + [organizationId:organization.partyId,activationPeriodCount:activationPeriodCount]"/>
                <!--                    <log level="warn" message="check#PartyActivation organization ${organization} activationPeriodCount ${activationPeriodCount}"/>-->
                <set field="totalCreditsUsed" from="totalCreditsUsed + activationPeriodCount" type="BigDecimal"/>
            </iterate>

<!--            <entity-find-count entity-name="mantle.party.PartyActivationAndParty" count-field="activatedOrganizationCount">-->
<!--                <econdition field-name="ownerPartyId" from="organization.ownerPartyId"/>-->
<!--                <date-filter/></entity-find-count>-->
<!--            <log level="warn" message="check#PartyActivation activatedOrganizationCount ${activatedOrganizationCount} totalCreditsUsed ${totalCreditsUsed} financialAccount.availableBalance ${financialAccount.availableBalance}"/>-->
            <set field="creditsNeeded" from="0.0" type="BigDecimal"/>
            <set field="needsCredits" from="false"/>
            <if condition="totalCreditsUsed &gt;= financialAccount.availableBalance">
                <set field="needsCredits" from="true"/>

                <set field="creditsNeededMax" from="(totalCreditsUsed-financialAccount.availableBalance).setScale(0, BigDecimal.ROUND_UP)" type="Integer"/>
                <set field="creditsNeeded" from="creditsNeededMax&gt;1.0?creditsNeededMax:1"/>
            </if>

<!--            <log level="warn" message="check#PartyActivation context.toString() ${context.toString()}"/>-->
        </actions>
    </service>
    <service verb="check" noun="PartyActivationDaily" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="finAccountTypeId" required="true" default-value="OrganizationMonthCredit"/>
            <parameter name="currentTimestamp" default="ec.user.nowTimestamp" type="Timestamp" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="organizationChangeList" type="List"/>
            <parameter name="ownerChangeList" type="List"/>
            <parameter name="periodFromDate" type="Timestamp"/>
            <parameter name="periodThruDate" type="Timestamp"/>
            <parameter name="activationThruDate" type="Timestamp"/>
        </out-parameters>
        <actions>
            <set field="activationThruDate" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                (long) currentTimestamp.time), ZoneId.systemDefault()).plusDays(1).toInstant().toEpochMilli())"/>
            <set field="periodFromDate" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                (long) currentTimestamp.time), ZoneId.systemDefault()).withDayOfMonth(1).toInstant().toEpochMilli())"/>
            <set field="periodThruDate" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                (long) currentTimestamp.time), ZoneId.systemDefault()).plusMonths(1).withDayOfMonth(1).toInstant().toEpochMilli())"/>

            <entity-find entity-name="mantle.account.financial.FinancialAccount" list="financialAccountList" distinct="true">
                <econdition field-name="finAccountTypeId"/>
                <econdition field-name="statusId" value="FaActive"/>
                <date-filter valid-date="currentTimestamp"/>
                <select-field field-name="ownerPartyId,finAccountId,availableBalance"/>
            </entity-find>
            <!-- if there are multiple financial accounts for an organization, then remove all but the one with the most credits -->
            <set field="financialAccountList" from="financialAccountList.groupBy{it.ownerPartyId}.collect{it.value.max{it.availableBalance}}"/>

            <set field="organizationChangeList" from="[]"/>
            <set field="ownerChangeList" from="[]"/>
            <iterate list="financialAccountList" entry="financialAccount">
                <set field="totalCreditsUsed" from="0.0" type="BigDecimal"/>
                <entity-find entity-name="mantle.party.Party" list="organizationList">
                    <econdition field-name="partyTypeEnumId" value="PtyOrganization"/>
                    <econdition field-name="disabled" value="N" or-null="true"/>
                    <econdition field-name="ownerPartyId" from="financialAccount.ownerPartyId"/>
                </entity-find>
                <if condition="organizationList.size() == 0">
                    <log level="warn" message="No organization found with financial account for ${financialAccount.ownerPartyId}"/>
                    <continue/></if>
                <iterate list="organizationList" entry="organization">
                    <service-call name="coarchy.CoarchyServices.calculate#PartyActivationUsage" in-map="[organizationPartyId:
                        organization.partyId, periodFromDate:periodFromDate, periodThruDate:periodThruDate,
                        activationThruDate:activationThruDate]" out-map="context"/>

                    <!--                    <log level="warn" message="check#PartyActivationDaily organization ${organization} activationPeriodCount ${activationPeriodCount}"/>-->
                    <set field="organizationChangeList" from="organizationChangeList + [organizationId:organization.partyId,activationPeriodCount:activationPeriodCount,deactivated:'N']"/>
                    <set field="totalCreditsUsed" from="totalCreditsUsed + activationPeriodCount" type="BigDecimal"/>
                </iterate>
                <set field="ownerChangeList" from="ownerChangeList + [ownerPartyId:financialAccount.ownerPartyId,totalCreditsUsed:totalCreditsUsed,availableBalance:financialAccount.availableBalance]"/>

<!--                <log level="warn" message="check#PartyActivationDaily organizationList.size() ${organizationList.size()} totalCreditsUsed ${totalCreditsUsed} financialAccount.availableBalance ${financialAccount.availableBalance}"/>-->
                <if condition="totalCreditsUsed &gt; 0.0 &amp;&amp; totalCreditsUsed &gt; financialAccount.availableBalance">
                    <log message="${financialAccount.ownerPartyId} used ${totalCreditsUsed} / ${financialAccount.availableBalance} credits this month for organizations ${organizationList*.partyId}. Deactivating all of the organizations."/>
                    <iterate list="organizationList" entry="organization">
                        <entity-find entity-name="mantle.party.PartyActivation" list="partyActivationList" limit="1" for-update="true">
                            <econdition field-name="partyId" from="organization.partyId"/>
                            <date-filter valid-date="currentTimestamp"/>
                            <order-by field-name="-fromDate"/>
                        </entity-find>
                        <if condition="partyActivationList.size() == 0">
<!--                            <log level="warn" message="No PartyActivation found for ${organization.partyId}"/>-->
                            <continue/></if>

<!--                        <log level="warn" message="check#PartyActivationDaily partyActivationList ${partyActivationList}"/>-->
                        <set field="organizationChangeList.find{it.organizationId == organization.partyId}.deactivated" value="Y"/>

                        <set field="partyActivationList.getFirst().thruDate" from="currentTimestamp"/>
                        <entity-update value-field="partyActivationList.getFirst()"/>
                    </iterate>
                </if>
            </iterate>
<!--            <log level="warn" message="check#PartyActivationDaily context.toString() ${context.toString()}"/>-->
        </actions>
    </service>

    <service verb="get" noun="CloneOrganizationList">
        <in-parameters>
            <parameter name="term"/>
        </in-parameters>
        <out-parameters>
            <parameter name="outList"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyToAndRelationship" list="organizationList" distinct="true">
                <date-filter/>
                <econdition field-name="relationshipTypeEnumId" value="PrtMember"/>
                <econdition field-name="toRoleTypeId" value="OrgInternal"/>
                <econdition field-name="fromPartyId" from="ec.user.userAccount.partyId"/>
                <!--                <select-field field-name="toPartyId,ownerPartyId,organizationName,visibilityEnumId"/>-->
                <order-by field-name="organizationName"/></entity-find>
            <set field="outList" from="[]"/>
            <iterate list="organizationList" entry="organization">
                <entity-find-count entity-name="mantle.party.PartyActivation" count-field="partyActivationCount">
                    <econdition field-name="partyId" from="organization.toPartyId"/>
                    <date-filter/></entity-find-count>
                <set field="ec.user.context?.activeOrgId" from="organization.toPartyId"/>
                <set field="ec.user.context?.filterOrgIds" from="[organization.toPartyId]"/>
                <entity-find-count entity-name="coarchy.ProcessStoryActivity" count-field="processStoryActivityCount"/>
                <if condition="partyActivationCount &gt; 0 &amp;&amp; processStoryActivityCount &gt; 0">
                    <script>outList.add([value:organization.toPartyId, label:organization.organizationName])</script>
                </if>
<!--                <log level="warn" message="getCloneOrganizationList context.toString() ${context.toString()}"/>-->
            </iterate>
<!--            <log level="warn" message="getCloneOrganizationList context.toString() ${context.toString()}"/>-->
        </actions>
    </service>
    <service verb="get" noun="ProcessStoryList">
        <description>Internal service needs validation that user can access organizationId</description>
        <in-parameters>
            <parameter name="organizationId" required="true"/>
            <parameter name="term"/>
        </in-parameters>
        <out-parameters>
            <parameter name="outList"/>
        </out-parameters>
        <actions>
            <set field="ec.user.context?.activeOrgId" from="organizationId"/>
            <set field="ec.user.context?.filterOrgIds" from="[organizationId]"/>
            <if condition="!term"><then>
                <entity-find entity-name="coarchy.ProcessStory" list="processStoryList">
                    <econdition field-name="organizationId"/>
                    <order-by field-name="name"/></entity-find>
            </then><else>
                <entity-find entity-name="coarchy.ProcessStory" list="processStoryList">
                    <econdition field-name="organizationId"/>
                    <econdition field-name="name" operator="like" value="%${term}%" ignore-case="true"/>
                    <order-by field-name="name"/></entity-find>
            </else></if>

            <set field="outList" from="[]"/>
            <script>
                for (def story in processStoryList)
                    outList.add([value:story?.processStoryId, label:story?.name])
            </script>
<!--            <log level="warn" message="getProcessStoryList context.toString() ${context.toString()}"/>-->
        </actions>
    </service>
    <service verb="get" noun="ActivityList">
        <description>Internal service needs validation that user can access organizationId</description>
        <in-parameters>
            <parameter name="processStoryId" required="true"/>
            <parameter name="organizationId" required="true"/>
            <parameter name="term"/>
        </in-parameters>
        <out-parameters>
            <parameter name="outList" type="List"/>
        </out-parameters>
        <actions>
            <set field="ec.user.context?.activeOrgId" from="organizationId"/>
            <set field="ec.user.context?.filterOrgIds" from="[organizationId]"/>
            <set field="activityList" from="[]"/>
            <if condition="!term"><then>
                <entity-find entity-name="coarchy.ProcessStoryActivityDetail" list="activityList">
                    <econdition field-name="processStoryId"/>
                    <econdition field-name="action" operator="is-not-null"/>
                    <!--                    <econdition field-name="storyActivityOrganizationId" from="organizationId"/>-->
                    <!--                    <econdition field-name="activityOrganizationId" from="organizationId"/>-->
                    <!--                    <econdition field-name="storyOrganizationId" from="organizationId"/>-->
                    <select-field field-name="activityId,condition,action"/>
                    <order-by field-name="sequenceNum"/></entity-find>
            </then><else>
                <!-- TODO: Also find by actor name -->
                <entity-find entity-name="coarchy.ProcessStoryActivityDetail" list="activityList">
                    <econdition field-name="processStoryId"/>
                    <econdition field-name="action" operator="is-not-null"/>
                    <!--                    <econdition field-name="storyActivityOrganizationId" from="organizationId"/>-->
                    <!--                    <econdition field-name="activityOrganizationId" from="organizationId"/>-->
                    <!--                    <econdition field-name="storyOrganizationId" from="organizationId"/>-->
                    <econditions combine="or">
                        <econdition field-name="condition" operator="like" value="%${term}%" ignore-case="true"/>
                        <econdition field-name="action" operator="like" value="%${term}%" ignore-case="true"/>
                    </econditions>
                    <select-field field-name="activityId,condition,action"/>
                    <order-by field-name="sequenceNum"/></entity-find>
            </else></if>
<!--            <log level="warn" message="getActivityList context.toString() ${context.toString()}"/>-->
            <set field="outList" from="[]"/>
            <iterate list="activityList" entry="activity">
                <entity-find entity-name="coarchy.ActivityActorDetail" list="activityActorList">
                    <econdition field-name="activityId" from="activity.activityId"/>
                    <order-by field-name="name"/></entity-find>
                <set field="processStoryActivity" from="activity.getMap() + [actorNames:activityActorList*.name]"/>
                <set field="label" from="ec.resource.template('component://coarchy/template/Activity.html.ftl', '.ftl')"/>
                <script>outList.add([value:activity?.activityId, label:"${label.size()&gt;97?label.take(97)+'...':label}"])</script>
            </iterate>
            <!--            <log level="warn" message="getActivityList context.toString() ${context.toString()}"/>-->
        </actions>
    </service>
    <service verb="move" noun="Activities">
        <description>Internal service needs validation that user can access organizationId</description>
        <in-parameters>
            <parameter name="activityId" required="true"/>
            <parameter name="moveType" required="true"/>
            <parameter name="organizationId" required="true"/>
            <parameter name="processStoryId" required="true"/>
            <parameter name="insertActivityId"/>
            <parameter name="insertType" required="true"/>
            <parameter name="activityIdNum" required="true" type="Integer"/>
        </in-parameters>
        <out-parameters>
            <parameter name="pageIndex"/>
            <parameter name="activityId"/>
            <parameter name="clipboardEntryId"/>
        </out-parameters>
        <actions>
            <if condition="ec.user.context?.activityIdList==null">
                <set field="ec.user.context.activityIdList" from="[]"/>
            </if>
            <set field="ec.user.context.activityIdList" from="ec.user.context.activityIdList + [activityId]"/>
            <set field="activityIdList" from="ec.user.context.activityIdList"/>

<!--            <log level="warn" message="copy#Activities context.toString() ${context.toString()} activityIdList.size() ${activityIdList.size()}"/>-->
            <if condition="activityIdList.size() == activityIdNum.toInteger()">
                <entity-find entity-name="coarchy.ProcessStoryActivityDetail" list="originalProcessStoryActivityList" distinct="true">
                    <econdition field-name="activityId" operator="in" from="activityIdList"/>
                    <!-- Don't select fields from activityactor (actorId) -->
                    <select-field field-name="processStoryActivityId,sequenceNum,detailProcessStoryId,action,condition,activityId,implementationId"/>
                    <order-by field-name="sequenceNum"/>
                </entity-find>
                <set field="activeOrgId" from="ec.user.context?.activeOrgId"/>
                <set field="ec.user.context?.activeOrgId" from="organizationId"/>
                <set field="ec.user.context?.filterOrgIds" from="[organizationId]"/>

                <entity-find entity-name="coarchy.ProcessStoryActivityDetail" list="insertProcessStoryActivityList" distinct="true" limit="1">
                    <econdition field-name="activityId" from="insertActivityId"/>
                    <!-- Don't select fields from activityactor (actorId) -->
                    <select-field field-name="processStoryActivityId,sequenceNum,detailProcessStoryId,action,condition,activityId,implementationId"/>
                    <order-by field-name="sequenceNum"/>
                </entity-find>
                <set field="insertActivity" from="insertProcessStoryActivityList?.getFirst()"/>

                <set field="insertSequenceNum" from="insertActivity?.sequenceNum?:0"/>
                <if condition="insertType=='below'">
                    <set field="pageIndex" from="downPageIndex"/>
                    <entity-find entity-name="coarchy.ProcessStoryActivityDetail" list="processStoryActivityMaxList" limit="1">
                        <econdition field-name="processStoryId"/>
                        <econdition field-name="sequenceNum" operator="greater" from="insertActivity?.sequenceNum?.toInteger()" ignore="!insertActivity"/>
                        <select-field field-name="processStoryActivityId,sequenceNum"/>
                        <order-by field-name="sequenceNum"/></entity-find>
                    <!-- This might be null, but if it is null then the right behavior will happen anyways -->
                    <set field="insertSequenceNum" from="processStoryActivityMaxList?.getFirst()?.sequenceNum?:(insertSequenceNum?:0)"/>
                </if>
                <entity-find entity-name="coarchy.ProcessStoryActivityDetail" list="processStoryActivityList">
                    <econdition field-name="processStoryId"/>
                    <econdition field-name="sequenceNum" operator="greater-equals" from="insertSequenceNum?.toInteger()" ignore-if-empty="true"/>
                    <select-field field-name="processStoryActivityId,sequenceNum,activityId"/>
                    <order-by field-name="-sequenceNum"/></entity-find>
                <iterate list="processStoryActivityList" entry="processStoryActivity">
                    <service-call name="update#coarchy.ProcessStoryActivity" in-map="[processStoryActivityId:
                            processStoryActivity.processStoryActivityId,sequenceNum:
                            processStoryActivity.sequenceNum+originalProcessStoryActivityList.size()]"/>
                </iterate>

                <set field="actorIdMap" from="[:]"/>
                <if condition="organizationId!=activeOrgId">
                    <set field="ec.user.context?.activeOrgId" from="activeOrgId"/>
                    <set field="ec.user.context?.filterOrgIds" from="[activeOrgId]"/>
                </if>
                <entity-find entity-name="coarchy.ActivityActorDetail" list="activityActorList" distinct="true">
                    <econdition field-name="activityId" from="originalProcessStoryActivityList*.activityId"/>
                    <select-field field-name="actorId,activityId,name,description"/>
                    <order-by field-name="name"/></entity-find>
                <if condition="organizationId!=activeOrgId">
                    <set field="ec.user.context?.activeOrgId" from="organizationId"/>
                    <set field="ec.user.context?.filterOrgIds" from="[organizationId]"/>
                </if>
                <iterate list="activityActorList" entry="activityActor">
                    <entity-find entity-name="coarchy.ActivityActorDetail" list="insideActivityActorList" distinct="true" limit="1">
                        <econdition field-name="name" from="activityActor.name" ignore-case="true"/>
                        <select-field field-name="actorId,name"/>
                        <order-by field-name="name"/></entity-find>
                    <if condition="!insideActivityActorList"><then>
                        <if condition="!actorIdMap.keys?.contains(activityActor.actorId)">
                            <service-call name="create#coarchy.Actor" in-map="[name:activityActor.name,
                                description:activityActor.description,organizationId:organizationId]" out-map="actorContext"/>
                            <script>actorIdMap.put(activityActor.actorId,actorContext.actorId)</script>
                        </if>
                    </then><else>
                        <script>actorIdMap.put(activityActor.actorId,insideActivityActorList.getFirst().actorId)</script>
                    </else></if>
                </iterate>
<!--                <log level="warn" message="copy#Activities actorIdMap ${actorIdMap}"/>-->

                <iterate list="originalProcessStoryActivityList" entry="activity">
                    <set field="actorIdList" from="activityActorList.findAll{ it.activityId == activity.activityId }*.actorId"/>
<!--                    <log level="warn" message="copy#Activities actorIdList ${actorIdList}"/>-->
                    <if condition="organizationId==activeOrgId"><then>
                    </then><else>
                        <set field="actorIdList" from="actorIdList.collect{ actorIdMap[it] }"/>
<!--                        <log level="warn" message="copy#Activities diff org actorIdList ${actorIdList}"/>-->
                    </else></if>
                    <service-call name="coarchy.CoarchyServices.create#Activity" in-map="[processStoryId:processStoryId,organizationId:organizationId,condition:activity.condition,action:activity.action,actorIdList:actorIdList,sequenceNum:insertSequenceNum+activity_index,implementationId:activity.implementationId,ignoreNoAction:true]"/>
<!--                    <log level="warn" message="copy#Activities activityActorList ${activityActorList}"/>-->
                </iterate>

                <if condition="moveType=='cut'">
                    <iterate list="activityIdList" entry="activityId">
                        <set field="ec.user.context?.activeOrgId" from="activeOrgId"/>
                        <set field="ec.user.context?.filterOrgIds" from="[activeOrgId]"/>

                        <!--                        <log level="warn" message="copy#Activities moveType ${moveType} processStoryActivity.activityId ${processStoryActivity.activityId}"/>-->
                        <service-call name="coarchy.CoarchyServices.delete#Activity" in-map="[activityId:activityId]"/>
                        <set field="ec.user.context?.activeOrgId" from="organizationId"/>
                        <set field="ec.user.context?.filterOrgIds" from="[organizationId]"/>
                    </iterate>
                </if>

                <service-call name="org.moqui.impl.UserServices.set#Preference" in-map="[preferenceKey:'ACTIVE_ORGANIZATION',preferenceValue:organizationId]"/>
<!--                <log level="warn" message="copy#Activities context.toString() ${context.toString()}"/>-->
            </if>
        </actions>
    </service>
    <service verb="copy" noun="Activities">
        <in-parameters>
            <parameter name="activityId" required="true"/>
            <parameter name="moveTypeEnumId" required="true"/>
            <parameter name="activityIdNum" required="true" type="Integer"/>
        </in-parameters>
        <out-parameters>
            <parameter name="activityId"/>
            <parameter name="clipboardEntryId"/>
        </out-parameters>
        <actions>
            <if condition="!ec.user.context?.clipboardEntryId">
<!--                <log level="warn" message="ec.user.context.activeOrgId ${ec.user.context.activeOrgId}"/>-->
                <entity-find-count entity-name="moqui.basic.Enumeration" count-field="enumCount">
                    <econdition field-name="enumTypeId" value="ClipboardMoveType"/>
                    <econdition field-name="enumId" from="moveTypeEnumId"/></entity-find-count>
                <if condition="enumCount == 0">
                    <log level="warn" message="Invalid moveTypeEnumId ${moveTypeEnumId}"/>
                    <return type="danger" error="true" public="true"
                        message="${ec.resource.expand('CoarchyGeneralError', null)}"/>
                </if>

                <entity-find entity-name="coarchy.ClipboardEntry" list="entryList">
                    <econdition field-name="partyId" from="ec.user.userAccount?.partyId"/>
                    <order-by field-name="-entryDate"/></entity-find>
                <iterate list="entryList" entry="entry">
                    <if condition="entry_index &gt;= 4">
<!--                        <log level="warn" message="copy#Activities deleting old clipboard entry ${entry} ${entry_index}"/>-->
                        <entity-find entity-name="coarchy.ClipboardActor" list="actorList">
                            <econdition field-name="clipboardEntryId" from="entry.clipboardEntryId"/>
                            <order-by field-name="actorSeqId"/></entity-find>
                        <iterate list="actorList" entry="actor">
                            <service-call name="delete#coarchy.ClipboardActor" in-map="[clipboardEntryId:entry.clipboardEntryId,
                                actorSeqId:actor.actorSeqId]"/>
                        </iterate>
                        <entity-find entity-name="coarchy.ClipboardActivity" list="activityList">
                            <econdition field-name="clipboardEntryId" from="entry.clipboardEntryId"/>
                            <order-by field-name="activitySeqId"/></entity-find>
                        <iterate list="activityList" entry="activity">
                            <service-call name="delete#coarchy.ClipboardActivity" in-map="[clipboardEntryId:entry.clipboardEntryId,
                                activitySeqId:activity.activitySeqId]"/>
                        </iterate>
                        <service-call name="delete#coarchy.ClipboardEntry" in-map="[clipboardEntryId:entry.clipboardEntryId]"/>
                    </if>
                </iterate>

                <service-call name="create#coarchy.ClipboardEntry" in-map="[partyId:ec.user.userAccount?.partyId,
                    fromOrganizationId:ec.user.context?.activeOrgId,moveTypeEnumId:moveTypeEnumId,entryDate:
                    ec.user.nowTimestamp]" out-map="context"/>
                <set field="ec.user.context.clipboardEntryId" from="clipboardEntryId"/>
            </if>
            <if condition="ec.user.context?.activityIdList==null">
                <set field="ec.user.context.activityIdList" from="[]"/>
            </if>
            <set field="ec.user.context.activityIdList" from="ec.user.context.activityIdList + [activityId]"/>
            <set field="activityIdList" from="ec.user.context.activityIdList"/>

            <set field="clipboardEntryId" from="ec.user.context.clipboardEntryId"/>
            <entity-find-one entity-name="coarchy.Activity" value-field="activity" auto-field-map="[activityId:activityId]"/>
            <service-call name="create#coarchy.ClipboardActivity" in-map="[clipboardEntryId:clipboardEntryId,
                condition:activity.condition,action:activity.action,implementationId:activity.implementationId]" out-map="activityOut"/>
            <entity-find entity-name="ActivityActorDetail" list="actorList" distinct="true">
                <econdition field-name="activityId"/>
                <select-field field-name="actorId,activityId,name,description"/></entity-find>
<!--            <log level="warn" message="activityId ${activityId}"/>-->
            <iterate list="actorList" entry="actor">
<!--                <log level="warn" message="clipboardEntryId ${clipboardEntryId} actor ${actor} actor.actorId ${actor.actorId}"/>-->
                <service-call name="create#coarchy.ClipboardActor" in-map="[clipboardEntryId:clipboardEntryId,
                    activitySeqId:activityOut.activitySeqId,name:actor.name,description:actor.description]"/>
            </iterate>

            <if condition="moveTypeEnumId=='CbmtCut' &amp;&amp; activityIdList.size() == activityIdNum.toInteger()">
                <iterate list="activityIdList" entry="activityId">
                    <service-call name="coarchy.CoarchyServices.delete#Activity" in-map="[activityId:activityId]"/>
                </iterate>
            </if>

<!--                        <log level="warn" message="copy#Activities context.toString() ${context.toString()}"/>-->
        </actions>
    </service>
    <!-- TODO: Improve the index handling on multiple activities inserted -->
    <service verb="paste" noun="Activities">
        <in-parameters>
            <parameter name="processStoryId" required="true"/>
            <parameter name="clipboardEntryId" required="true"/>
            <parameter name="organizationId" required="true"/>
            <parameter name="pageIndex" />
            <parameter name="downPageIndex" />
            <parameter name="sequenceNum" />
            <parameter name="insertType"/>
        </in-parameters>
        <out-parameters>
            <parameter name="pageIndex"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="coarchy.ClipboardEntry" list="entryList" limit="1">
                <econdition field-name="partyId" from="ec.user.userAccount?.partyId"/>
                <econdition field-name="clipboardEntryId"/>
            </entity-find>
            <if condition="entryList.size() == 0"><return error="true" message="${ec.resource.expand('CoarchyProcessClipboardEmpty', null)}"/></if>
            <entity-find-count entity-name="mantle.party.PartyRelationship" count-field="partyRelationshipCount">
                <date-filter/>
                <econdition field-name="relationshipTypeEnumId" value="PrtMember"/>
                <econdition field-name="toRoleTypeId" value="OrgInternal"/>
                <econdition field-name="fromPartyId" from="ec.user.userAccount.partyId"/>
                <econdition field-name="toPartyId" from="organizationId"/></entity-find-count>
            <if condition="partyRelationshipCount == 0"><return error="true" message="${ec.resource.expand('CoarchyOrgUnauthorizedUser', null)}"/></if>

            <set field="entry" from="entryList.getFirst()"/>
            <set field="moveTypeEnumId" from="entry.moveTypeEnumId"/>
            <set field="clipboardEntryId" from="entry.clipboardEntryId"/>
            <entity-find entity-name="coarchy.ClipboardActivity" list="activityList">
                <econdition field-name="clipboardEntryId"/>
                <order-by field-name="activitySeqId"/>
            </entity-find>
<!--            <log level="warn" message="paste#Activities activityList ${activityList}"/>-->

            <!-- check if we're pasting into a store with zero activities -->
            <entity-find-count entity-name="coarchy.ProcessStoryActivity" count-field="processActivityCount">
                <econdition field-name="processStoryId" />
            </entity-find-count>
            <if condition="processActivityCount">
                <then>
                    <if condition="((pageIndex == null) || (downPageIndex == null) || (sequenceNum == null) || (insertType == null))">
                        <log level="warn" message="Missing required parameters [pageIndex: ${pageIndex}, downPageIndex: ${downPageIndex}, sequenceNum: ${sequenceNum}, insertType: ${insertType}]"/>
                        <return error="true" message="${ec.resource.expand('CoarchyProcessClipboardPasteError', null)}"/>
                    </if>
                </then>
                <else>
                    <set field="pageIndex" from="0"/>
                    <set field="downPageIndex" from="0"/>
                    <set field="sequenceNum" from="0"/>
                    <set field="insertType" value="first"/>
                </else>
            </if>
            <set field="insertSequenceNum" from="sequenceNum"/>
            <if condition="insertType=='below'">
                <set field="pageIndex" from="downPageIndex"/>
                <entity-find entity-name="coarchy.ProcessStoryActivityDetail" list="processStoryActivityMaxList" limit="1">
                    <econdition field-name="processStoryId"/>
                    <econdition field-name="sequenceNum" operator="greater" from="sequenceNum.toInteger()"/>
                    <select-field field-name="processStoryActivityId,sequenceNum"/>
                    <order-by field-name="sequenceNum"/></entity-find>
                <!-- This might be null, but if it is null then the right behavior will happen anyways -->
                <set field="insertSequenceNum" from="processStoryActivityMaxList?.getFirst()?.sequenceNum!=null?
                    processStoryActivityMaxList?.getFirst()?.sequenceNum:sequenceNum.toInteger()+1"/>
            </if>
            <entity-find entity-name="coarchy.ProcessStoryActivityDetail" list="processStoryActivityList">
                <econdition field-name="processStoryId"/>
                <econdition field-name="sequenceNum" operator="greater-equals" from="insertSequenceNum.toInteger()"/>
                <select-field field-name="processStoryActivityId,sequenceNum,activityId"/>
                <order-by field-name="-sequenceNum"/></entity-find>
            <iterate list="processStoryActivityList" entry="processStoryActivity">
                <service-call name="update#coarchy.ProcessStoryActivity" in-map="[
                    processStoryActivityId:processStoryActivity.processStoryActivityId,
                    sequenceNum:processStoryActivity.sequenceNum.toInteger()+activityList.size()]"/>
            </iterate>

            <set field="actorIdMap" from="[:]"/>
            <entity-find entity-name="coarchy.ClipboardActor" list="actorList" distinct="true">
                <econdition field-name="clipboardEntryId"/>
                <select-field field-name="actorSeqId,activitySeqId,name,description"/>
                <order-by field-name="actorSeqId"/></entity-find>
            <iterate list="actorList" entry="actor">
                <entity-find entity-name="coarchy.Actor" list="insideActorList" distinct="true" limit="1">
                    <econdition field-name="name" from="actor.name"/>
                    <select-field field-name="actorId,name"/>
                    <order-by field-name="name"/></entity-find>
                <if condition="!insideActorList"><then>
                    <service-call name="create#coarchy.Actor" in-map="[name:actor.name,
                            description:actor.description,organizationId:organizationId]" out-map="actorContext"/>
                    <script>actorIdMap.put(actor.actorSeqId,actorContext?.actorId)</script>
                </then><else>
                    <script>actorIdMap.put(actor.actorSeqId,insideActorList.getFirst().actorId)</script>
                </else></if>
            </iterate>
<!--                <log level="warn" message="copy#Activities actorIdMap ${actorIdMap}"/>-->

            <iterate list="activityList" entry="activity">
                <set field="actorSeqIdList" from="actorList.findAll{ it.activitySeqId == activity.activitySeqId }*.actorSeqId"/>
                <set field="actorIdList" from="actorSeqIdList.collect{ actorIdMap[it] }"/>
                <service-call name="coarchy.CoarchyServices.create#Activity" in-map="[processStoryId:processStoryId,organizationId:organizationId,condition:activity.condition,action:activity.action,actorIdList:actorIdList,sequenceNum:insertSequenceNum.toInteger()+activity_index,implementationId:activity.implementationId,ignoreNoAction:true]"/>
            </iterate>

<!--            <log level="warn" message="paste#Activities context.toString() ${context.toString()}"/>-->
        </actions>
    </service>
    <service verb="delete" noun="Activity">
        <in-parameters>
            <parameter name="activityId" required="true"/>
            <parameter name="processStoryActivityId"/>
            <parameter name="actorIdList" type="List"/>
            <parameter name="pageIndex"/>
        </in-parameters>
        <out-parameters>
            <parameter name="pageIndex"/>
            <parameter name="activityId"/>
        </out-parameters>
        <actions>
            <if condition="!processStoryActivityId">
                <entity-find entity-name="coarchy.ProcessStoryActivity" list="activityList">
                    <econdition field-name="activityId"/>
                </entity-find>
                <if condition="activityList.size() == 0"><return type="danger" error="true" message="${ec.resource.expand('CoarchyProcessActivityNotFound', null)}"/></if>
                <if condition="activityList.size() &gt; 1"><return type="info" message="${ec.resource.expand('CoarchyProcessActivityMultiFound', null)}"/></if>
                <set field="processStoryActivityId" from="activityList.getFirst().processStoryActivityId"/>
            </if>
            <if condition="!actorIdList">
                <entity-find entity-name="coarchy.ActivityActor" list="actorList">
                    <econdition field-name="activityId" from="activityId"/>
                </entity-find>
                <set field="actorIdList" from="actorList*.actorId"/>
            </if>
            <iterate list="actorIdList" entry="actorId">
                <service-call name="delete#coarchy.ActivityActor" in-map="[activityId:activityId, actorId:actorId]"/>
            </iterate>
            <service-call name="delete#coarchy.ProcessStoryActivity" in-map="[processStoryActivityId:processStoryActivityId]"/>
        </actions>
    </service>
    <service verb="insert" noun="Activity">
        <in-parameters>
            <parameter name="pageIndex"/>
            <parameter name="downPageIndex"/>
            <parameter name="processStoryId"/>
            <parameter name="sequenceNum"/>
            <parameter name="implementationId"/>
            <parameter name="condition"/>
            <parameter name="actorIdList" type="List"/>
            <parameter name="action" type="String"/>
            <parameter name="insertType"/>
            <parameter name="organizationId"/>
            <parameter name="sequenceNumDiff" default="1" type="Integer"/>
        </in-parameters>
        <out-parameters>
            <parameter name="pageIndex"/>
            <parameter name="pageSize"/>
            <parameter name="orderByField"/>
        </out-parameters>
        <actions>
            <if condition="!action?.trim()"><return type="danger" error="true" message="${ec.resource.expand('CoarchyProcessActivityActionRequired',null)}"/></if>
            <set field="insertSequenceNum" from="sequenceNum"/>
            <if condition="insertType=='below'">
                <set field="pageIndex" from="downPageIndex"/>
                <entity-find entity-name="coarchy.ProcessStoryActivityDetail" list="processStoryActivityMaxList" limit="1">
                    <econdition field-name="sequenceNum" operator="greater" from="sequenceNum.toInteger()"/>
                    <select-field field-name="processStoryActivityId,sequenceNum"/>
                    <order-by field-name="sequenceNum"/></entity-find>
                <!-- This might be null, but if it is null then the right behavior will happen anyways -->
                <set field="insertSequenceNum" from="processStoryActivityMaxList?.getFirst()?.sequenceNum"/>
            </if>

            <entity-find entity-name="coarchy.ProcessStoryActivityDetail" list="processStoryActivityList">
                <econdition field-name="sequenceNum" operator="greater-equals" from="insertSequenceNum.toInteger()"/>
                <select-field field-name="processStoryActivityId,sequenceNum"/>
                <order-by field-name="-sequenceNum"/></entity-find>
            <iterate list="processStoryActivityList" entry="processStoryActivity">
                <service-call name="update#coarchy.ProcessStoryActivity" in-map="[processStoryActivityId:processStoryActivity.processStoryActivityId,sequenceNum:processStoryActivity.sequenceNum.toInteger()+sequenceNumDiff]"/>
            </iterate>
            <service-call name="coarchy.CoarchyServices.create#Activity" in-map="[processStoryId:processStoryId,organizationId:organizationId,condition:condition,actorIdList:actorIdList,action:action,sequenceNum:insertSequenceNum,implementationId:implementationId]"/>
        </actions>
    </service>

    <service verb="get" noun="ClipboardActivityAndCount">
        <in-parameters>
            <parameter name="clipboardEntryId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="activityText"/>
            <parameter name="activityCount"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="coarchy.ClipboardEntry" value-field="clipboardEntry"
                    auto-field-map="[clipboardEntryId:clipboardEntryId,partyId:ec.user.userAccount.partyId]"/>
            <if condition="clipboardEntry==null"><return type="danger" error="true" message="${ec.resource.expand('CoarchyProcessClipboardEmpty', null)}"/></if>

            <entity-find entity-name="coarchy.ClipboardActivity" list="activityList" limit="1">
                <econdition field-name="clipboardEntryId"/></entity-find>
            <if condition="activityList.size() == 0"><return type="danger" error="true" message="${ec.resource.expand('CoarchyProcessClipboardActivityEmpty', null)}"/></if>
            <set field="processStoryActivity" from="activityList.getFirst().getMap()"/>
            <if condition="processStoryActivity.action"><then>
                <entity-find entity-name="coarchy.ClipboardActor" list="actorList">
                    <econdition field-name="clipboardEntryId"/>
                    <econdition field-name="activitySeqId" from="processStoryActivity.activitySeqId"/>
                    <order-by field-name="name"/></entity-find>
                <set field="processStoryActivity" from="processStoryActivity + [actorNames:actorList*.name]"/>
                <set field="activityText" from="ec.resource.template('component://coarchy/template/Activity.html.ftl', '.ftl')"/>
            </then><else>
                <set field="activityText" value="⏎ Paragraph"/>
            </else></if>
            <entity-find-count entity-name="coarchy.ClipboardActivity" count-field="activityCount">
                <econdition field-name="clipboardEntryId"/></entity-find-count>
<!--            <log level="warn" message="getClipboardActivityAndCount context.toString() ${context.toString()}"/>-->
        </actions>
    </service>

    <service verb="get" noun="OrderProgress">
        <in-parameters>
            <parameter name="orderId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="statusId"/>
            <parameter name="description"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.order.OrderHeaderAndPart" list="existingOrder1List" limit="1">
                <econdition field-name="orderId"/>
                <econdition field-name="customerPartyId" from="ec.user.userAccount.partyId"/>
                <select-field field-name="orderId,placedDate,completedDate,entryDate,statusId"/>
                <order-by field-name="-entryDate"/><!-- get most recent open order --></entity-find>

            <set field="statusId" from="existingOrder1List.getFirst()?.statusId"/>
            <if condition="statusId==null"><return type="danger" error="true" message="${ec.resource.expand('CoarchyInvalidOrder', null)}"/></if>
            <entity-find-one entity-name="moqui.basic.StatusItem" value-field="status" auto-field-map="[statusTypeId:'OrderHeader',statusId:statusId]" cache="true"/>
            <set field="description" from="status.description"/>

            <if condition="statusId=='OrderCompleted' &amp;&amp; ec.web.sessionAttributes?.checkoutOrganizationId">
                <set field="checkoutOrganizationId" from="ec.web.sessionAttributes.checkoutOrganizationId"/>
                <script>
                    ec.web.sessionAttributes.remove('checkoutOrganizationId');
                    ec.user.setPreference("ACTIVE_ORGANIZATION", checkoutOrganizationId);
                </script>
                <set field="ec.user.context?.activeOrgId" from="checkoutOrganizationId"/>
                <set field="ec.user.context?.filterOrgIds" from="[checkoutOrganizationId]"/>
                <service-call name="coarchy.CoarchyServices.activateOrDeactivate#Organization" in-map="[organizationPartyId:checkoutOrganizationId]"/>
                <entity-find-one entity-name="mantle.party.Organization" value-field="organization" auto-field-map="[partyId:checkoutOrganizationId]"/>
                <message public="true">${ec.resource.expand('CoarchyOrgActivateAutoPremium', null, [organizationName:organization.organizationName])}</message>
            </if>

            <!--            <log level="warn" message="get#OrderProgress context.toString() ${context.toString()}"/>-->
        </actions>
    </service>

    <service verb="unsubscribe" noun="ContactList">
        <in-parameters>
            <parameter name="optInVerifyCode" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="statusId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.marketing.contact.ContactListParty" list="contactListPartyList" limit="1" for-update="true">
                <econdition field-name="optInVerifyCode" operator="is-not-null"/>
                <econdition field-name="optInVerifyCode"/>
                <date-filter/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <set field="contactListParty" from="contactListPartyList?.getFirst()"/>

            <if condition="contactListParty &amp;&amp; contactListParty.statusId!='CLPT_UNSUBSCRIBED'"><then>
                <set field="contactListParty.statusId" value="CLPT_UNSUBSCRIBED"/>
                <set field="statusId" from="contactListParty.statusId"/>
                <entity-update value-field="contactListParty"/>
                <message type="success">You have been unsubscribed from the contact list.</message>
            </then><else>
                <set field="statusId" from="contactListParty?.statusId"/>
                <message>You are already unsubscribed from the contact list.</message>
            </else></if>

<!--            <log level="warn" message="unsubscribe#contactlist context.toString(): ${context.toString()}"/>-->
        </actions>
    </service>

    <service verb="set" noun="PartyClassification">
        <in-parameters>
            <parameter name="partyClassificationId" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="mantle.party.PartyServices.set#PartyClassification" in-map="[partyId:ec.user.userAccount.partyId,partyClassificationId:partyClassificationId]" out-map="context"/>
        </actions>
    </service>

    <service verb="update" noun="SalesJourneyClassification" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="currentTimestamp" default="ec.user.nowTimestamp" type="Timestamp" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="newColdLeadPartyIdList" type="List"/>
            <parameter name="newPreviouslyPayingCustomerPartyIdList" type="List"/>
        </out-parameters>
        <actions>
            <set field="lastMonth" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusMonths(1).toInstant().toEpochMilli())" type="Timestamp"/>

            <!-- After 30 days of User not logging in, if User is a hot lead, Organization automatically assigns the User to be a cold lead. -->
            <set field="newColdLeadPartyIdList" from="[]"/>
            <entity-find entity-name="mantle.party.PartyClassificationAppl" list="hotLeadList">
                <econdition field-name="partyClassificationId" value="HotLead"/>
                <date-filter/><order-by field-name="-fromDate"/></entity-find>
            <iterate list="hotLeadList" entry="partyClassification">
                <!-- assume only one user per party -->
                <entity-find entity-name="moqui.security.UserAccount" list="userAccountList" limit="1">
                    <econdition field-name="partyId" from="partyClassification.partyId"/>
                    <select-field field-name="userId"/>
                    <order-by field-name="-lastUpdatedStamp"/></entity-find>
                <set field="userAccount" from="userAccountList?.getFirst()"/>
                <if condition="!userAccount">
<!--                    <log level="warn" message="update#SalesJourneyClassification userAccount not found for partyClassification ${partyClassification}"/>-->
                    <continue/>
                </if>

                <entity-find entity-name="moqui.security.UserLoginHistory" list="historyList" limit="1">
                    <econdition field-name="userId" from="userAccount.userId"/>
                    <order-by field-name="-fromDate"/></entity-find>

                <if condition="historyList.getFirst()?.fromDate != null &amp;&amp; historyList.getFirst().fromDate.toInstant() &lt; lastMonth.toInstant()">
                    <set field="newColdLeadPartyIdList" from="newColdLeadPartyIdList + [partyClassification.partyId]"/>
                    <service-call name="mantle.party.PartyServices.set#PartyClassification" in-map="[
                        partyId:partyClassification.partyId,partyClassificationId:'ColdLead']" out-map="context"/>
                </if>
            </iterate>

            <!-- If the User is a Paying Customer in the sales journey and (has no organization credits, or hasn't had
                an organization active for 30 days), Organization automatically assigns the user to be a Previously Paying Customer. -->
            <set field="newPreviouslyPayingCustomerPartyIdList" from="[]"/>
            <entity-find entity-name="mantle.party.PartyClassificationAppl" list="payingCustomerList">
                <econdition field-name="partyClassificationId" value="PayingCustomer"/>
                <date-filter/><order-by field-name="-fromDate"/></entity-find>
            <iterate list="payingCustomerList" entry="partyClassification">
                <entity-find entity-name="mantle.account.financial.FinancialAccount" list="financialAccountList" distinct="true">
                    <econdition field-name="ownerPartyId" from="partyClassification.partyId"/>
                    <econdition field-name="finAccountTypeId" value="OrganizationMonthCredit"/>
                    <econdition field-name="statusId" value="FaActive"/>
                    <date-filter/>
                    <select-field field-name="ownerPartyId,finAccountId,availableBalance"/>
                </entity-find>
                <if condition="financialAccountList.size() == 0"><continue/></if>

                <if condition="financialAccountList.getFirst().availableBalance &lt; .01">
                    <set field="newPreviouslyPayingCustomerPartyIdList" from="newPreviouslyPayingCustomerPartyIdList + [partyClassification.partyId]"/>
                    <service-call name="mantle.party.PartyServices.set#PartyClassification" in-map="[
                        partyId:partyClassification.partyId,partyClassificationId:'NonPayingCustomer']" out-map="context"/>
                    <continue/>
                </if>

                <entity-find-count entity-name="mantle.party.PartyActivationAndParty" count-field="partyActivationAndPartyCount">
                    <econdition field-name="ownerPartyId" from="partyClassification.partyId"/><date-filter/>
                </entity-find-count>
                <if condition="partyActivationAndPartyCount &gt; 0">
                    <!-- Paying Customer has had an organization active for 30 days -->
<!--                    <log level="warn" message="Paying Customer ${partyClassification.partyId} has had an organization active for 30 days"/>-->
                    <continue/>
                </if>

                <entity-find entity-name="mantle.party.Party" list="partyList">
                    <econdition field-name="ownerPartyId" from="partyClassification.partyId"/>
                    <econdition field-name="partyTypeEnumId" value="PtyOrganization"/>
                </entity-find>
                <set field="hasAnyFromDateLessThanLastMonth" from="false"/>
                <iterate list="partyList" entry="party">
                    <entity-find entity-name="mantle.party.PartyActivation" list="partyActivationList" limit="1">
                        <econdition field-name="partyId" from="party.partyId"/>
                        <order-by field-name="-fromDate"/></entity-find>
                    <if condition="partyActivationList.size() == 0"><continue/></if>
                    <if condition="lastMonth.toInstant() &lt; partyActivationList.getFirst().thruDate.toInstant()">
                        <set field="hasAnyFromDateLessThanLastMonth" value="true"/>
                        <break/>
                    </if>
                </iterate>
                <if condition="!hasAnyFromDateLessThanLastMonth">
                    <set field="newPreviouslyPayingCustomerPartyIdList" from="newPreviouslyPayingCustomerPartyIdList + [partyClassification.partyId]"/>
<!--                    <log level="warn" message="Paying Customer ${partyClassification.partyId} has no organization active for 30 days"/>-->
                    <service-call name="mantle.party.PartyServices.set#PartyClassification" in-map="[
                        partyId:partyClassification.partyId,partyClassificationId:'PreviouslyPayingCustomer']" out-map="context"/>
                </if>

<!--                <log level="warn" message="update#SalesJourneyClassification context.toString() ${context.toString()}"/>-->

            </iterate>
        </actions>
    </service>

    <service verb="send" noun="InvitationEmails" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="currentTimestamp" default="ec.user.nowTimestamp" type="Timestamp" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="emailsSentList" type="List"/>
            <parameter name="invitationPartyIdList" type="List"/>
        </out-parameters>
        <actions>
            <set field="emailsSentList" from="[]"/>
            <set field="baseLinkUrl" from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : 'https://coarchy.com'"/>

            <set field="twoDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(2).toInstant().toEpochMilli())" type="Timestamp"/>
            <set field="fourDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(4).toInstant().toEpochMilli())" type="Timestamp"/>
            <set field="sixDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(6).toInstant().toEpochMilli())" type="Timestamp"/>
            <set field="eightDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(8).toInstant().toEpochMilli())" type="Timestamp"/>
            <set field="twoWeeksAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusWeeks(2).toInstant().toEpochMilli())" type="Timestamp"/>
           
            <entity-find entity-name="mantle.marketing.contact.ContactListParty" list="invitationPartyList">
                <econdition field-name="contactListId" value="CoarchyInvitation"/>
                <econdition field-name="statusId" value="CLPT_IN_USE"/>
                <date-filter/></entity-find>
            <set field="invitationPartyIdList" from="invitationPartyList*.partyId"/>

            <iterate list="invitationPartyList" entry="listParty">
                <!-- check when first invitiation email has was sent -->
                <entity-find entity-name="mantle.marketing.contact.ContactListCommStatus" list="commStatusList">
                    <econdition field-name="partyId" from="listParty.partyId"/>
                    <econdition field-name="contactListId" from="listParty.contactListId"/>
                    <order-by field-name="-lastUpdatedStamp"/></entity-find>
                <set field="invitationList" from="[]"/>
                <iterate list="commStatusList" entry="commStatus">
                    <entity-find-one entity-name="mantle.party.communication.CommunicationEvent" value-field="communicationEvent"
                            auto-field-map="[communicationEventId:commStatus.communicationEventId]">
                        <select-field field-name="emailMessageId,entryDate"/>
                    </entity-find-one>
                    <entity-find-one entity-name="moqui.basic.email.EmailMessage" value-field="emailMessage"
                            auto-field-map="[emailMessageId:communicationEvent.emailMessageId]">
                        <select-field field-name="emailTemplateId,subject"/>
                    </entity-find-one>
                    <if condition="['USER_INVITE_RESET_PASSWORD','USER_INVITE'].contains(emailMessage?.emailTemplateId)">
                        <set field="invitationDate" from="communicationEvent.entryDate"/>
                        <set field="emailTemplateId" from="emailMessage.emailTemplateId"/>
                        <set field="invitationList" from="invitationList + [invitationDate:invitationDate,
                            emailTemplateId:emailTemplateId,subject:emailMessage.subject]"/>
                    </if>
                </iterate>

                <!-- Just assume one user per party -->
                <entity-find entity-name="moqui.security.UserAccount" list="userAccountList" limit="2" for-update="true">
                    <econdition field-name="partyId" from="listParty.partyId"/>
                    <econdition field-name="disabled" operator="not-equals" value="Y"/>
                </entity-find>
                <if condition="userAccountList.size() &gt; 1">
                    <log level="warn" message="Multiple user accounts found for party ${listParty.partyId}"/>
                </if>
                <set field="userAccount" from="userAccountList?.getFirst()"/>

                <entity-find entity-name="moqui.security.UserLoginHistory" list="historyList" limit="1">
                    <econdition field-name="userId" from="userAccount.userId"/>
                    <order-by field-name="fromDate"/></entity-find>

                <set field="invitation" from="invitationList.max{ it.invitationDate }"/>
                <set field="invitationDate" from="invitation?.invitationDate"/>

                <if condition="invitationList.size() &lt; 3 &amp;&amp; userAccount &amp;&amp;
                     twoDaysAgo.toInstant() &gt; invitationDate?.toInstant() &amp;&amp;
                    (historyList.size() == 0 || (historyList.size() &gt; 0 &amp;&amp; historyList.getFirst().fromDate.toInstant() &lt; invitationDate?.toInstant() ))">
                    <if condition="historyList.size() == 0">
                        <then>
                            <!-- if account has not logged in yet (ie, new user), create one & send a USER_INVITE_RESET_PASSWORD email -->
                            <!-- reset the password to a random value -->
                            <set field="resetPassword" from="getRandomString(12)"/>
                            <set field="passwordNode" from="ec.ecfi.confXmlRoot.first('user-facade').first('password')"/>
                            <set field="userAccount.resetPassword" from="ec.ecfi.getSimpleHash(resetPassword, userAccount.passwordSalt, userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64))"/>
                            <set field="userAccount.requirePasswordChange" from="(passwordNode.attribute('email-require-change') == 'true') ? 'Y' : 'N'"/>
                            <entity-update value-field="userAccount"/>

                            <set field="emailsSentList" from="emailsSentList + [partyId:listParty.partyId,
                                emailAddress:userAccount.emailAddress,emailTemplateId:'USER_INVITE_RESET_PASSWORD']"/>
                            <service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[
                                contactListId:'CoarchyInvitation',emailTemplateId:'USER_INVITE_RESET_PASSWORD',
                                partyId:listParty.partyId,preferredContactMechId:null,toAddresses:userAccount.emailAddress,
                                bodyParameters:[linkUrl:baseLinkUrl+'/ChangePassword?username='+userAccount.emailAddress+'&amp;oldPassword='+resetPassword,
                                title:invitation?.subject?:'You\'re invited to join Coarchy',baseLinkUrl:baseLinkUrl]]" out-map="context"/>
                        </then>
                        <else>
                            <set field="emailsSentList" from="emailsSentList + [partyId:listParty.partyId,
                                emailAddress:userAccount.emailAddress,emailTemplateId:'USER_INVITE']"/>
                            <!-- if account has logged in, existing/invited user, but NOT part of inviting organization, send a USER_INVITE email -->
                            <service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[
                                contactListId:'CoarchyInvitation',emailTemplateId:'USER_INVITE',
                                partyId:listParty.partyId,preferredContactMechId:null,toAddresses:userAccount.emailAddress,
                                bodyParameters:[linkUrl:baseLinkUrl+'/Login?username='+userAccount.username?:userAccount.emailAddress,
                                title:invitation?.subject?:'You\'re invited to join Coarchy',baseLinkUrl:baseLinkUrl]]" out-map="context"/>
                        </else>
                    </if>
                </if>
            </iterate>
        </actions>
    </service>

    <service verb="send" noun="NewsletterEmails" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="currentTimestamp" default="ec.user.nowTimestamp" type="Timestamp" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="emailsSentList" type="List"/>
            <parameter name="newsletterPartyIdList" type="List"/>
        </out-parameters>
        <actions>
            <set field="emailsSentList" from="[]"/>
            <set field="newsletterPartyIdList" from="[]"/>
            <set field="baseLinkUrl" from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : 'https://coarchy.com'"/>

            <set field="twoDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(2).toInstant().toEpochMilli())" type="Timestamp"/>
            <set field="fourDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(4).toInstant().toEpochMilli())" type="Timestamp"/>
            <set field="sixDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(6).toInstant().toEpochMilli())" type="Timestamp"/>
            <set field="eightDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(8).toInstant().toEpochMilli())" type="Timestamp"/>
            <set field="twoWeeksAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusWeeks(2).toInstant().toEpochMilli())" type="Timestamp"/>
          
            <entity-find entity-name="mantle.marketing.contact.ContactListParty" list="invitationPartyList">
                <econdition field-name="contactListId" value="CoarchyInvitation"/>
                <econdition field-name="statusId" value="CLPT_IN_USE"/>
                <date-filter/></entity-find>
            <set field="invitationPartyIdList" from="invitationPartyList*.partyId"/>
            
            <!-- Find last time when newsletter email was sent -->
            <!-- If a newsletter email hasn't been sent in 2 weeks, send a newsletter email. -->
            <entity-find entity-name="moqui.resource.wiki.WikiBlogCategory" list="wikiBlogCategoryList" for-update="true">
                <econdition field-name="wikiPageCategoryId" value="Newsletter"/>
                <econdition field-name="sentDate" operator="is-null"/>
                <order-by field-name="lastUpdatedStamp"/></entity-find>
            <entity-find entity-name="moqui.resource.wiki.WikiBlogCategory" list="sentWikiBlogCategoryList" limit="1">
                <econdition field-name="wikiPageCategoryId" value="Newsletter"/>
                <econdition field-name="sentDate" operator="is-not-null"/>
                <order-by field-name="-sentDate"/></entity-find>
            <set field="wikiBlogCategory" from="wikiBlogCategoryList?.getFirst()"/>
            <entity-find-one entity-name="moqui.resource.wiki.WikiBlog" value-field="wikiBlog" for-update="true"
                    auto-field-map="[wikiBlogId:wikiBlogCategory?.wikiBlogId]"/>
            <entity-find entity-name="moqui.resource.wiki.WikiPage" list="wikiPageList">
                <econdition field-name="wikiPageId" from="wikiBlog?.wikiPageId"/>
                <econdition field-name="publishedVersionName" operator="is-not-null"/>
            </entity-find>
            <log level="warn" message="send#NewsletterEmail context.toString() ${context.toString()}"/>
            <set field="wikiPage" from="wikiPageList?.getFirst()"/>
            <if condition="!wikiPage">
                <log level="warn" message="Wiki page not found for blog ${wikiBlog?.wikiBlogId}"/>
                <else>
                    <entity-find-one entity-name="moqui.resource.wiki.WikiSpace" value-field="wikiSpace">
                        <field-map field-name="wikiSpaceId" from="wikiPage.wikiSpaceId"/></entity-find-one>
                    <set field="rootPageRef" from="ec.resource.getLocationReference(wikiSpace.rootPageLocation)"/>
                    <set field="pageReference" from="rootPageRef.findChildFile(wikiPage.pagePath)"/>

                    <set field="didSendBlogEmail" from="false"/>
                    <if condition="wikiBlogCategoryList.size() == 0">
                        <log level="warn" message="No non sent blog posts found for newsletter"/>
                        <else-if condition="sentWikiBlogCategoryList.size() == 0 ||
                            sentWikiBlogCategoryList.getFirst().sentDate.toInstant() &lt; twoWeeksAgo.toInstant()">
                            <entity-find entity-name="mantle.marketing.contact.ContactListParty" list="newsletterPartyList">
                                <econdition field-name="contactListId" value="CoarchyNewsletter"/>
                                <econdition field-name="statusId" value="CLPT_IN_USE"/>
                                <date-filter/></entity-find>
                            <set field="newsletterPartyIdList" from="newsletterPartyList*.partyId"/>
                            <iterate list="invitationPartyList" entry="listParty">

                                <!-- Just assume one user per party -->
                                <entity-find entity-name="moqui.security.UserAccount" list="userAccountList" limit="2">
                                    <econdition field-name="partyId" from="listParty.partyId"/>
                                    <econdition field-name="disabled" operator="not-equals" value="Y"/>
                                </entity-find>
                                <if condition="userAccountList.size() &gt; 1">
                                    <log level="warn" message="Multiple user accounts found for party ${listParty.partyId}"/>
                                </if>
                                <set field="userAccount" from="userAccountList?.getFirst()"/>

                                <service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[
                                    contactListId:'CoarchyNewsletter',emailTemplateId:'BLOG',
                                    partyId:listParty.partyId,preferredContactMechId:null,toAddresses:userAccount.emailAddress,
                                    bodyParameters:[imageUrl:baseLinkUrl+'/content/downloadSmallImage?wikiBlogId='+wikiBlog.wikiBlogId,
                                    title:wikiBlog.title,author:wikiBlog.author,publishDate:ec.l10n.format(wikiBlog.publishDate, 'MMM dd, yyyy'),
                                    pageText:pageReference.getText(wikiPage.publishedVersionName),summary:wikiBlog.summary,
                                    baseLinkUrl:baseLinkUrl]]" out-map="context"/>
                                <if condition="sentEmail">
                                    <set field="emailsSentList" from="emailsSentList + [partyId:listParty.partyId,
                                        emailAddress:userAccount.emailAddress,emailTemplateId:'BLOG']"/>
                                    <set field="didSendBlogEmail" value="true"/>
                                </if>
                            </iterate>
                        </else-if>
                    </if>
                    <if condition="didSendBlogEmail">
                        <set field="wikiBlogCategory.sentDate" from="currentTimestamp"/>
                        <entity-update value-field="wikiBlogCategory"/>
                    </if>
                </else>
            </if>
            <log level="warn" message="send#NewsletterEmail end context.toString() ${context.toString()}"/>
        </actions>
    </service>

    <service verb="send" noun="OnboardingEmails" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="currentTimestamp" default="ec.user.nowTimestamp" type="Timestamp" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="emailsSentList" type="List"/>
            <parameter name="onboardingPartyIdList" type="List"/>
        </out-parameters>
        <actions>
            <set field="emailsSentList" from="[]"/>
            <set field="baseLinkUrl" from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : 'https://coarchy.com'"/>

            <!-- after sign up, Leads are nurtured through marketing emails -->
            <entity-find entity-name="mantle.marketing.contact.ContactListParty" list="onboardingPartyList">
                <econdition field-name="contactListId" value="CoarchyOnboarding"/>
                <econdition field-name="statusId" value="CLPT_IN_USE"/>
                <date-filter/>
            </entity-find>
            <set field="onboardingPartyIdList" from="onboardingPartyList*.partyId"/>

            <set field="twoDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(2).toInstant().toEpochMilli())" type="Timestamp"/>
            <set field="fourDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(4).toInstant().toEpochMilli())" type="Timestamp"/>
            <set field="sixDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(6).toInstant().toEpochMilli())" type="Timestamp"/>
            <set field="eightDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(8).toInstant().toEpochMilli())" type="Timestamp"/>
            <set field="twoWeeksAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(
                    (long) currentTimestamp.time), ZoneId.systemDefault()).minusWeeks(2).toInstant().toEpochMilli())" type="Timestamp"/>
            <iterate list="onboardingPartyList" entry="listParty">
                <if condition="listParty.partyId==null"><continue/></if>

                <!-- TODO: Refactor this to use less code per emails -->
                <set field="createOrganizationEmailTemplateId" value="CREATE_ORGANIZATION"/>
                <set field="inviteUserEmailTemplateId" value="INVITE_USER"/>
                <set field="createProcessStoryEmailTemplateId" value="CREATE_PROCESS_STORY"/>
                <set field="createActorEmailTemplateId" value="CREATE_ACTOR"/>
                <!-- check if email has already been sent -->
                <entity-find entity-name="mantle.marketing.contact.ContactListCommStatus" list="commStatusList">
                    <econdition field-name="partyId" from="listParty.partyId"/>
                    <econdition field-name="contactListId" from="listParty.contactListId"/>
                </entity-find>
                <set field="createOrganizationAlreadyBeenSent" from="false"/>
                <set field="inviteUserAlreadyBeenSent" from="false"/>
                <set field="createProcessStoryAlreadyBeenSent" from="false"/>
                <set field="createActorAlreadyBeenSent" from="false"/>
                <iterate list="commStatusList" entry="commStatus">
                    <entity-find-one entity-name="mantle.party.communication.CommunicationEvent" value-field="communicationEvent"
                            auto-field-map="[communicationEventId:commStatus.communicationEventId]">
                        <select-field field-name="emailMessageId"/>
                    </entity-find-one>
                    <entity-find-one entity-name="moqui.basic.email.EmailMessage" value-field="emailMessage"
                            auto-field-map="[emailMessageId:communicationEvent.emailMessageId]">
                        <select-field field-name="emailTemplateId"/>
                    </entity-find-one>
                    <if condition="emailMessage?.emailTemplateId==createOrganizationEmailTemplateId">
                        <set field="createOrganizationAlreadyBeenSent" value="true"/>
                        <continue/>
                    </if>
                    <if condition="emailMessage?.emailTemplateId==inviteUserEmailTemplateId">
                        <set field="inviteUserAlreadyBeenSent" value="true"/>
                        <continue/>
                    </if>
                    <if condition="emailMessage?.emailTemplateId==createProcessStoryEmailTemplateId">
                        <set field="createProcessStoryAlreadyBeenSent" value="true"/>
                        <continue/>
                    </if>
                    <if condition="emailMessage?.emailTemplateId==createActorEmailTemplateId">
                        <set field="createActorAlreadyBeenSent" value="true"/>
                        <continue/>
                    </if>
                </iterate>
                <!-- Just assume one user per party -->
                <entity-find entity-name="moqui.security.UserAccount" list="userAccountList" limit="2">
                    <econdition field-name="partyId" from="listParty.partyId"/>
                    <econdition field-name="disabled" operator="not-equals" value="Y"/>
                </entity-find>
                <if condition="userAccountList.size() &gt; 1">
                    <log level="warn" message="Multiple user accounts found for party ${listParty.partyId}"/>
                </if>
                <set field="userAccount" from="userAccountList?.getFirst()"/>

                <entity-find entity-name="moqui.security.UserLoginHistory" list="historyList" limit="1">
                    <econdition field-name="userId" from="userAccount.userId"/>
                    <order-by field-name="fromDate"/></entity-find>

                <entity-find entity-name="mantle.party.Party" list="ownedOrganizationList">
                    <econdition field-name="ownerPartyId" from="listParty.partyId"/>
                    <econdition field-name="partyTypeEnumId" value="PtyOrganization"/>
                    <econdition field-name="disabled" operator="not-equals" value="Y"/>
                    <order-by field-name="-lastUpdatedStamp"/></entity-find>
                <!-- If the user hasn't already created an Organization 2 days after sign up, Lead gets sent an activation email to setup an organization. -->
                <if condition="!createOrganizationAlreadyBeenSent &amp;&amp; ownedOrganizationList.size() == 0 &amp;&amp; userAccount &amp;&amp; historyList.size() &gt; 0
                    &amp;&amp; twoDaysAgo.toInstant() &gt; historyList.getFirst().fromDate.toInstant()">
                    <!-- TODO: Start tracking emails conversions -->
                    <service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[
                                            contactListId:listParty.contactListId,emailTemplateId:createOrganizationEmailTemplateId,
                                            partyId:listParty.partyId,preferredContactMechId:null,toAddresses:userAccount.emailAddress,
                                            bodyParameters:[linkUrl:baseLinkUrl+'/settings/Organizations',
                                            title:'Get started with Coarchy. Create an Organization',baseLinkUrl:baseLinkUrl]]" out-map="context"/>
                    <set field="emailsSentList" from="emailsSentList + [partyId:listParty.partyId,
                                        emailAddress:userAccount.emailAddress,emailTemplateId:emailTemplateId]"/>
                </if>

                <!-- Find whether the listParty.party has any PartyRelationship besides the listParty.partyId for any organization it owns -->
                <entity-find entity-name="mantle.party.PartyRelationship" list="partyRelationshipList">
                    <econdition field-name="fromPartyId" operator="not-equals" from="listParty.partyId"/>
                    <econdition field-name="toPartyId" operator="in" from="ownedOrganizationList*.partyId"/>
                    <econdition field-name="relationshipTypeEnumId" value="PrtMember"/>
                    <econdition field-name="toRoleTypeId" value="OrgInternal"/>
                    <date-filter/>
                </entity-find>
                <!-- If the user hasn't already invited a user 4 days after sign up, Lead gets sent an activation email to invite a user. -->
                <if condition="createOrganizationAlreadyBeenSent &amp;&amp; !inviteUserAlreadyBeenSent
                    &amp;&amp; partyRelationshipList.size() == 0 &amp;&amp; userAccount &amp;&amp; historyList.size() &gt; 0
                    &amp;&amp; fourDaysAgo.toInstant() &gt; historyList.getFirst().fromDate.toInstant()">
                    <!-- TODO: Start tracking emails conversions -->
                    <if condition="ownedOrganizationList.size() &gt; 0"><then>
                        <set field="linkUrl" from="baseLinkUrl+'/settings/EditOrganization?organizationId='+ownedOrganizationList.getFirst().partyId"/>
                    </then><else>
                        <set field="linkUrl" from="baseLinkUrl+'/settings/Organizations'"/>
                    </else></if>
                    <service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[
                        contactListId:listParty.contactListId,emailTemplateId:inviteUserEmailTemplateId,
                        partyId:listParty.partyId,preferredContactMechId:null,toAddresses:userAccount.emailAddress,
                        bodyParameters:[linkUrl:linkUrl,
                        title:'Coarchy is better with people',baseLinkUrl:baseLinkUrl]]" out-map="context"/>
                    <set field="emailsSentList" from="emailsSentList + [partyId:listParty.partyId,
                        emailAddress:userAccount.emailAddress,emailTemplateId:emailTemplateId]"/>
                </if>

                <!-- 6 days after sign up, Lead gets sent an activation email to create a process story with activities. -->
                <if condition="inviteUserAlreadyBeenSent &amp;&amp; !createProcessStoryAlreadyBeenSent
                    &amp;&amp; userAccount &amp;&amp; historyList.size() &gt; 0
                    &amp;&amp; sixDaysAgo.toInstant() &gt; historyList.getFirst().fromDate.toInstant()">
                    <!-- TODO: Start tracking emails conversions -->
                    <if condition="ownedOrganizationList.size() &gt; 0"><then>
                        <service-call name="org.moqui.impl.UserServices.set#Preference" in-map="[
                            preferenceKey:'ACTIVE_ORGANIZATION',preferenceValue:ownedOrganizationList.getFirst().partyId]"/>
                        <set field="linkUrl" from="baseLinkUrl+'/coapp/Process/FindProcessStory'"/>
                    </then><else>
                        <set field="linkUrl" from="baseLinkUrl+'/settings/Organizations'"/>
                    </else></if>
                    <service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[
                        contactListId:listParty.contactListId,emailTemplateId:createProcessStoryEmailTemplateId,
                        partyId:listParty.partyId,preferredContactMechId:null,toAddresses:userAccount.emailAddress,
                        bodyParameters:[linkUrl:linkUrl,baseLinkUrl:baseLinkUrl,
                        title:'The Process Story is the most important requirements document']]" out-map="context"/>
                    <set field="emailsSentList" from="emailsSentList + [partyId:listParty.partyId,
                        emailAddress:userAccount.emailAddress,emailTemplateId:emailTemplateId]"/>
                </if>

                <!-- 8 days after sign up, Lead gets sent an activation email to create an actor. -->
                <if condition="createProcessStoryAlreadyBeenSent &amp;&amp; !createActorAlreadyBeenSent
                    &amp;&amp; userAccount &amp;&amp; historyList.size() &gt; 0
                    &amp;&amp; eightDaysAgo.toInstant() &gt; historyList.getFirst().fromDate.toInstant()">
                    <!-- TODO: Start tracking emails conversions -->
                    <if condition="ownedOrganizationList.size() &gt; 0"><then>
                        <service-call name="org.moqui.impl.UserServices.set#Preference" in-map="[
                            preferenceKey:'ACTIVE_ORGANIZATION',preferenceValue:ownedOrganizationList.getFirst().partyId]"/>
                        <set field="linkUrl" from="baseLinkUrl+'/coapp/Actor'"/>
                    </then><else>
                        <set field="linkUrl" from="baseLinkUrl+'/settings/Organizations'"/>
                    </else></if>
                    <service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[
                        contactListId:listParty.contactListId,emailTemplateId:createActorEmailTemplateId,
                        partyId:listParty.partyId,preferredContactMechId:null,toAddresses:userAccount.emailAddress,
                        bodyParameters:[linkUrl:linkUrl,baseLinkUrl:baseLinkUrl,
                        title:'Actors are WHO perform activities']]" out-map="context"/>
                    <set field="emailsSentList" from="emailsSentList + [partyId:listParty.partyId,
                        emailAddress:userAccount.emailAddress,emailTemplateId:emailTemplateId]"/>
                </if>
            </iterate>
        </actions>
    </service>

    <service verb="signup" noun="Newsletter" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="emailAddress" required="true"><text-email/></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="signupSuccessful" type="Boolean"/>
            <parameter name="partyId"/>
            <parameter name="emailContactMechId"/>
        </out-parameters>
        <actions>
            <set field="signupSuccessful" value="false"/>
<!--            <log level="warn" message="Newsletter signup for ${emailAddress}"/>-->

            <entity-find entity-name="mantle.party.contact.PartyContactMechInfo" list="existingPartyList" limit="2">
                <date-filter/>
                <econdition field-name="contactMechPurposeId" value="EmailPrimary"/>
                <econdition field-name="contactMechTypeEnumId" value="CmtEmailAddress"/>
                <econdition field-name="infoString" from="emailAddress"/></entity-find>
            <if condition="existingPartyList.size() &gt; 1">
                <log level="warn" message="Multiple parties found for email address ${emailAddress}"/>
            </if>
            <set field="partyId" from="existingPartyList?.getFirst()?.partyId"/>
            <if condition="!partyId">
                <!-- copied from mantle.party.PartyServices.create#Account -->
                <!-- create Party and Person -->
                <service-call name="create#mantle.party.Party" in-map="context + [partyTypeEnumId:'PtyPerson']" out-map="newPartyOut"/>
                <set field="partyId" from="newPartyOut.partyId"/>
                <service-call name="create#mantle.party.Person" in-map="[partyId:partyId,firstName:'Not',lastName:'Set']"/>

                <!-- add the emailAddress -->
                <service-call name="mantle.party.ContactServices.create#EmailAddress" out-map="emailOut"
                        in-map="[emailAddress:emailAddress, partyId:partyId, contactMechPurposeId:'EmailPrimary']"/>
                <set field="emailContactMechId" from="emailOut.contactMechId"/>
            </if>

            <set field="baseLinkUrl" from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : 'https://coarchy.com'"/>

            <entity-find entity-name="mantle.marketing.contact.ContactListParty" list="contactListPartyList" limit="1" for-update="true">
                <econdition field-name="contactListId" value="CoarchyNewsletter"/>
                <econdition field-name="statusId" value="CLPT_IN_USE"/>
                <econdition field-name="partyId"/>
                <date-filter/>
                <order-by field-name="-fromDate"/></entity-find>
            <if condition="contactListPartyList.size() == 0">
                <service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[
                    contactListId:'CoarchyNewsletter',emailTemplateId:'NEWSLETTER_WELCOME',
                    partyId:partyId,preferredContactMechId:emailContactMechId,toAddresses:emailAddress,
                    bodyParameters:[title:'Welcome to the Coarchy Newsletter',baseLinkUrl:baseLinkUrl]]" out-map="context"/>
                <message>Successfully subscribed to Newsletter!</message>
                <else>
                    <message>Already subscribed to Newsletter</message>
                </else>
            </if>
        </actions>
    </service>

</services>
