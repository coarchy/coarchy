<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <service verb="invite" noun="NewUser">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="emailAddress" required="true"/>
            <parameter name="firstName" required="true"/>
            <parameter name="lastName" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="newUserId"/>
            <parameter name="newPartyId"/>
        </out-parameters>
        <actions>
            <service-call name="coarchy.CoarchyServices.invite#User" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="invite" noun="User">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="emailAddress" required="true"/>
            <parameter name="firstName"/>
            <parameter name="lastName"/>
        </in-parameters>
        <out-parameters>
            <parameter name="newUserId"/>
            <parameter name="newPartyId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="organization" auto-field-map="[partyId:partyId]"/>
            <if condition="!organization || !organization.ownerPartyId"><return/></if>
            <if condition="organization.ownerPartyId == ec.user.userAccount.partyId">
                <entity-find entity-name="moqui.security.UserAccount" list="existingUaList">
                    <econdition field-name="emailAddress" ignore-case="true"/></entity-find>
                <if condition="!existingUaList"><then>
                    <service-call name="mantle.party.PartyServices.create#Account" out-map="newUser"
                            in-map="[emailAddress:emailAddress,firstName:firstName,lastName:lastName,username:emailAddress]"/>
                    <service-call name="create#moqui.security.UserGroupMember" in-map="[userGroupId:'COARCHY_USERS', userId:newUser.userId, fromDate:ec.user.nowTimestamp]"/>
                </then><else>
                    <set field="newUser" from="existingUaList?.getFirst()"/>
                </else></if>
                <set field="newPartyId" from="newUser.partyId"/>
                <set field="newUserId" from="newUser.userId"/>

                <service-call name="create#mantle.party.PartyRelationship" in-map="[relationshipTypeEnumId:'PrtMember',fromPartyId:newUser.partyId,toRoleTypeId:'OrgInternal',toPartyId:partyId]"/>
                <service-call name="org.moqui.impl.UserServices.set#Preference" in-map="[preferenceKey:'ACTIVE_ORGANIZATION',preferenceValue:partyId]"/>

                <set field="baseLinkUrl" from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : 'https://coarchy.com'"/>
                <if condition="!existingUaList"><then>

                    <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" auto-field-map="[userId:newUser.userId]" for-update="true"/>
                    <!-- reset the password to a random value -->
                    <set field="resetPassword" from="getRandomString(12)"/>
                    <set field="passwordNode" from="ec.ecfi.confXmlRoot.first('user-facade').first('password')"/>
                    <set field="userAccount.resetPassword" from="ec.ecfi.getSimpleHash(resetPassword, userAccount.passwordSalt, userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64))"/>
                    <set field="userAccount.requirePasswordChange" from="(passwordNode.attribute('email-require-change') == 'true') ? 'Y' : 'N'"/>
                    <entity-update value-field="userAccount"/>

                    <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" in-map="[emailTemplateId:'USER_INVITE_RESET_PASSWORD',toAddresses:emailAddress,bodyParameters:[linkUrl:baseLinkUrl+'/ChangePassword?username='+emailAddress+'&amp;oldPassword='+resetPassword,title:'You\'re invited to join the '+organization.organizationName+' Organization']]"/>
                </then><else>
                    <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" in-map="[emailTemplateId:'USER_INVITE',toAddresses:emailAddress,bodyParameters:[linkUrl:baseLinkUrl+'/Login?username='+emailAddress,title:'You\'re invited to join the '+organization.organizationName+' Organization']]"/>
                </else></if>

                <else><return type="danger" error="true" message="Not allowed"/></else>
            </if>
        </actions>
    </service>

    <service verb="create" noun="ProcessStory">
        <in-parameters>
            <parameter name="name" required="true"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="processStoryId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="coarchy.ProcessStory" list="processStoryList" limit="20">
                <econdition field-name="name" operator="like" value="%${name}%" ignore-case="true"/>
                <order-by field-name="^name"/>
            </entity-find>
            <if condition="processStoryList?.size() &gt; 0"><return type="warning" message="Process Story '${processStoryList?.getFirst()?.name}' already exists"/></if>

            <service-call name="create#coarchy.ProcessStory" in-map="[name:name,organizationId:organizationId]" out-map="context"/>
        </actions>
    </service>

    <service verb="create" noun="Activity">
        <in-parameters>
            <parameter name="processStoryId" required="true"/>
            <parameter name="organizationId" required="true"/>
            <parameter name="condition"/>
            <parameter name="actorIdList" type="List"/>
            <parameter name="action"/>
            <parameter name="sequenceNum"/>
            <parameter name="implementationId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="activityId"/>
            <parameter name="processStoryActivityId"/>
            <parameter name="sequenceNum"/>
        </out-parameters>
        <actions>
            <if condition="!action"><return type="warning" message="An action is needed for an activity"/></if>
            <service-call name="create#coarchy.Activity" in-map="[condition:condition.trim(), action:action.trim(), organizationId:organizationId, implementationId:implementationId]" out-map="newActivity"/>
            <set field="activityId" from="newActivity.activityId"/>

            <set field="newSequenceNum" from="sequenceNum"/>
            <if condition="!sequenceNum">
                <entity-find entity-name="coarchy.ProcessStoryActivity" limit="1" list="processStoryActivityList">
                    <econdition field-name="processStoryId"/>
                    <order-by field-name="-sequenceNum"/></entity-find>
                <set field="highestProcessStoryActivity" from="processStoryActivityList?.getFirst()"/>
                <set field="newSequenceNum" from="highestProcessStoryActivity?.sequenceNum != null ? highestProcessStoryActivity?.sequenceNum + 1 : 0"/>
            </if>
            <service-call name="create#coarchy.ProcessStoryActivity" in-map="[processStoryId:processStoryId,activityId:newActivity.activityId, sequenceNum:newSequenceNum, organizationId:organizationId]" out-map="newStoryActivity"/>
            <set field="processStoryActivityId" from="newStoryActivity.processStoryActivityId"/>
            <set field="sequenceNum" from="newStoryActivity.sequenceNum"/>

            <if condition="actorIdList?.size() != 0 &amp;&amp; actorIdList instanceof String">
                <then>
                    <service-call name="create#coarchy.ActivityActor" in-map="[activityId:newActivity.activityId, actorId:actorIdList, organizationId:organizationId]"/>
                </then>
                <else>
                    <iterate list="actorIdList" entry="actorId">
                        <service-call name="create#coarchy.ActivityActor" in-map="[activityId:newActivity.activityId, actorId:actorId, organizationId:organizationId]"/>
                    </iterate>
                </else>
            </if>
        </actions>
    </service>
    <service verb="update" noun="Activity">
        <in-parameters>
            <parameter name="activityId" required="true"/>
            <parameter name="condition"/>
            <parameter name="actorIdList" type="List"/>
            <parameter name="action" required="true"/>
            <parameter name="implementationId"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <actions>
<!--            <log level="warn" message="update activity context.toString() ${context.toString()}"/>-->
            <service-call name="update#coarchy.Activity" in-map="[activityId:activityId,condition:condition.trim(),action:action.trim(),implementationId:implementationId]"/>
            <entity-find entity-name="coarchy.ActivityActorDetail" list="activityActorList">
                <econdition field-name="activityId"/>
                <order-by field-name="name"/></entity-find>
            <set field="actorIdServerList" from="activityActorList*.actorId"/>
            <if condition="actorIdServerList">
                <set field="actorIdDeleteList" from="actorIdServerList - actorIdList?:[]"/>
<!--                                    <log level="warn" message="actorIdDeleteList ${actorIdDeleteList}"/>-->
                <iterate list="actorIdDeleteList" entry="actorIdDelete">
                    <service-call name="delete#coarchy.ActivityActor" in-map="[activityId:activityId,actorId:actorIdDelete]"/>
                </iterate>
            </if>

            <set field="actorIdCreateList" from="actorIdList?:[] - actorIdDeleteList?:[]"/>
            <if condition="actorIdCreateList instanceof String">
                <then>
                    <service-call name="store#coarchy.ActivityActor" in-map="[activityId:activityId, actorId:actorIdCreateList, organizationId:organizationId]"/></then>
                <else>
                    <iterate list="actorIdCreateList" entry="actorIdCreate">
                        <service-call name="store#coarchy.ActivityActor" in-map="[activityId:activityId, actorId:actorIdCreate, organizationId:organizationId]"/>
                    </iterate>
                </else>
            </if>
        </actions>
    </service>

    <service verb="create" noun="ChecklistProcessStory">
        <in-parameters>
            <parameter name="processStoryId" required="true"/>
            <parameter name="name" required="true"/>
<!--            <parameter name="recurStartCron"/>-->
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="rootWorkEffortId"/>
            <parameter name="taskWorkEffortIdList"/>
        </out-parameters>
        <actions><service-call name="coarchy.CoarchyServices.create#Checklist" in-map="context" out-map="context"/></actions>
    </service>

    <service verb="create" noun="Checklist">
        <in-parameters>
            <parameter name="processStoryId" required="true"/>
            <parameter name="name"/>
<!--            <parameter name="recurStartCron"/>-->
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="rootWorkEffortId"/>
            <parameter name="taskWorkEffortIdList"/>
        </out-parameters>
        <actions>
            <set field="name" from="name?.trim()"/>
            <if condition="estimatedStartDate != null &amp;&amp; estimatedCompletionDate != null &amp;&amp;
                           estimatedCompletionDate &lt; estimatedStartDate">
                <return error="true" message="Project date range is not valid."/>
            </if>
            <entity-find entity-name="coarchy.ProcessStoryActivityDetail" list="processStoryActivityList">
                <econdition field-name="processStoryId"/>
                <select-field field-name="activityId,condition,action"/>
                <order-by field-name="sequenceNum"/></entity-find>
            <if condition="processStoryActivityList?.size() == 0">
                <return error="true" message="Need at least 1 activity to create a checklist"/></if>

            <if condition="!name">
                <entity-find-one entity-name="coarchy.ProcessStory" value-field="processStory" auto-field-map="[processStoryId:processStoryId]"/>
                <set field="name" from="processStory.name"/>
            </if>
<!--            <service-call name="create#mantle.work.effort.WorkEffort" in-map="[workEffortName:name,recurStartCron:recurStartCron,ownerPartyId:organizationId,workEffortTypeEnumId:'WetProject',actualStartDate:ec.user.nowTimestamp]" out-map="projectWorkEffort"/>-->
            <service-call name="create#mantle.work.effort.WorkEffort" out-map="projectWorkEffort" in-map="[workEffortName:name,ownerPartyId:organizationId,workEffortTypeEnumId:'WetProject',actualStartDate:ec.user.nowTimestamp]"/>
            <set field="rootWorkEffortId" from="projectWorkEffort.workEffortId"/>
            <set field="projectFromDate" from="ec.user.nowTimestamp"/>
            <service-call name="create#mantle.work.effort.WorkEffortParty"
                    in-map="[workEffortId:projectWorkEffort.workEffortId, partyId:ec.user.userAccount.partyId,
                            roleTypeId:'Owner', fromDate:projectFromDate]"/>

            <set field="taskWorkEffortIdList" from="[]"/>
            <iterate list="processStoryActivityList" entry="processStoryActivity">
                <if condition="processStoryActivity.action">
                    <entity-find entity-name="coarchy.ActivityActorDetail" list="activityActorList">
                        <econdition field-name="activityId" from="processStoryActivity.activityId"/>
                        <order-by field-name="name"/></entity-find>

                    <set field="processStoryActivity" from="processStoryActivity.getMap() + [actorNames:activityActorList*.name]"/>
                    <set field="taskName" from="ec.resource.template('component://coarchy/template/Activity.html.ftl', '.ftl')"/>
                    <if condition="activityActorList.size() == 0">
                        <service-call name="delete#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:projectWorkEffort.workEffortId,
                            partyId:ec.user.userAccount.partyId,roleTypeId:'Owner', fromDate:projectFromDate]"/>
                        <iterate list="taskWorkEffortIdList" entry="taskWorkEffortId">
                            <service-call name="delete#mantle.work.effort.WorkEffort" in-map="[workEffortId:taskWorkEffortId]"/></iterate>
                        <service-call name="delete#mantle.work.effort.WorkEffort" in-map="[workEffortId:projectWorkEffort.workEffortId]"/>
                        <return error="true" message="Need at least 1 actor for Activity '${taskName}' in Process Story '${name}'"/></if>

                    <entity-find entity-name="coarchy.ActorPartyDetail" list="actorPartyList">
                        <econdition field-name="actorId" from="activityActorList*.actorId"/></entity-find>
                    <if condition="actorPartyList.size() == 0">
                        <service-call name="delete#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:projectWorkEffort.workEffortId,
                            partyId:ec.user.userAccount.partyId,roleTypeId:'Owner', fromDate:projectFromDate]"/>
                        <iterate list="taskWorkEffortIdList" entry="taskWorkEffortId">
                            <service-call name="delete#mantle.work.effort.WorkEffort" in-map="[workEffortId:taskWorkEffortId]"/></iterate>
                        <service-call name="delete#mantle.work.effort.WorkEffort" in-map="[workEffortId:projectWorkEffort.workEffortId]"/>
                        <return error="true" message="Need at least 1 user for each of these actors '${activityActorList*.name.join(', ')}'"/></if>

                    <set field="seqName" value="Project_${projectWorkEffort.workEffortId}"/>
                    <set field="workEffortId" value="${projectWorkEffort.workEffortId}-${ec.entity.sequencedIdPrimary(seqName, null, 10)}"/>
                    <service-call name="create#mantle.work.effort.WorkEffort" out-map="taskWorkEffort" in-map="[
                        rootWorkEffortId:projectWorkEffort.workEffortId,workEffortId:workEffortId,workEffortName:taskName,
                        ownerPartyId:organizationId,workEffortTypeEnumId:'WetTask',activityId:processStoryActivity.activityId]"/>

                    <script>taskWorkEffortIdList.add(taskWorkEffort.workEffortId)</script>
                </if>
            </iterate>
        </actions>
    </service>
    <service verb="update" noun="Checklist">
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <parameter name="workEffortName" required="true"/>
<!--            <parameter name="recurStartCron"/>-->
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <actions>
            <set field="workEffortName" from="workEffortName.trim()"/>
<!--            <service-call name="update#mantle.work.effort.WorkEffort" in-map="[workEffortId:workEffortId,workEffortName:workEffortName,recurStartCron:recurStartCron]"/>-->
            <service-call name="update#mantle.work.effort.WorkEffort" in-map="[workEffortId:workEffortId,workEffortName:workEffortName]"/>
        </actions>
    </service>
    <service verb="update" noun="Task">
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <parameter name="assignedPartyIdList" type="List" required="true"/>
            <parameter name="resolutionEnumId"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="task" auto-field-map="[workEffortId:workEffortId]"/>
            <if condition="!task"><return type="warning" message="Task not found"/></if>

            <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="workEffortPartyList">
                <date-filter/><econdition field-name="workEffortId"/>
                <econdition field-name="roleTypeId" value="Assignee"/>
                <order-by field-name="-fromDate"/>
            </entity-find>

            <set field="partyIdServerList" from="workEffortPartyList*.partyId"/>

            <if condition="partyIdServerList">
                <set field="partyIdDeleteList" from="partyIdServerList - assignedPartyIdList?:[]"/>

                <!--                                                    <log level="warn" message="partyIdDeleteList ${partyIdDeleteList}"/>-->
                <iterate list="partyIdDeleteList" entry="partyIdDelete">
<!--                    <log level="warn" message="workEffortPartyList.find{it.partyId==partyIdDelete}.fromDate ${workEffortPartyList.find{it.partyId==partyIdDelete}.fromDate}"/>-->
                    <service-call name="update#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:workEffortId,partyId:partyIdDelete,roleTypeId:'Assignee',fromDate:workEffortPartyList.find{it.partyId==partyIdDelete}.fromDate,thruDate:ec.user.nowTimestamp]"/>
                </iterate>
            </if>
            <set field="baseLinkUrl" from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : 'https://coarchy.com'"/>

            <set field="partyIdCreateList" from="assignedPartyIdList?:[] - partyIdDeleteList?:[]"/>
            <!--                        <log level="warn" message="update#Actor context.toString() ${context.toString()}"/>-->
            <if condition="partyIdCreateList instanceof String">
                <then>
                    <service-call name="store#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:workEffortId,partyId:partyIdCreateList,roleTypeId:'Assignee']"/>
                </then><else>
                <iterate list="partyIdCreateList" entry="partyIdCreate">
                    <service-call name="store#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:workEffortId,partyId:partyIdCreate,roleTypeId:'Assignee',fromDate:workEffortPartyList.find{it.partyId==partyIdCreate}?.fromDate?:ec.user.nowTimestamp]"/>

                    <entity-find entity-name="mantle.work.effort.WorkEffort" list="taskList" limit="1">
                        <econdition field-name="rootWorkEffortId" from="task.rootWorkEffortId"/>
                        <econdition field-name="workEffortId" operator="less" from="workEffortId"/>
                        <order-by field-name="-workEffortId"/>
                    </entity-find>
<!--                    <log level="warn" message="workEffortId ${workEffortId} taskList ${taskList}"/>-->
                    <!-- Maybe send an assigned email, but on second thought it sounds annoying -->
<!--                    <if condition="ec.user.userAccount.partyId!=partyIdCreate &amp;&amp; (taskList.size() == 0 || !partyIdServerList.containsAll(assignedPartyIdList))">-->
                    <if condition="ec.user.userAccount.partyId!=partyIdCreate &amp;&amp; (taskList.size() == 0 || taskList.getFirst().resolutionEnumId!=null)">
                        <entity-find entity-name="moqui.security.UserAccount" list="userAccountList" limit="1">
                            <econdition field-name="partyId" from="partyIdCreate"/>
                            <select-field field-name="emailAddress"/>
                            <order-by field-name="-lastUpdatedStamp"/></entity-find>

                        <if condition="userAccountList?.getFirst()?.emailAddress == null"><then>
                            <message type="danger">Can't send email to notify about assignment</message>
                        </then><else>
                            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" in-map="[emailTemplateId:'TASK_ASSIGNED_NOTIFICATION',toAddresses:userAccountList.getFirst().emailAddress,bodyParameters:[linkUrl:baseLinkUrl+'/coapp/Checklist?checklistId='+task.rootWorkEffortId,title:'You\'ve been assigned a task'+(ec.user.userAccount.userFullName?' by '+ec.user.userAccount.userFullName:'')]]"/>
                        </else></if>
                    </if>
                </iterate>
            </else></if>

<!--            <log level="warn" message="partyIdServerList.containsAll(assignedPartyIdList) ${partyIdServerList.containsAll(assignedPartyIdList)}"/>-->
<!--            <log level="warn" message="assignedPartyIdList ${assignedPartyIdList} partyIdServerList ${partyIdServerList}"/>-->

            <if condition="partyIdServerList.containsAll(assignedPartyIdList) &amp;&amp; workEffortPartyList.find{it.partyId == ec.user.userAccount.partyId} != null &gt; 0 &amp;&amp; resolutionEnumId">
                <if condition="resolutionEnumId">
                    <set field="actualCompletionDate" from="ec.user.nowTimestamp"/>
                    <service-call name="update#mantle.work.effort.WorkEffort" in-map="[workEffortId:workEffortId,resolutionEnumId:resolutionEnumId,actualCompletionDate:actualCompletionDate]"/>
                    <log message="Updating task ${workEffortId} to ${resolutionEnumId}"/>
                </if>

                <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="project" auto-field-map="[workEffortId:task.rootWorkEffortId]"/>
                <if condition="!project.actualCompletionDate">
                    <entity-find-count entity-name="mantle.work.effort.WorkEffort" count-field="taskCount">
                        <econdition field-name="rootWorkEffortId" from="task.rootWorkEffortId"/></entity-find-count>
                    <entity-find-count entity-name="mantle.work.effort.WorkEffort" count-field="taskWithResolutionCount">
                        <econdition field-name="rootWorkEffortId" from="task.rootWorkEffortId"/>
                        <econdition field-name="resolutionEnumId" operator="is-not-null"/></entity-find-count>
                    <if condition="taskWithResolutionCount == taskCount">
                        <service-call name="update#mantle.work.effort.WorkEffort" in-map="[workEffortId:task.rootWorkEffortId,actualCompletionDate:ec.user.nowTimestamp]"/>
                        <log message="Completing project ${task.rootWorkEffortId}"/>
                        <else>
                            <entity-find entity-name="mantle.work.effort.WorkEffort" list="taskList" limit="1">
                                <econdition field-name="rootWorkEffortId" from="task.rootWorkEffortId"/>
                                <econdition field-name="workEffortId" operator="greater"/>
                                <order-by field-name="workEffortId"/></entity-find>

                            <if condition="taskList?.size() &gt; 0 &amp;&amp; taskList?.getFirst()?.resolutionEnumId == null">
                                <entity-find entity-name="mantle.work.effort.WorkEffortAndPartyDetail" list="userAccountList">
                                    <date-filter/><econdition field-name="workEffortId" from="taskList?.getFirst()?.workEffortId"/>
                                    <econdition field-name="roleTypeId" value="Assignee"/>
                                    <select-field field-name="emailAddress,partyId"/>
                                    <order-by field-name="-fromDate"/></entity-find>

                                <if condition="userAccountList.size() &gt; 0 &amp;&amp;
                                        userAccountList?.getFirst()?.partyId != ec.user.userAccount.partyId
                                        &amp;&amp; userAccountList?.getFirst()?.emailAddress != null">
                                    <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" in-map="[emailTemplateId:'TASK_NOTIFICATION',toAddresses:userAccountList.getFirst().emailAddress,bodyParameters:[linkUrl:baseLinkUrl+'/coapp/Checklist?checklistId='+taskList?.getFirst().rootWorkEffortId,title:'Task '+taskList?.getFirst().workEffortName+' is ready']]"/>
                                </if>

                                <entity-find entity-name="mantle.work.effort.WorkEffortAndPartyDetail" list="userAccountOwnerList" limit="1">
                                    <date-filter/><econdition field-name="workEffortId" from="task.rootWorkEffortId"/>
                                    <econdition field-name="roleTypeId" value="Owner"/>
                                    <select-field field-name="emailAddress,partyId"/>
                                    <order-by field-name="-fromDate"/></entity-find>

                                <if condition="(userAccountList.size() == 0)">
                                    <if condition="(userAccountOwnerList.size() &gt; 0) &amp;&amp;
                                        userAccountOwnerList?.getFirst()?.partyId != ec.user.userAccount.partyId
                                        &amp;&amp; userAccountOwnerList?.getFirst()?.emailAddress != null">
                                        <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" in-map="[emailTemplateId:'TASK_NEEDS_ASSIGNMENT_NOTIFICATION',toAddresses:userAccountOwnerList.getFirst().emailAddress,bodyParameters:[linkUrl:baseLinkUrl+'/coapp/Checklist?checklistId='+taskList?.getFirst().rootWorkEffortId,title:'Task '+taskList?.getFirst().workEffortName+' is ready to be assigned']]"/>
                                    </if>
                                </if>
                            </if>

                        </else>
                    </if>
                </if>
            </if>

        </actions>
    </service>
    <service verb="assign" noun="AllTasks">
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <parameter name="actorId" required="true"/>
            <parameter name="partyId" required="true"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="workEffortId"/>
            <parameter name="returnToScreen"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="coarchy.WorkEffortActivityDetail" list="taskList" distinct="true">
                <date-filter/><econdition field-name="rootWorkEffortId" from="workEffortId"/>
                <econdition field-name="workEffortTypeEnumId" value="WetTask"/>
                <econdition field-name="workEffortTypeEnumId" value="WetTask"/>
                <econdition field-name="actorId"/>
                <econdition field-name="roleTypeId" operator="is-null"/>
                <econdition field-name="resolutionEnumId" operator="is-null"/>
                <select-field field-name="workEffortId"/>
                <order-by field-name="workEffortId"/></entity-find>
            <if condition="!taskList"><return type="warning" message="No tasks found"/></if>

            <iterate list="taskList" entry="task">
                <service-call name="coarchy.CoarchyServices.update#Task" in-map="[workEffortId:task.workEffortId,assignedPartyIdList:[partyId],organizationId:organizationId]"/>
            </iterate>

            <entity-find-count entity-name="WorkEffort" count-field="workEffortCount" distinct="true">
                <econdition field-name="rootWorkEffortId" from="workEffortId"/>
                <econdition field-name="workEffortTypeEnumId" value="WetTask"/>
                <select-field field-name="workEffortId"/></entity-find-count>
            <entity-find-count entity-name="WorkEffortAndParty" count-field="workEffortPartyCount" distinct="true">
                <date-filter/><econdition field-name="rootWorkEffortId" from="workEffortId"/>
                <econdition field-name="roleTypeId" value="Assignee"/>
                <select-field field-name="workEffortId,roleTypeId"/></entity-find-count>
            <set field="returnToScreen" from="workEffortCount==workEffortPartyCount"/>
        </actions>
    </service>

    <service verb="create" noun="Actor">
        <in-parameters>
            <parameter name="name" required="true"/>
            <parameter name="description"/>
            <parameter name="partyIdList" type="List"/>
            <parameter name="organizationId" required="true"/>
            <parameter name="isOwner" required="true" type="Boolean"/>
        </in-parameters>
        <out-parameters>
            <parameter name="actorId"/>
            <parameter name="partyIdList" type="List"/>
        </out-parameters>
        <actions>
            <set field="name" from="name.trim()"/>
            <set field="description" from="description?.trim()"/>
            <entity-find entity-name="coarchy.Actor" list="actorList" limit="20">
                <!-- NOTE: ignore case but don't do like for contains, makes things like "Customer" after "Placing Customer" an error -->
                <econdition field-name="name" from="name" ignore-case="true"/>
            </entity-find>
            <if condition="actorList"><return type="danger" message="Actor '${actorList?.getFirst()?.name}' already exists"/></if>

            <service-call name="create#coarchy.Actor" in-map="[name:name,description:description,organizationId:organizationId]" out-map="context"/>
            <if condition="isOwner">
                <iterate list="partyIdList" entry="partyId">
                    <service-call name="create#coarchy.ActorParty" in-map="[actorId:actorId,partyId:partyId,organizationId:organizationId]"/>
                </iterate>
            </if>
        </actions>
    </service>
    <service verb="update" noun="Actor">
        <in-parameters>
            <parameter name="actorId" required="true"/>
            <parameter name="name" required="true"/>
            <parameter name="description"/>
            <parameter name="partyIdList" type="List"/>
            <parameter name="organizationId" required="true"/>
            <parameter name="isOwner" required="true" type="Boolean"/>
        </in-parameters>
        <out-parameters>
            <parameter name="actorId"/>
        </out-parameters>
        <actions>
            <set field="name" from="name.trim()"/>
            <set field="description" from="description?.trim()"/>
            <entity-find entity-name="coarchy.Actor" list="actorList" limit="20">
                <!-- NOTE: ignore case but don't do like for contains, makes things like "Customer" after "Placing Customer" an error -->
                <econdition field-name="actorId" operator="not-equals"/>
                <econdition field-name="name" from="name" ignore-case="true"/>
            </entity-find>
            <if condition="actorList"><return type="danger" message="Actor '${actorList?.getFirst()?.name}' already exists"/></if>

            <service-call name="update#coarchy.Actor" in-map="[actorId:actorId,name:name,description:description,organizationId:organizationId]"/>

            <if condition="isOwner">
                <entity-find entity-name="coarchy.ActorParty" list="actorPartyList">
                    <econdition field-name="actorId"/>
                    <order-by field-name="actorId"/>
                </entity-find>

                <set field="partyIdServerList" from="actorPartyList*.partyId"/>
                <if condition="partyIdServerList">
                    <set field="partyIdDeleteList" from="partyIdServerList - partyIdList?:[]"/>

                    <!--                                                    <log level="warn" message="partyIdDeleteList ${partyIdDeleteList}"/>-->
                    <iterate list="partyIdDeleteList" entry="partyIdDelete">
                        <service-call name="delete#coarchy.ActorParty" in-map="[actorId:actorId,partyId:partyIdDelete]"/>
                    </iterate>
                </if>

                <set field="partyIdCreateList" from="partyIdList?:[] - partyIdDeleteList?:[]"/>
                <!--                        <log level="warn" message="update#Actor context.toString() ${context.toString()}"/>-->
                <if condition="partyIdCreateList instanceof String">
                    <then>
                        <service-call name="store#coarchy.ActorParty" in-map="[actorId:actorId, partyId:partyIdCreateList, organizationId:organizationId]"/>
                    </then><else>
                    <iterate list="partyIdCreateList" entry="partyIdCreate">
                        <service-call name="store#coarchy.ActorParty" in-map="[actorId:actorId, partyId:partyIdCreate, organizationId:organizationId]"/>
                    </iterate>
                </else></if>
            </if>
        </actions>
    </service>

    <service verb="create" noun="ValueStatement">
        <in-parameters>
            <parameter name="value" required="true"/>
            <parameter name="typeEnumId" required="true"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="valueStatementId"/>
        </out-parameters>
        <actions>
            <set field="value" from="value.trim()"/>
            <entity-find entity-name="coarchy.ValueStatement" list="valueStatementList" limit="20">
                <!-- NOTE: ignore case but don't do like for contains, makes things like "Customer" after "Placing Customer" an error -->
                <econdition field-name="value" from="value" ignore-case="true"/>
            </entity-find>
            <if condition="valueStatementList"><return type="danger" message="Value Statement '${valueStatementList?.getFirst()?.value}' already exists"/></if>

            <service-call name="create#coarchy.ValueStatement" in-map="[value:value,typeEnumId:typeEnumId,organizationId:organizationId]"/>
        </actions>
    </service>
    <service verb="create" noun="ActivityValue">
        <in-parameters>
            <parameter name="activityId" required="true"/>
            <parameter name="valueIdList" type="List"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="valueStatementId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="coarchy.ValueStatementActivity" list="valueStatementActivityList">
                <econdition field-name="activityId"/>
                <order-by field-name="name"/></entity-find>
            <set field="valueIdServerList" from="valueStatementActivityList*.valueStatementId"/>
            <if condition="valueIdServerList">
                <set field="valueIdDeleteList" from="valueIdServerList - valueIdList?:[]"/>

                <!--                                    <log level="warn" message="activityIdDeleteList ${activityIdDeleteList}"/>-->
                <iterate list="valueIdDeleteList" entry="valueIdDelete">
                    <set field="valueStatementActivity" from="valueStatementActivityList.find{it.valueStatementId == valueIdDelete}"/>
                    <if condition="valueStatementActivity"><then>
                        <service-call name="delete#coarchy.ValueStatementActivity" in-map="[valueStatementActivityId:valueStatementActivity.valueStatementActivityId]"/>
                    </then><else>
                        <message type="warning" error="true">Unable to delete value connection ${valueId}</message>
                    </else></if>
                </iterate>
            </if>

            <set field="valueIdCreateList" from="valueIdList?:[] - valueIdDeleteList?:[]"/>
            <!--            <log level="warn" message="update#ValueStatement context.toString() ${context.toString()}"/>-->
            <if condition="valueIdCreateList instanceof String">
                <then>
                    <service-call name="store#coarchy.ValueStatementActivity" in-map="[valueStatementActivityId:valueStatementActivityList.find{it.valueStatementId == valueIdCreateList}?.valueStatementActivityId,valueStatementId:valueIdCreateList, activityId:activityId, organizationId:organizationId]"/>
                </then><else>
                <iterate list="valueIdCreateList" entry="valueIdCreate">
                    <service-call name="store#coarchy.ValueStatementActivity" in-map="[valueStatementActivityId:valueStatementActivityList.find{it.valueStatementId == valueIdCreate}?.valueStatementActivityId,valueStatementId:valueIdCreate, activityId:activityId, organizationId:organizationId]"/>
                </iterate>
            </else>
            </if>
        </actions>
    </service>
    <service verb="update" noun="ValueStatement">
        <in-parameters>
            <parameter name="valueStatementId" required="true"/>
            <parameter name="value" required="true"/>
            <parameter name="activityIdList" type="List"/>
            <parameter name="typeEnumId"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="valueStatementId"/>
        </out-parameters>
        <actions>
            <set field="value" from="value.trim()"/>
            <entity-find entity-name="coarchy.ValueStatement" list="valueStatementList" limit="20">
                <!-- NOTE: ignore case but don't do like for contains, makes things like "Customer" after "Placing Customer" an error -->
                <econdition field-name="valueStatementId" operator="not-equals"/>
                <econdition field-name="value" from="value" ignore-case="true"/>
            </entity-find>
            <if condition="valueStatementList"><return type="danger" message="Value Statement '${valueStatementList?.getFirst()?.value}' already exists"/></if>

            <service-call name="update#coarchy.ValueStatement" in-map="[valueStatementId:valueStatementId,value:value,typeEnumId:typeEnumId,organizationId:organizationId]" out-map="context"/>

            <entity-find entity-name="coarchy.ValueStatementActivity" list="valueStatementActivityList">
                <econdition field-name="valueStatementId"/>
                <order-by field-name="name"/></entity-find>
            <set field="activityIdServerList" from="valueStatementActivityList*.activityId"/>
            <if condition="activityIdServerList">
                <set field="activityIdDeleteList" from="activityIdServerList - activityIdList?:[]"/>

                <!--                                    <log level="warn" message="activityIdDeleteList ${activityIdDeleteList}"/>-->
                <iterate list="activityIdDeleteList" entry="activityIdDelete">
                    <entity-find-one entity-name="ValueStatementActivity" value-field="valueStatementActivity" auto-field-map="[activityId:activityIdDelete,valueStatementId:valueStatementId]"/>
                    <if condition="valueStatementActivity"><then>
                        <service-call name="delete#coarchy.ValueStatementActivity" in-map="[valueStatementActivityId:valueStatementActivity.valueStatementActivityId]"/>
                    </then><else>
                        <message type="warning">Unable to delete activity connection ${activityId}</message>
                    </else></if>
                </iterate>
            </if>

            <set field="activityIdCreateList" from="activityIdList?:[] - activityIdDeleteList?:[]"/>
<!--            <log level="warn" message="update#ValueStatement context.toString() ${context.toString()}"/>-->
            <if condition="activityIdCreateList instanceof String">
                <then>
                    <entity-find-one entity-name="ValueStatementActivity" value-field="valueStatementActivity" auto-field-map="[activityId:activityIdCreateList,valueStatementId:valueStatementId]"/>
                    <service-call name="store#coarchy.ValueStatementActivity" in-map="[valueStatementActivityId:valueStatementActivity?.valueStatementActivityId,valueStatementId:valueStatementId, activityId:activityIdCreateList, organizationId:organizationId]"/>
                </then><else>
                    <iterate list="activityIdCreateList" entry="activityIdCreate">
                        <entity-find-one entity-name="ValueStatementActivity" value-field="valueStatementActivity" auto-field-map="[activityId:activityIdCreate,valueStatementId:valueStatementId]"/>
                        <service-call name="store#coarchy.ValueStatementActivity" in-map="[valueStatementActivityId:valueStatementActivity?.valueStatementActivityId,valueStatementId:valueStatementId, activityId:activityIdCreate, organizationId:organizationId]"/>
                    </iterate>
                </else>
            </if>
        </actions>
    </service>
    <service verb="delete" noun="ValueStatement">
        <in-parameters>
            <parameter name="valueStatementId" required="true"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="valueStatementId"/>
        </out-parameters>
        <actions>
            <entity-find-count entity-name="coarchy.ValueStatementActivity" count-field="valueStatementActivityCount">
                <econdition field-name="valueStatementId"/></entity-find-count>
            <if condition="valueStatementActivityCount &gt; 0">
                <return type="warning" message="Cannot delete an Value Statement with Process Story Activities"/>
            </if>
            <entity-find-one entity-name="coarchy.ValueStatement" value-field="valueStatement" auto-field-map="[valueStatementId:valueStatementId,organizationId:organizationId]"/>

            <if condition="valueStatement">
                <service-call name="delete#coarchy.ValueStatement" in-map="[valueStatementId:valueStatementId]"/>
            </if>
        </actions>
    </service>

    <service verb="update" noun="User">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="actorIdList" type="List"/>
            <parameter name="organizationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="coarchy.ActorParty" list="actorPartyList">
                <econdition field-name="partyId"/>
                <econdition field-name="organizationId"/>
            </entity-find>
            <set field="actorIdServerList" from="actorPartyList*.actorId"/>
            <if condition="actorIdServerList">
                <set field="actorIdDeleteList" from="actorIdServerList - actorIdList?:[]"/>
<!--                                                                    <log level="warn" message="actorIdDeleteList ${actorIdDeleteList}"/>-->
                <iterate list="actorIdDeleteList" entry="actorIdDelete">
                    <service-call name="delete#coarchy.ActorParty" in-map="[actorId:actorIdDelete,partyId:partyId]"/>
                </iterate>
            </if>
            <set field="actorIdCreateList" from="actorIdList?:[] - actorIdDeleteList?:[]"/>
            <!--                        <log level="warn" message="update#Actor context.toString() ${context.toString()}"/>-->
            <if condition="actorIdCreateList instanceof String">
                <then>
                    <service-call name="store#coarchy.ActorParty" in-map="[actorId:actorIdCreateList, partyId:partyId, organizationId:organizationId]"/>
                </then><else>
                <iterate list="actorIdCreateList" entry="actorIdCreate">
                    <service-call name="store#coarchy.ActorParty" in-map="[actorId:actorIdCreate, partyId:partyId, organizationId:organizationId]"/>
                </iterate>
            </else></if>
        </actions>
    </service>

    <service verb="update" noun="Vision">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="originStoryDescription"/>
            <parameter name="missionDescription"/>
            <parameter name="visionDescription"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
            <parameter name="originStoryContentId"/>
            <parameter name="missionContentId"/>
            <parameter name="visionContentId"/>
        </out-parameters>
        <actions>
            <set field="originStoryDescription" from="originStoryDescription.trim()"/>
            <set field="missionDescription" from="missionDescription.trim()"/>
            <set field="visionDescription" from="visionDescription.trim()"/>

            <entity-find entity-name="mantle.party.PartyContent" list="originStoryList" limit="1">
                <econdition field-name="partyId"/>
                <econdition field-name="partyContentTypeEnumId" value="PcntOriginStory"/>
                <order-by field-name="-contentDate"/></entity-find>
            <if condition="originStoryList.size() == 0"><then>
                <service-call name="create#mantle.party.PartyContent" out-map="originStoryContent" in-map="[partyId:partyId,partyContentTypeEnumId:'PcntOriginStory',description:originStoryDescription]"/>
                <set field="originStoryContentId" from="originStoryContent.partyContentId"/>
            </then><else>
                <set field="originStoryContentId" from="originStoryList.getFirst().partyContentId"/>
                <service-call name="update#mantle.party.PartyContent" out-map="originStoryContent" in-map="[partyContentId:originStoryContentId,description:originStoryDescription]"/>
            </else></if>

            <entity-find entity-name="mantle.party.PartyContent" list="missionList" limit="1">
                <econdition field-name="partyId"/>
                <econdition field-name="partyContentTypeEnumId" value="PcntMission"/>
                <order-by field-name="-contentDate"/></entity-find>
            <if condition="missionList.size() == 0"><then>
                <service-call name="create#mantle.party.PartyContent" out-map="missionContent" in-map="[partyId:partyId,partyContentTypeEnumId:'PcntMission',description:missionDescription]"/>
                <set field="missionContentId" from="missionContent.partyContentId"/>
            </then><else>
                <set field="missionContentId" from="missionList.getFirst().partyContentId"/>
                <service-call name="update#mantle.party.PartyContent" out-map="missionContent" in-map="[partyContentId:missionContentId,description:missionDescription]"/>
            </else></if>

            <entity-find entity-name="mantle.party.PartyContent" list="visionList" limit="1">
                <econdition field-name="partyId"/>
                <econdition field-name="partyContentTypeEnumId" value="PcntVision"/>
                <order-by field-name="-contentDate"/></entity-find>
            <if condition="visionList.size() == 0"><then>
                <service-call name="create#mantle.party.PartyContent" out-map="visionContent" in-map="[partyId:partyId,partyContentTypeEnumId:'PcntVision',description:visionDescription]"/>
                <set field="visionContentId" from="visionContent.partyContentId"/>
            </then><else>
                <set field="visionContentId" from="visionList.getFirst().partyContentId"/>
                <service-call name="update#mantle.party.PartyContent" out-map="visionContent" in-map="[partyContentId:visionContentId,description:visionDescription]"/>
            </else></if>
        </actions>
    </service>

    <service verb="buy" noun="OrganizationMonthCredits">
        <in-parameters>
            <parameter name="quantity" required="true" type="Integer"/>
            <parameter name="productId" default-value="c100000"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
        </out-parameters>
        <actions>
            <if condition="quantity &lt; 1"><return type="danger" message="Organization-Month Quantity must at least 1" error="true" public="true"/></if>
            <entity-find entity-name="mantle.product.store.ProductStoreProduct" list="productStoreProductList" limit="1">
                <econdition field-name="productId"/><order-by field-name="-lastUpdatedStamp"/></entity-find>
            <service-call name="mantle.order.OrderServices.add#OrderProductQuantity" in-map="[quantity:quantity,productId:productId,
                productStoreId:productStoreProductList.getFirst()?.productStoreId,addToQuantity:false]" out-map="context"/>
        </actions>
    </service>

    <service verb="deposit" noun="OrderToFinancialAccount">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <auto-parameters entity-name="mantle.order.OrderHeader" include="nonpk"/>
        </in-parameters>
        <actions>
<!--            <log level="warn" message="deposit#OrderToFinancialAccount context.toString() ${context.toString()}"/>-->

            <entity-find entity-name="mantle.order.OrderItemAndPart" list="orderItemPartList">
                <econdition field-name="orderId"/>
                <econdition field-name="itemTypeEnumId" value="ItemProduct"/>
                <econdition field-name="productId" value="c100000"/>
                <order-by field-name="orderItemSeqId"/></entity-find>
            <if condition="orderItemPartList.size() == 0"><return type="warning" message="No Organization-Month Items found for order"/></if>

            <iterate list="orderItemPartList" entry="orderItemPart">
                <!-- find financial accounts for the user who bought the order items or create financial account if not already exists -->
                <service-call name="mantle.account.FinancialAccountServices.getOrCreate#FinancialAccount" in-map="[
                        finAccountTypeId:'OrganizationMonthCredit',organizationPartyId:'coarchy',
                        ownerPartyId:orderItemPart.customerPartyId,currencyUomId:'']" out-map="context"/>

                <service-call name="mantle.account.FinancialAccountServices.deposit#FinancialAccount" in-map="[
                        finAccountId:finAccountId,amount:orderItemPart.quantity,orderId:orderId,
                        orderItemSeqId:orderItemPart.orderItemSeqId]"/>
            </iterate>

            <set field="partsAlreadyInvoiced" from="[]"/>
            <iterate list="orderItemPartList" entry="orderItemPart">
                <if condition="partsAlreadyInvoiced.contains(orderItemPart.orderPartSeqId)"><continue/></if>
                <service-call name="mantle.account.InvoiceServices.create#EntireOrderPartInvoice" in-map="[orderId:orderId,
                    orderPartSeqId:orderItemPart.orderPartSeqId]"/>
                <set field="partsAlreadyInvoiced" from="partsAlreadyInvoiced + [orderItemPart.orderPartSeqId]"/>
            </iterate>

            <service-call name="mantle.order.OrderServices.complete#Order" in-map="[orderId:orderId]"/>

        </actions>
    </service>
</services>
